{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n// import { useNavigate } from 'react-router-dom';\n// import axios from 'axios';\n// import { CreditCard, Lock, Calendar, User, Shield } from 'lucide-react';\n// import './CheckoutPage.css';\n// import Navbar from '../NavBar/Navbar';\n\n// const CheckoutPage = ({ tripData = {\n//   days: [\n//     { title: \"Plan + Flight + Hotel\", cost: 140000 },\n//     { title: \"Plan + Bus + Hotel\", cost: 25000 },\n//     { title: \"Plan + Car + Hotel\", cost: 32500 }\n//   ],\n//   discountPercentage: 10\n// } }) => {\n//   const stripe = useStripe();\n//   const elements = useElements();\n//   const navigate = useNavigate();\n\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [success, setSuccess] = useState(false);\n//   const [promoCode, setPromoCode] = useState('');\n//   const [isCardFocused, setIsCardFocused] = useState(false);\n\n//   // Calculate totals\n//   const subtotal = tripData.days.reduce((sum, day) => sum + day.cost, 0);\n//   const discount = (subtotal * tripData.discountPercentage) / 100;\n//   const total = subtotal - discount;\n\n//   useEffect(() => {\n//     if (success) {\n//       const timer = setTimeout(() => {\n//         navigate('/cart');\n//       }, 3000);\n//       return () => clearTimeout(timer);\n//     }\n//   }, [success, navigate]);\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     setLoading(true);\n\n//     if (!stripe || !elements) return;\n\n//     try {\n//       const { data: { clientSecret } } = await axios.post('http://localhost:5000/create-payment-intent', {\n//         amount: total\n//       });\n\n//       const { error: stripeError } = await stripe.confirmCardPayment(clientSecret, {\n//         payment_method: {\n//           card: elements.getElement(CardElement),\n//         }\n//       });\n\n//       if (stripeError) {\n//         setError(stripeError.message);\n//         setSuccess(false);\n//       } else {\n//         setSuccess(true);\n//         setError(null);\n//       }\n//     } catch (err) {\n//       setError(err.message);\n//       setSuccess(false);\n//     }\n//     setLoading(false);\n//   };\n\n//   return (\n//     <div className=\"checkout-container\">\n//       <Navbar />\n//       <div className=\"checkout-content fade-in\">\n//         <div className=\"checkout-header\">\n//           <h1>Complete Your Payment</h1>\n//           <div className=\"secure-badge\">\n//             <Shield size={18} /> Secured & Encrypted\n//           </div>\n//         </div>\n\n//         <div className=\"checkout-grid\">\n//           <div className=\"summary-card\">\n//             <div className=\"card-header\">\n//               <h2>Trip Summary</h2>\n//               <CreditCard size={20} />\n//             </div>\n\n//             <div className=\"cost-breakdown\">\n//               {tripData.days.map((day, index) => (\n//                 <div key={index} className=\"cost-item slide-in\">\n//                   <span>Day {index + 1}: {day.title}</span>\n//                   <span className=\"cost\">{day.cost.toLocaleString()}</span>\n//                 </div>\n//               ))}\n\n//               <div className=\"cost-divider\"></div>\n\n//               <div className=\"subtotal cost-item\">\n//                 <span>Sub-total</span>\n//                 <span className=\"cost\">{subtotal.toLocaleString()}</span>\n//               </div>\n\n//               <div className=\"discount cost-item\">\n//                 <span>Points Discount ({tripData.discountPercentage}%)</span>\n//                 <span className=\"cost-discount\">-{discount.toLocaleString()}</span>\n//               </div>\n\n//               <div className=\"total cost-item\">\n//                 <span>Total Amount</span>\n//                 <span className=\"cost-total\">{total.toLocaleString()}</span>\n//               </div>\n//             </div>\n\n//             <div className=\"promosection\">\n//               <h3>Promo Code</h3>\n//               <div className=\"promo-input\">\n//                 <input \n//                   type=\"text\" \n//                   value={promoCode}\n//                   onChange={(e) => setPromoCode(e.target.value)}\n//                   placeholder=\"Enter your code\"\n//                 />\n//                 <button className=\"promo-button\">Apply</button>\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"payment-card\">\n//             <div className=\"card-header\">\n//               <h2>Card Payment</h2>\n//               <Lock size={20} />\n//             </div>\n\n//             <form onSubmit={handleSubmit} className=\"payment-form\">\n//               <div className={`stripe-card ${isCardFocused ? 'focused' : ''}`}>\n//                 <CardElement \n//                   onFocus={() => setIsCardFocused(true)}\n//                   onBlur={() => setIsCardFocused(false)}\n//                   options={{\n//                     style: {\n//                       base: {\n//                         fontSize: '16px',\n//                         fontWeight: '500',\n//                         fontFamily: 'Inter, system-ui, sans-serif',\n//                         color: '#1a1f36',\n//                         '::placeholder': {\n//                           color: '#6b7280',\n//                         },\n//                         padding: '20px 0',\n//                       },\n//                       invalid: {\n//                         color: '#ef4444',\n//                       },\n//                     },\n//                   }}\n//                 />\n//               </div>\n\n//               {error && <div className=\"error-message slide-in\">{error}</div>}\n//               {success && <div className=\"success-message slide-in\">Payment successful! Redirecting...</div>}\n\n//               <button \n//                 className={`payment-button ${loading ? 'loading' : ''}`}\n//                 type=\"submit\"\n//                 disabled={!stripe || loading}\n//               >\n//                 {loading ? (\n//                   <>\n//                     <div className=\"spinner\"></div>\n//                     Processing Payment...\n//                   </>\n//                 ) : (\n//                   <>\n//                     <Lock size={18} />\n//                     Pay {total.toLocaleString()}\n//                   </>\n//                 )}\n//               </button>\n//             </form>\n\n//             <div className=\"security-info\">\n//               <Shield size={16} />\n//               <span>Your payment information is encrypted and secure</span>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CheckoutPage;","map":{"version":3,"names":[],"sources":["F:/Web/Voyaige/Voyaige/proj/front/src/components/CheckoutPage/CheckoutPage.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import { CreditCard, Lock, Calendar, User, Shield } from 'lucide-react';\r\n// import './CheckoutPage.css';\r\n// import Navbar from '../NavBar/Navbar';\r\n\r\n// const CheckoutPage = ({ tripData = {\r\n//   days: [\r\n//     { title: \"Plan + Flight + Hotel\", cost: 140000 },\r\n//     { title: \"Plan + Bus + Hotel\", cost: 25000 },\r\n//     { title: \"Plan + Car + Hotel\", cost: 32500 }\r\n//   ],\r\n//   discountPercentage: 10\r\n// } }) => {\r\n//   const stripe = useStripe();\r\n//   const elements = useElements();\r\n//   const navigate = useNavigate();\r\n  \r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [success, setSuccess] = useState(false);\r\n//   const [promoCode, setPromoCode] = useState('');\r\n//   const [isCardFocused, setIsCardFocused] = useState(false);\r\n\r\n//   // Calculate totals\r\n//   const subtotal = tripData.days.reduce((sum, day) => sum + day.cost, 0);\r\n//   const discount = (subtotal * tripData.discountPercentage) / 100;\r\n//   const total = subtotal - discount;\r\n\r\n//   useEffect(() => {\r\n//     if (success) {\r\n//       const timer = setTimeout(() => {\r\n//         navigate('/cart');\r\n//       }, 3000);\r\n//       return () => clearTimeout(timer);\r\n//     }\r\n//   }, [success, navigate]);\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n//     setLoading(true);\r\n    \r\n//     if (!stripe || !elements) return;\r\n\r\n//     try {\r\n//       const { data: { clientSecret } } = await axios.post('http://localhost:5000/create-payment-intent', {\r\n//         amount: total\r\n//       });\r\n\r\n//       const { error: stripeError } = await stripe.confirmCardPayment(clientSecret, {\r\n//         payment_method: {\r\n//           card: elements.getElement(CardElement),\r\n//         }\r\n//       });\r\n\r\n//       if (stripeError) {\r\n//         setError(stripeError.message);\r\n//         setSuccess(false);\r\n//       } else {\r\n//         setSuccess(true);\r\n//         setError(null);\r\n//       }\r\n//     } catch (err) {\r\n//       setError(err.message);\r\n//       setSuccess(false);\r\n//     }\r\n//     setLoading(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"checkout-container\">\r\n//       <Navbar />\r\n//       <div className=\"checkout-content fade-in\">\r\n//         <div className=\"checkout-header\">\r\n//           <h1>Complete Your Payment</h1>\r\n//           <div className=\"secure-badge\">\r\n//             <Shield size={18} /> Secured & Encrypted\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"checkout-grid\">\r\n//           <div className=\"summary-card\">\r\n//             <div className=\"card-header\">\r\n//               <h2>Trip Summary</h2>\r\n//               <CreditCard size={20} />\r\n//             </div>\r\n\r\n//             <div className=\"cost-breakdown\">\r\n//               {tripData.days.map((day, index) => (\r\n//                 <div key={index} className=\"cost-item slide-in\">\r\n//                   <span>Day {index + 1}: {day.title}</span>\r\n//                   <span className=\"cost\">{day.cost.toLocaleString()}</span>\r\n//                 </div>\r\n//               ))}\r\n              \r\n//               <div className=\"cost-divider\"></div>\r\n              \r\n//               <div className=\"subtotal cost-item\">\r\n//                 <span>Sub-total</span>\r\n//                 <span className=\"cost\">{subtotal.toLocaleString()}</span>\r\n//               </div>\r\n              \r\n//               <div className=\"discount cost-item\">\r\n//                 <span>Points Discount ({tripData.discountPercentage}%)</span>\r\n//                 <span className=\"cost-discount\">-{discount.toLocaleString()}</span>\r\n//               </div>\r\n              \r\n//               <div className=\"total cost-item\">\r\n//                 <span>Total Amount</span>\r\n//                 <span className=\"cost-total\">{total.toLocaleString()}</span>\r\n//               </div>\r\n//             </div>\r\n\r\n//             <div className=\"promosection\">\r\n//               <h3>Promo Code</h3>\r\n//               <div className=\"promo-input\">\r\n//                 <input \r\n//                   type=\"text\" \r\n//                   value={promoCode}\r\n//                   onChange={(e) => setPromoCode(e.target.value)}\r\n//                   placeholder=\"Enter your code\"\r\n//                 />\r\n//                 <button className=\"promo-button\">Apply</button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"payment-card\">\r\n//             <div className=\"card-header\">\r\n//               <h2>Card Payment</h2>\r\n//               <Lock size={20} />\r\n//             </div>\r\n\r\n//             <form onSubmit={handleSubmit} className=\"payment-form\">\r\n//               <div className={`stripe-card ${isCardFocused ? 'focused' : ''}`}>\r\n//                 <CardElement \r\n//                   onFocus={() => setIsCardFocused(true)}\r\n//                   onBlur={() => setIsCardFocused(false)}\r\n//                   options={{\r\n//                     style: {\r\n//                       base: {\r\n//                         fontSize: '16px',\r\n//                         fontWeight: '500',\r\n//                         fontFamily: 'Inter, system-ui, sans-serif',\r\n//                         color: '#1a1f36',\r\n//                         '::placeholder': {\r\n//                           color: '#6b7280',\r\n//                         },\r\n//                         padding: '20px 0',\r\n//                       },\r\n//                       invalid: {\r\n//                         color: '#ef4444',\r\n//                       },\r\n//                     },\r\n//                   }}\r\n//                 />\r\n//               </div>\r\n\r\n//               {error && <div className=\"error-message slide-in\">{error}</div>}\r\n//               {success && <div className=\"success-message slide-in\">Payment successful! Redirecting...</div>}\r\n\r\n//               <button \r\n//                 className={`payment-button ${loading ? 'loading' : ''}`}\r\n//                 type=\"submit\"\r\n//                 disabled={!stripe || loading}\r\n//               >\r\n//                 {loading ? (\r\n//                   <>\r\n//                     <div className=\"spinner\"></div>\r\n//                     Processing Payment...\r\n//                   </>\r\n//                 ) : (\r\n//                   <>\r\n//                     <Lock size={18} />\r\n//                     Pay {total.toLocaleString()}\r\n//                   </>\r\n//                 )}\r\n//               </button>\r\n//             </form>\r\n\r\n//             <div className=\"security-info\">\r\n//               <Shield size={16} />\r\n//               <span>Your payment information is encrypted and secure</span>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CheckoutPage;\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}