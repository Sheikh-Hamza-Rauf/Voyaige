{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\Voyaige\\\\proj\\\\front\\\\src\\\\components\\\\HotelsPage\\\\Hotels.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport hotelData from \"./clean_hotel_data.json\";\nimport \"./Hotels.css\";\nimport NavBar from \"../NavBar/Navbar\";\n\n// List of local images to randomize\nconst hotelImages = [require(\"./hotel.jpg\"), require(\"./hotel1.jpg\"), require(\"./hotel2.jpg\"), require(\"./hotel3.jpg\"), require(\"./hotel4.jpg\"), require(\"./hotel5.jpg\"), require(\"./hotel3.jpg\")];\nconst getRandomImage = () => {\n  return hotelImages[Math.floor(Math.random() * hotelImages.length)];\n};\nconst Hotels = () => {\n  const [hotelsByCity, setHotelsByCity] = useState({});\n  const [ratings, setRatings] = useState({});\n  useEffect(() => {\n    // Fetch and parse CSV file\n    fetch(\"./ratings.csv\").then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: result => {\n          const ratingsMap = {};\n          result.data.forEach(({\n            name,\n            rating,\n            category\n          }) => {\n            ratingsMap[name] = {\n              rating: parseFloat(rating),\n              category\n            };\n          });\n          setRatings(ratingsMap);\n        }\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (Object.keys(ratings).length === 0) return;\n    const enrichedHotels = hotelData.map(hotel => {\n      var _ratings$hotel$name, _ratings$hotel$name2;\n      return {\n        ...hotel,\n        rating: ((_ratings$hotel$name = ratings[hotel.name]) === null || _ratings$hotel$name === void 0 ? void 0 : _ratings$hotel$name.rating) || 0,\n        // Assign rating if available\n        category: ((_ratings$hotel$name2 = ratings[hotel.name]) === null || _ratings$hotel$name2 === void 0 ? void 0 : _ratings$hotel$name2.category) || hotel.category\n      };\n    });\n    const groupedHotels = enrichedHotels.reduce((acc, hotel) => {\n      const {\n        city\n      } = hotel;\n      if (!acc[city]) acc[city] = [];\n      acc[city].push(hotel);\n      return acc;\n    }, {});\n\n    // Sort by rating (highest first) and keep only top 5\n    Object.keys(groupedHotels).forEach(city => {\n      groupedHotels[city] = groupedHotels[city].sort((a, b) => b.rating - a.rating).slice(0, 5);\n    });\n    setHotelsByCity(groupedHotels);\n  }, [ratings]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hotels-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }), Object.entries(hotelsByCity).map(([city, hotels]) => /*#__PURE__*/React.createElement(\"div\", {\n    key: city,\n    className: \"city-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"city-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, \"Hotels in \", city), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hotels-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, hotels.map(hotel => /*#__PURE__*/React.createElement(\"div\", {\n    key: hotel.id,\n    className: \"hotel-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: getRandomImage() // Assigns a random image\n    ,\n    alt: hotel.name,\n    className: \"hotel-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, hotel.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"\\u2B50 \", hotel.rating.toFixed(1), \" (\", hotel.category, \")\")))))));\n};\nexport default Hotels;","map":{"version":3,"names":["React","useState","useEffect","Papa","hotelData","NavBar","hotelImages","require","getRandomImage","Math","floor","random","length","Hotels","hotelsByCity","setHotelsByCity","ratings","setRatings","fetch","then","response","text","csvText","parse","header","skipEmptyLines","complete","result","ratingsMap","data","forEach","name","rating","category","parseFloat","Object","keys","enrichedHotels","map","hotel","_ratings$hotel$name","_ratings$hotel$name2","groupedHotels","reduce","acc","city","push","sort","a","b","slice","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","entries","hotels","key","id","src","alt","toFixed"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/Voyaige/proj/front/src/components/HotelsPage/Hotels.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport hotelData from \"./clean_hotel_data.json\";\r\nimport \"./Hotels.css\";\r\nimport NavBar from \"../NavBar/Navbar\"\r\n\r\n// List of local images to randomize\r\nconst hotelImages = [\r\n  require(\"./hotel.jpg\"),\r\n  require(\"./hotel1.jpg\"),\r\n  require(\"./hotel2.jpg\"),\r\n  require(\"./hotel3.jpg\"),\r\n  require(\"./hotel4.jpg\"),\r\n  require(\"./hotel5.jpg\"),\r\n  require(\"./hotel3.jpg\")\r\n];\r\n\r\nconst getRandomImage = () => {\r\n  return hotelImages[Math.floor(Math.random() * hotelImages.length)];\r\n};\r\n\r\nconst Hotels = () => {\r\n  const [hotelsByCity, setHotelsByCity] = useState({});\r\n  const [ratings, setRatings] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Fetch and parse CSV file\r\n    fetch(\"./ratings.csv\")\r\n      .then((response) => response.text())\r\n      .then((csvText) => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (result) => {\r\n            const ratingsMap = {};\r\n            result.data.forEach(({ name, rating, category }) => {\r\n              ratingsMap[name] = { rating: parseFloat(rating), category };\r\n            });\r\n            setRatings(ratingsMap);\r\n          },\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(ratings).length === 0) return;\r\n\r\n    const enrichedHotels = hotelData.map((hotel) => {\r\n      return {\r\n        ...hotel,\r\n        rating: ratings[hotel.name]?.rating || 0, // Assign rating if available\r\n        category: ratings[hotel.name]?.category || hotel.category,\r\n      };\r\n    });\r\n\r\n    const groupedHotels = enrichedHotels.reduce((acc, hotel) => {\r\n      const { city } = hotel;\r\n      if (!acc[city]) acc[city] = [];\r\n      acc[city].push(hotel);\r\n      return acc;\r\n    }, {});\r\n\r\n    // Sort by rating (highest first) and keep only top 5\r\n    Object.keys(groupedHotels).forEach((city) => {\r\n      groupedHotels[city] = groupedHotels[city]\r\n        .sort((a, b) => b.rating - a.rating)\r\n        .slice(0, 5);\r\n    });\r\n\r\n    setHotelsByCity(groupedHotels);\r\n  }, [ratings]);\r\n\r\n  return (\r\n    <div className=\"hotels-container\">\r\n    <NavBar />\r\n      {Object.entries(hotelsByCity).map(([city, hotels]) => (\r\n        <div key={city} className=\"city-section\">\r\n          <h2 className=\"city-title\">Hotels in {city}</h2>\r\n          <div className=\"hotels-row\">\r\n            {hotels.map((hotel) => (\r\n              <div key={hotel.id} className=\"hotel-card\">\r\n                <img\r\n                  src={getRandomImage()} // Assigns a random image\r\n                  alt={hotel.name}\r\n                  className=\"hotel-image\"\r\n                />\r\n                <h3>{hotel.name}</h3>\r\n                <p>‚≠ê {hotel.rating.toFixed(1)} ({hotel.category})</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hotels;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}