{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\Voyaige\\\\proj\\\\front\\\\src\\\\components\\\\ChatbotPage\\\\MiloChatbot.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./MiloChatbot.css\";\nconst MiloChatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [welcomeVisible, setWelcomeVisible] = useState(true);\n  const [history, setHistory] = useState([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const apiBaseURL = \"http://127.0.0.1:5000\"; // Replace with your Flask backend's URL\n\n  const [initialMessageShown, setInitialMessageShown] = useState(true);\n  const [isTyping, setIsTyping] = useState(false);\n  useEffect(() => {\n    if (initialMessageShown) {\n      const initialMessages = [{\n        sender: 'bot',\n        message: \"Hi, I'm Milo, your personal travel assistant! Let's start planning your trip.\"\n      }];\n      setConversation(initialMessages);\n    }\n  }, [initialMessageShown]);\n  const handleChat = async e => {\n    e.preventDefault();\n    try {\n      let response;\n      const {\n        awaitingInput,\n        tripDetails\n      } = conversationState;\n\n      // User input message added to conversation\n      setConversation(prev => [...prev, {\n        sender: 'user',\n        message: userInput\n      }]);\n      if (awaitingInput) {\n        const updatedTripDetails = {\n          ...tripDetails,\n          [awaitingInput]: userInput\n        };\n        setConversationState({\n          ...conversationState,\n          tripDetails: updatedTripDetails,\n          awaitingInput: null\n        });\n        setUserInput('');\n        const nextInput = getNextDetail(updatedTripDetails);\n        if (nextInput) {\n          const botMessage = `Please provide your ${nextInput}.`;\n          setConversation(prev => [...prev, {\n            sender: 'bot',\n            message: botMessage\n          }]);\n        } else {\n          response = await fetch('http://127.0.0.1:5000/generate-itinerary', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              user_input: userInput,\n              starting_city: tripDetails.startingCity,\n              destination_city: tripDetails.destinationCity,\n              mode_of_transport: tripDetails.modeOfTransport,\n              days: tripDetails.days,\n              budget: tripDetails.budget\n            })\n          });\n          const data = await response.json();\n          const botMessage = data.response || 'Your itinerary has been generated!';\n          setConversation(prev => [...prev, {\n            sender: 'bot',\n            message: botMessage\n          }]);\n        }\n        return;\n      }\n      if (userInput.includes(\"generate itinerary\")) {\n        const nextInput = getNextDetail(tripDetails);\n        if (nextInput) {\n          setConversationState({\n            ...conversationState,\n            awaitingInput: nextInput\n          });\n          const botMessage = `Please provide your ${nextInput}.`;\n          setConversation(prev => [...prev, {\n            sender: 'bot',\n            message: botMessage\n          }]);\n        }\n      } else {\n        setIsTyping(true); // Set typing state to true\n        response = await fetch('http://127.0.0.1:5000/MiloChatbot', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_input: userInput\n          })\n        });\n        const data = await response.json();\n        const botMessage = data.response || 'I am here to assist you!';\n        setConversation(prev => [...prev, {\n          sender: 'bot',\n          message: botMessage\n        }]);\n        setIsTyping(false); // Set typing state to false after response\n      }\n      setUserInput('');\n    } catch (error) {\n      console.error('Error communicating with the chatbot:', error);\n      setConversation(prev => [...prev, {\n        sender: 'bot',\n        message: 'Sorry, there was an error. Please try again.'\n      }]);\n    }\n  };\n  const sendToBackend = async (endpoint, payload) => {\n    try {\n      const response = await fetch(`${apiBaseURL}${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      const data = await response.json();\n      return data.response || data.result;\n    } catch (error) {\n      console.error(\"Error communicating with backend:\", error);\n      return \"Sorry, something went wrong. Please try again later.\";\n    }\n  };\n  const handleUserMessage = async () => {\n    if (!input.trim()) return \"Error\";\n    const userMessage = input.trim();\n    setMessages([...messages, {\n      sender: \"user\",\n      text: userMessage\n    }]);\n    setHistory([userMessage, ...history]);\n    setInput(\"\");\n    setWelcomeVisible(false);\n\n    // Determine endpoint and payload\n    let endpoint = \"/MiloChatbot\";\n    let payload = {\n      user_input: userMessage\n    };\n    if (userMessage.toLowerCase().includes(\"generate itinerary\")) {\n      endpoint = \"/generate-itinerary\";\n      payload = {\n        user_input: userMessage,\n        starting_city: \"Islamabad\",\n        // Replace with dynamic user data\n        destination_city: \"Lahore\",\n        // Replace with dynamic user data\n        days: 3,\n        mode_of_transport: \"bus\",\n        budget: 50000\n      };\n    } else if (userMessage.toLowerCase().includes(\"tell me about\")) {\n      endpoint = \"/retrieve-details\";\n    } else if (userMessage.toLowerCase().includes(\"top\")) {\n      endpoint = \"/retrieve-top-items\";\n      payload.num_recommendations = 5; // Replace with extracted number from user input\n    } else if (userMessage.toLowerCase().includes(\"compare\")) {\n      endpoint = \"/compare-two-options\";\n    }\n\n    // Get response from backend\n    const botResponse = await sendToBackend(endpoint, payload);\n    setMessages(prevMessages => [...prevMessages, {\n      sender: \"milo\",\n      text: botResponse\n    }]);\n  };\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\") {\n      handleUserMessage();\n    } else if (e.key === \"ArrowUp\") {\n      if (history.length > 0 && historyIndex < history.length - 1) {\n        const newIndex = historyIndex + 1;\n        setInput(history[newIndex]);\n        setHistoryIndex(newIndex);\n      }\n    } else if (e.key === \"ArrowDown\") {\n      if (historyIndex > 0) {\n        const newIndex = historyIndex - 1;\n        setInput(history[newIndex]);\n        setHistoryIndex(newIndex);\n      } else {\n        setInput(\"\");\n        setHistoryIndex(-1);\n      }\n    }\n  };\n  useEffect(() => {\n    const chatContainer = document.getElementById(\"chat-container\");\n    if (chatContainer) {\n      chatContainer.scrollTop = chatContainer.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbot-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, welcomeVisible && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"welcome-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, \"Welcome to a chat with Milo, your own personal smart AI trip planner.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, \"Click on the input bar to start the chat.\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chat-container\",\n    className: \"chat-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, !welcomeVisible && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-bubble milo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, \"Milo: Hi, how may I help you plan your trip?\")), messages.map((msg, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: `chat-bubble ${msg.sender}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, msg.sender === \"user\" ? `You: ${msg.text}` : `Milo: ${msg.text}`)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Type your message here...\",\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onKeyDown: handleKeyDown,\n    onFocus: () => setWelcomeVisible(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleUserMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, \"Send\")));\n};\nexport default MiloChatbot;","map":{"version":3,"names":["React","useState","useEffect","MiloChatbot","messages","setMessages","input","setInput","welcomeVisible","setWelcomeVisible","history","setHistory","historyIndex","setHistoryIndex","apiBaseURL","initialMessageShown","setInitialMessageShown","isTyping","setIsTyping","initialMessages","sender","message","setConversation","handleChat","e","preventDefault","response","awaitingInput","tripDetails","conversationState","prev","userInput","updatedTripDetails","setConversationState","setUserInput","nextInput","getNextDetail","botMessage","fetch","method","headers","body","JSON","stringify","user_input","starting_city","startingCity","destination_city","destinationCity","mode_of_transport","modeOfTransport","days","budget","data","json","includes","error","console","sendToBackend","endpoint","payload","result","handleUserMessage","trim","userMessage","text","toLowerCase","num_recommendations","botResponse","prevMessages","handleKeyDown","key","length","newIndex","chatContainer","document","getElementById","scrollTop","scrollHeight","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","id","map","msg","index","type","placeholder","value","onChange","target","onKeyDown","onFocus","onClick"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/Voyaige/proj/front/src/components/ChatbotPage/MiloChatbot.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./MiloChatbot.css\";\r\n\r\nconst MiloChatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [welcomeVisible, setWelcomeVisible] = useState(true);\r\n  const [history, setHistory] = useState([]);\r\n  const [historyIndex, setHistoryIndex] = useState(-1);\r\n\r\n  const apiBaseURL = \"http://127.0.0.1:5000\"; // Replace with your Flask backend's URL\r\n\r\n  const [initialMessageShown, setInitialMessageShown] = useState(true);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  useEffect(() => {\r\n      if (initialMessageShown) {\r\n          const initialMessages = [\r\n              { sender: 'bot', message: \"Hi, I'm Milo, your personal travel assistant! Let's start planning your trip.\" },\r\n          ];\r\n          setConversation(initialMessages);\r\n      }\r\n  }, [initialMessageShown]);\r\n\r\n  const handleChat = async (e) => {\r\n      e.preventDefault();\r\n      try {\r\n          let response;\r\n          const { awaitingInput, tripDetails } = conversationState;\r\n\r\n          // User input message added to conversation\r\n          setConversation((prev) => [...prev, { sender: 'user', message: userInput }]);\r\n\r\n          if (awaitingInput) {\r\n              const updatedTripDetails = { ...tripDetails, [awaitingInput]: userInput };\r\n              setConversationState({ ...conversationState, tripDetails: updatedTripDetails, awaitingInput: null });\r\n              setUserInput('');\r\n\r\n              const nextInput = getNextDetail(updatedTripDetails);\r\n              if (nextInput) {\r\n                  const botMessage = `Please provide your ${nextInput}.`;\r\n                  setConversation((prev) => [...prev, { sender: 'bot', message: botMessage }]);\r\n              } else {\r\n                  response = await fetch('http://127.0.0.1:5000/generate-itinerary', {\r\n                      method: 'POST',\r\n                      headers: { 'Content-Type': 'application/json' },\r\n                      body: JSON.stringify({\r\n                          user_input: userInput,\r\n                          starting_city: tripDetails.startingCity,\r\n                          destination_city: tripDetails.destinationCity,\r\n                          mode_of_transport: tripDetails.modeOfTransport,\r\n                          days: tripDetails.days,\r\n                          budget: tripDetails.budget,\r\n                      }),\r\n                  });                    \r\n                  const data = await response.json();\r\n                  const botMessage = data.response || 'Your itinerary has been generated!';\r\n                  setConversation((prev) => [...prev, { sender: 'bot', message: botMessage }]);\r\n              }\r\n              return;\r\n          }\r\n\r\n          if (userInput.includes(\"generate itinerary\")) {\r\n              const nextInput = getNextDetail(tripDetails);\r\n              if (nextInput) {\r\n                  setConversationState({ ...conversationState, awaitingInput: nextInput });\r\n                  const botMessage = `Please provide your ${nextInput}.`;\r\n                  setConversation((prev) => [...prev, { sender: 'bot', message: botMessage }]);\r\n              }\r\n          } else {\r\n              setIsTyping(true); // Set typing state to true\r\n              response = await fetch('http://127.0.0.1:5000/MiloChatbot', {\r\n                  method: 'POST',\r\n                  headers: { 'Content-Type': 'application/json' },\r\n                  body: JSON.stringify({ user_input: userInput }),\r\n              });\r\n              const data = await response.json();\r\n              const botMessage = data.response || 'I am here to assist you!';\r\n              setConversation((prev) => [\r\n                  ...prev,\r\n                  { sender: 'bot', message: botMessage },\r\n              ]);\r\n              setIsTyping(false); // Set typing state to false after response\r\n          }\r\n\r\n          setUserInput('');\r\n      } catch (error) {\r\n          console.error('Error communicating with the chatbot:', error);\r\n          setConversation((prev) => [...prev, { sender: 'bot', message: 'Sorry, there was an error. Please try again.' }]);\r\n      }\r\n  };\r\n\r\n  const sendToBackend = async (endpoint, payload) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseURL}${endpoint}`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      const data = await response.json();\r\n      return data.response || data.result;\r\n    } catch (error) {\r\n      console.error(\"Error communicating with backend:\", error);\r\n      return \"Sorry, something went wrong. Please try again later.\";\r\n    }\r\n  };  \r\n\r\n  const handleUserMessage = async () => {\r\n    if (!input.trim()) return \"Error\";\r\n\r\n    const userMessage = input.trim();\r\n    setMessages([...messages, { sender: \"user\", text: userMessage }]);\r\n    setHistory([userMessage, ...history]);\r\n    setInput(\"\");\r\n    setWelcomeVisible(false);\r\n\r\n    // Determine endpoint and payload\r\n    let endpoint = \"/MiloChatbot\";\r\n    let payload = { user_input: userMessage };\r\n\r\n    if (userMessage.toLowerCase().includes(\"generate itinerary\")) {\r\n      endpoint = \"/generate-itinerary\";\r\n      payload = {\r\n        user_input: userMessage,\r\n        starting_city: \"Islamabad\", // Replace with dynamic user data\r\n        destination_city: \"Lahore\", // Replace with dynamic user data\r\n        days: 3,\r\n        mode_of_transport: \"bus\",\r\n        budget: 50000,\r\n      };\r\n\r\n    } else if (userMessage.toLowerCase().includes(\"tell me about\")) {\r\n      endpoint = \"/retrieve-details\";\r\n    } else if (userMessage.toLowerCase().includes(\"top\")) {\r\n      endpoint = \"/retrieve-top-items\";\r\n      payload.num_recommendations = 5; // Replace with extracted number from user input\r\n    } else if (userMessage.toLowerCase().includes(\"compare\")) {\r\n      endpoint = \"/compare-two-options\";\r\n    }\r\n\r\n    // Get response from backend\r\n    const botResponse = await sendToBackend(endpoint, payload);\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: \"milo\", text: botResponse },\r\n    ]);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleUserMessage();\r\n    } else if (e.key === \"ArrowUp\") {\r\n      if (history.length > 0 && historyIndex < history.length - 1) {\r\n        const newIndex = historyIndex + 1;\r\n        setInput(history[newIndex]);\r\n        setHistoryIndex(newIndex);\r\n      }\r\n    } else if (e.key === \"ArrowDown\") {\r\n      if (historyIndex > 0) {\r\n        const newIndex = historyIndex - 1;\r\n        setInput(history[newIndex]);\r\n        setHistoryIndex(newIndex);\r\n      } else {\r\n        setInput(\"\");\r\n        setHistoryIndex(-1);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const chatContainer = document.getElementById(\"chat-container\");\r\n    if (chatContainer) {\r\n      chatContainer.scrollTop = chatContainer.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      {welcomeVisible && (\r\n        <div className=\"welcome-message\">\r\n          <p>Welcome to a chat with Milo, your own personal smart AI trip planner.</p>\r\n          <p>Click on the input bar to start the chat.</p>\r\n        </div>\r\n      )}\r\n\r\n      <div id=\"chat-container\" className=\"chat-container\">\r\n        {!welcomeVisible && (\r\n          <div className=\"chat-bubble milo\">\r\n            <span>Milo: Hi, how may I help you plan your trip?</span>\r\n          </div>\r\n        )}\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`chat-bubble ${msg.sender}`}>\r\n            <span>{msg.sender === \"user\" ? `You: ${msg.text}` : `Milo: ${msg.text}`}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type your message here...\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n          onFocus={() => setWelcomeVisible(false)}\r\n        />\r\n        <button onClick={handleUserMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MiloChatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}