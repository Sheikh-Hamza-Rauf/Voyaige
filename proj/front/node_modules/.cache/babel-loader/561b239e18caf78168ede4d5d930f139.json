{"ast":null,"code":"var _jsxFileName = \"D:\\\\Voyaige\\\\proj\\\\front\\\\src\\\\components\\\\HomePage\\\\CrosswordGrid.js\";\nimport React, { useState, useEffect } from 'react';\nimport './CrosswordGrid.css';\nimport crosswordData from './crosswordData'; // Import the crossword data\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport Navbar from '../NavBar/Navbar';\nlet level = 0;\nconst generateInitialGrid = () => {\n  const initialGrid = Array(22).fill(0).map(() => Array(25).fill(' '));\n  crosswordData[level].forEach(({\n    answer,\n    startx,\n    starty,\n    orientation\n  }) => {\n    let x = startx - 1;\n    let y = starty - 1;\n    for (let i = 0; i < answer.length; i++) {\n      if (orientation === 'across') {\n        initialGrid[y][x + i] = '';\n      } else if (orientation === 'down') {\n        initialGrid[y + i][x] = '';\n      }\n    }\n  });\n  return initialGrid;\n};\nconst generateAnswerGrid = () => {\n  const answerGrid = Array(22).fill(0).map(() => Array(25).fill(' '));\n  crosswordData[level].forEach(({\n    answer,\n    startx,\n    starty,\n    orientation\n  }) => {\n    let x = startx - 1;\n    let y = starty - 1;\n    for (let i = 0; i < answer.length; i++) {\n      if (orientation === 'across') {\n        answerGrid[y][x + i] = answer[i];\n      } else if (orientation === 'down') {\n        answerGrid[y + i][x] = answer[i];\n      }\n    }\n  });\n  return answerGrid;\n};\nconst CrosswordGrid = () => {\n  const [grid, setGrid] = useState(generateInitialGrid());\n  const [hoveredHint, setHoveredHint] = useState('');\n  const [hintPosition, setHintPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const [showWinMessage, setShowWinMessage] = useState(false);\n  const [showLoseMessage, setShowLoseMessage] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    setGrid(generateInitialGrid());\n    window.scrollTo(0, 0); // Scroll to the top when the component is mounted\n  }, []);\n  const handleInputChange = (row, col, text) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = text.toUpperCase();\n    setGrid(newGrid);\n  };\n  const handleGenerate = () => {\n    level = (level + 1) % crosswordData.length;\n    setGrid(generateInitialGrid());\n  };\n  const handleVerify = async () => {\n    const answerGrid = generateAnswerGrid();\n    const isCorrect = JSON.stringify(grid) === JSON.stringify(answerGrid);\n    if (isCorrect) {\n      // Correct solution: Show win message and update points and challenge status\n      setShowWinMessage(true);\n\n      // Get user email from localStorage to identify user\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      if (user && user.email) {\n        try {\n          // Send request to update points and mark challenge as completed\n          await updatePointsAndStatus(user.email, 2000);\n        } catch (error) {\n          var _error$response;\n          console.error(\"Error updating points and challenge status:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n        }\n      }\n      setTimeout(() => {\n        navigate('/', {\n          state: {\n            redirectedFromChallengeId: 1\n          }\n        }); // Pass challengeId in state\n      }, 2000);\n    } else {\n      setShowLoseMessage(true); // Show lose message if incorrect\n    }\n  };\n  const updatePointsAndStatus = async (email, points) => {\n    try {\n      console.log('Sending POST request to update points and challenge status:', {\n        email,\n        points\n      });\n      const response = await axios.post(\"http://localhost:5000/api/users/updatePoints\", {\n        email,\n        points,\n        challengeId: 1 // Mark challenge ID 1 as completed\n      });\n      console.log(\"Points and challenge status updated successfully:\", response.data);\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Error updating points and challenge status:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    }\n  };\n  const handleReset = () => {\n    setGrid(generateInitialGrid());\n  };\n  const handleSolve = () => {\n    const answerGrid = generateAnswerGrid();\n    setGrid(answerGrid);\n  };\n  const closeMessage = () => {\n    setShowWinMessage(false);\n    setShowLoseMessage(false);\n  };\n  const renderGrid = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, grid.map((row, rowIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    key: rowIndex,\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, row.map((cell, colIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    key: colIndex,\n    className: \"cellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 25\n    }\n  }, crosswordData[level].map(entry => {\n    const {\n      startx,\n      starty,\n      position\n    } = entry;\n    if (rowIndex + 1 === starty && colIndex + 1 === startx) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        key: `digit-${position}`,\n        className: \"smallDigit\",\n        onMouseEnter: e => {\n          setHoveredHint(entry.hint);\n          const rect = e.target.getBoundingClientRect();\n          setHintPosition({\n            top: rect.top + window.scrollY + 20,\n            left: rect.left + window.scrollX + 5\n          });\n        },\n        onMouseLeave: () => setHoveredHint(''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 41\n        }\n      }, position);\n    }\n    return null;\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: `cell ${grid[rowIndex][colIndex] === ' ' ? 'staticCell' : ''}`,\n    value: cell,\n    onChange: e => handleInputChange(rowIndex, colIndex, e.target.value),\n    maxLength: 1,\n    disabled: grid[rowIndex][colIndex] === ' ',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 29\n    }\n  }))))));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, \"Crossword Challenge\"), renderGrid(), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttonContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: handleGenerate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, \"Generate\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: handleVerify,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, \"Verify\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: handleReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: handleSolve,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, \"Solve\")), hoveredHint && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hintPopup\",\n    style: {\n      top: hintPosition.top,\n      left: hintPosition.left\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, hoveredHint)), showWinMessage && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"win-message\",\n    onClick: closeMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, \"Congratulations! You have earned 2000 points!\"), showLoseMessage && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lose-message\",\n    onClick: closeMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, \"Incorrect. Please try again.\"));\n};\nexport default CrosswordGrid;","map":{"version":3,"names":["React","useState","useEffect","crosswordData","useNavigate","axios","Navbar","level","generateInitialGrid","initialGrid","Array","fill","map","forEach","answer","startx","starty","orientation","x","y","i","length","generateAnswerGrid","answerGrid","CrosswordGrid","grid","setGrid","hoveredHint","setHoveredHint","hintPosition","setHintPosition","top","left","showWinMessage","setShowWinMessage","showLoseMessage","setShowLoseMessage","navigate","window","scrollTo","handleInputChange","row","col","text","newGrid","toUpperCase","handleGenerate","handleVerify","isCorrect","JSON","stringify","user","parse","localStorage","getItem","email","updatePointsAndStatus","error","_error$response","console","response","data","message","setTimeout","state","redirectedFromChallengeId","points","log","post","challengeId","_error$response2","handleReset","handleSolve","closeMessage","renderGrid","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","key","cell","colIndex","entry","position","onMouseEnter","e","hint","rect","target","getBoundingClientRect","scrollY","scrollX","onMouseLeave","type","value","onChange","maxLength","disabled","onClick","style"],"sources":["D:/Voyaige/proj/front/src/components/HomePage/CrosswordGrid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './CrosswordGrid.css';\r\nimport crosswordData from './crosswordData'; // Import the crossword data\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Navbar from '../NavBar/Navbar';\r\n\r\nlet level = 0;\r\n\r\nconst generateInitialGrid = () => {\r\n    const initialGrid = Array(22).fill(0).map(() => Array(25).fill(' '));\r\n    crosswordData[level].forEach(({ answer, startx, starty, orientation }) => {\r\n        let x = startx - 1;\r\n        let y = starty - 1;\r\n\r\n        for (let i = 0; i < answer.length; i++) {\r\n            if (orientation === 'across') {\r\n                initialGrid[y][x + i] = '';\r\n            } else if (orientation === 'down') {\r\n                initialGrid[y + i][x] = '';\r\n            }\r\n        }\r\n    });\r\n    return initialGrid;\r\n};\r\n\r\nconst generateAnswerGrid = () => {\r\n    const answerGrid = Array(22).fill(0).map(() => Array(25).fill(' '));\r\n    crosswordData[level].forEach(({ answer, startx, starty, orientation }) => {\r\n        let x = startx - 1;\r\n        let y = starty - 1;\r\n\r\n        for (let i = 0; i < answer.length; i++) {\r\n            if (orientation === 'across') {\r\n                answerGrid[y][x + i] = answer[i];\r\n            } else if (orientation === 'down') {\r\n                answerGrid[y + i][x] = answer[i];\r\n            }\r\n        }\r\n    });\r\n    return answerGrid;\r\n};\r\n\r\nconst CrosswordGrid = () => {\r\n    const [grid, setGrid] = useState(generateInitialGrid());\r\n    const [hoveredHint, setHoveredHint] = useState('');\r\n    const [hintPosition, setHintPosition] = useState({ top: 0, left: 0 });\r\n    const [showWinMessage, setShowWinMessage] = useState(false);\r\n    const [showLoseMessage, setShowLoseMessage] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        setGrid(generateInitialGrid());\r\n        window.scrollTo(0, 0);  // Scroll to the top when the component is mounted\r\n    }, []);\r\n\r\n    const handleInputChange = (row, col, text) => {\r\n        const newGrid = [...grid];\r\n        newGrid[row][col] = text.toUpperCase();\r\n        setGrid(newGrid);\r\n    };\r\n\r\n    const handleGenerate = () => {\r\n        level = (level + 1) % crosswordData.length;\r\n        setGrid(generateInitialGrid());\r\n    };\r\n    \r\n\r\n    const handleVerify = async () => {\r\n        const answerGrid = generateAnswerGrid();\r\n        const isCorrect = JSON.stringify(grid) === JSON.stringify(answerGrid);\r\n        if (isCorrect) {\r\n            // Correct solution: Show win message and update points and challenge status\r\n            setShowWinMessage(true);\r\n    \r\n            // Get user email from localStorage to identify user\r\n            const user = JSON.parse(localStorage.getItem(\"user\"));\r\n            if (user && user.email) {\r\n                try {\r\n                    // Send request to update points and mark challenge as completed\r\n                    await updatePointsAndStatus(user.email, 2000);\r\n                } catch (error) {\r\n                    console.error(\"Error updating points and challenge status:\", error.response?.data || error.message);\r\n                }\r\n            }\r\n    \r\n            setTimeout(() => {\r\n                navigate('/', { state: { redirectedFromChallengeId: 1 } }); // Pass challengeId in state\r\n            }, 2000);\r\n        } else {\r\n            setShowLoseMessage(true); // Show lose message if incorrect\r\n        }\r\n    };\r\n    \r\n     \r\n    const updatePointsAndStatus = async (email, points) => {\r\n        try {\r\n            console.log('Sending POST request to update points and challenge status:', { email, points });\r\n            const response = await axios.post(\"http://localhost:5000/api/users/updatePoints\", {\r\n                email,\r\n                points,\r\n                challengeId: 1 // Mark challenge ID 1 as completed\r\n            });\r\n    \r\n            console.log(\"Points and challenge status updated successfully:\", response.data);\r\n        } catch (error) {\r\n            console.error(\"Error updating points and challenge status:\", error.response?.data || error.message);\r\n        }\r\n    };\r\n    \r\n    \r\n\r\n    const handleReset = () => {\r\n        setGrid(generateInitialGrid());\r\n    };\r\n\r\n    const handleSolve = () => {\r\n        const answerGrid = generateAnswerGrid();\r\n        setGrid(answerGrid);\r\n    };\r\n\r\n    const closeMessage = () => {\r\n        setShowWinMessage(false);\r\n        setShowLoseMessage(false);\r\n    };\r\n\r\n    const renderGrid = () => (\r\n        <div className=\"grid\">\r\n            {grid.map((row, rowIndex) => (\r\n                <div key={rowIndex} className=\"row\">\r\n                    {row.map((cell, colIndex) => (\r\n                        <div key={colIndex} className=\"cellContainer\">\r\n                            {crosswordData[level].map((entry) => {\r\n                                const { startx, starty, position } = entry;\r\n                                if (rowIndex + 1 === starty && colIndex + 1 === startx) {\r\n                                    return (\r\n                                        <span\r\n                                            key={`digit-${position}`}\r\n                                            className=\"smallDigit\"\r\n                                            onMouseEnter={(e) => {\r\n                                                setHoveredHint(entry.hint);\r\n                                                const rect = e.target.getBoundingClientRect();\r\n                                                setHintPosition({\r\n                                                    top: rect.top + window.scrollY + 20,\r\n                                                    left: rect.left + window.scrollX + 5,\r\n                                                });\r\n                                            }} \r\n                                            onMouseLeave={() => setHoveredHint('')}\r\n                                        >\r\n                                            {position}\r\n                                        </span>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                            <input\r\n                                type=\"text\"\r\n                                className={`cell ${grid[rowIndex][colIndex] === ' ' ? 'staticCell' : ''}`}\r\n                                value={cell}\r\n                                onChange={(e) => handleInputChange(rowIndex, colIndex, e.target.value)}\r\n                                maxLength={1}\r\n                                disabled={grid[rowIndex][colIndex] === ' '}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Navbar />\r\n            <h2>Crossword Challenge</h2>\r\n            {renderGrid()}\r\n             {/* Add Navbar at the top */}\r\n            <div className=\"buttonContainer\">\r\n                <button className=\"button\" onClick={handleGenerate}>Generate</button>\r\n                <button className=\"button\" onClick={handleVerify}>Verify</button>\r\n                <button className=\"button\" onClick={handleReset}>Reset</button>\r\n                <button className=\"button\" onClick={handleSolve}>Solve</button>\r\n            </div>\r\n\r\n            {hoveredHint && (\r\n                <div className=\"hintPopup\" style={{ top: hintPosition.top, left: hintPosition.left }}>\r\n                    <p>{hoveredHint}</p>\r\n                </div>\r\n            )}\r\n\r\n            {showWinMessage && (\r\n                <div className=\"win-message\" onClick={closeMessage}>\r\n                    Congratulations! You have earned 2000 points!\r\n                </div>\r\n            )}\r\n\r\n            {showLoseMessage && (\r\n                <div className=\"lose-message\" onClick={closeMessage}>\r\n                    Incorrect. Please try again.\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CrosswordGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}