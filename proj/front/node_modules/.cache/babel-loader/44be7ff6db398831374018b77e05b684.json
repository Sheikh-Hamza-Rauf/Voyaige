{"ast":null,"code":"var _jsxFileName = \"F:\\\\voyaige\\\\proj\\\\front\\\\src\\\\components\\\\HomePage\\\\quiz.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Question from \"./Question\";\nimport qBank from \"./QuestionBank\";\nimport Score from \"./Score\";\nimport \"./quiz.css\";\nimport Navbar from \"../NavBar/Navbar\"; // Import Navbar\n\nconst Quiz = () => {\n  const [questionBank] = useState(qBank);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const [quizEnd, setQuizEnd] = useState(false);\n  const [timer, setTimer] = useState(60);\n  const [messageVisible, setMessageVisible] = useState(false);\n  const [pointsSent, setPointsSent] = useState(false); // Track if points are sent\n\n  const navigate = useNavigate();\n\n  // Scroll to the top when the component loads\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer > 0) return prevTimer - 1;\n        clearInterval(intervalId);\n        setQuizEnd(true); // End the quiz when the timer runs out\n        return 0;\n      });\n    }, 1000);\n    return () => clearInterval(intervalId); // Cleanup interval on unmount\n  }, []);\n  useEffect(() => {\n    if (quizEnd && !pointsSent) {\n      setMessageVisible(true);\n\n      // Send points to the database\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      if (user && user.email) {\n        updatePoints(user.email, score); // Call the function to update points\n      }\n      setPointsSent(true); // Ensure points are sent only once\n\n      setTimeout(() => {\n        navigate('/', {\n          state: {\n            redirectedFromChallengeId: 2\n          }\n        }); // Pass challengeId in state\n      }, 2000); // Redirect to homepage after 2 seconds\n    }\n  }, [quizEnd, pointsSent, navigate, score]);\n  const updatePoints = async (email, points) => {\n    try {\n      console.log('Sending POST request to update points:', {\n        email,\n        points\n      });\n      const response = await axios.post(\"http://localhost:5000/api/users/updatePoints\", {\n        email,\n        points,\n        challengeId: 2\n      });\n      console.log(\"Points updated successfully:\", response.data);\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error updating points:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    }\n  };\n  const handleOptionChange = option => {\n    setSelectedOption(option);\n  };\n  const checkAnswer = selectedOption => {\n    if (selectedOption === questionBank[currentQuestion].answer) {\n      setScore(prevScore => prevScore + 500); // Add points for correct answer\n    }\n  };\n  const handleNextQuestion = () => {\n    if (currentQuestion + 1 < questionBank.length) {\n      setCurrentQuestion(prevQuestion => prevQuestion + 1);\n      setSelectedOption(\"\"); // Clear the selected option\n    } else {\n      setQuizEnd(true); // End the quiz when there are no more questions\n    }\n  };\n  const winMessage = score > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"win-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, \"\\uD83C\\uDF89 You have won \", score, \" points! \\uD83C\\uDF89\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lose-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, \"Better luck next time! Your score is \", score, \" points.\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }), !quizEnd ? /*#__PURE__*/React.createElement(Question, {\n    question: questionBank[currentQuestion],\n    selectedOption: selectedOption,\n    onOptionChange: handleOptionChange,\n    checkAnswer: checkAnswer,\n    onSubmit: handleNextQuestion,\n    timer: timer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Score, {\n    score: score,\n    onNextQuestion: handleNextQuestion,\n    className: \"score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }), messageVisible && winMessage, \" \"));\n};\nexport default Quiz;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","Question","qBank","Score","Navbar","Quiz","questionBank","currentQuestion","setCurrentQuestion","selectedOption","setSelectedOption","score","setScore","quizEnd","setQuizEnd","timer","setTimer","messageVisible","setMessageVisible","pointsSent","setPointsSent","navigate","window","scrollTo","intervalId","setInterval","prevTimer","clearInterval","user","JSON","parse","localStorage","getItem","email","updatePoints","setTimeout","state","redirectedFromChallengeId","points","console","log","response","post","challengeId","data","error","_error$response","message","handleOptionChange","option","checkAnswer","answer","prevScore","handleNextQuestion","length","prevQuestion","winMessage","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","question","onOptionChange","onSubmit","onNextQuestion"],"sources":["F:/voyaige/proj/front/src/components/HomePage/quiz.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Question from \"./Question\";\r\nimport qBank from \"./QuestionBank\";\r\nimport Score from \"./Score\";\r\nimport \"./quiz.css\";\r\nimport Navbar from \"../NavBar/Navbar\"; // Import Navbar\r\n\r\nconst Quiz = () => {\r\n  const [questionBank] = useState(qBank);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [selectedOption, setSelectedOption] = useState(\"\");\r\n  const [score, setScore] = useState(0);\r\n  const [quizEnd, setQuizEnd] = useState(false);\r\n  const [timer, setTimer] = useState(60);\r\n  const [messageVisible, setMessageVisible] = useState(false);\r\n  const [pointsSent, setPointsSent] = useState(false); // Track if points are sent\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // Scroll to the top when the component loads\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setTimer((prevTimer) => {\r\n        if (prevTimer > 0) return prevTimer - 1;\r\n\r\n        clearInterval(intervalId);\r\n        setQuizEnd(true); // End the quiz when the timer runs out\r\n        return 0;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(intervalId); // Cleanup interval on unmount\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (quizEnd && !pointsSent) {\r\n      setMessageVisible(true);\r\n\r\n      // Send points to the database\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      if (user && user.email) {\r\n        updatePoints(user.email, score); // Call the function to update points\r\n      }\r\n\r\n      setPointsSent(true); // Ensure points are sent only once\r\n\r\n      setTimeout(() => {\r\n        navigate('/', { state: { redirectedFromChallengeId: 2 } }); // Pass challengeId in state\r\n    }, 2000); // Redirect to homepage after 2 seconds\r\n    }\r\n  }, [quizEnd, pointsSent, navigate, score]);\r\n\r\n  const updatePoints = async (email, points) => {\r\n    try {\r\n        console.log('Sending POST request to update points:', { email, points });\r\n        const response = await axios.post(\"http://localhost:5000/api/users/updatePoints\", {\r\n            email,\r\n            points,\r\n            challengeId:2\r\n        });\r\n    \r\n        console.log(\"Points updated successfully:\", response.data);\r\n    } catch (error) {\r\n        console.error(\"Error updating points:\", error.response?.data || error.message);\r\n    }\r\n};\r\n  \r\n\r\n  const handleOptionChange = (option) => {\r\n    setSelectedOption(option);\r\n  };\r\n\r\n  const checkAnswer = (selectedOption) => {\r\n    if (selectedOption === questionBank[currentQuestion].answer) {\r\n      setScore((prevScore) => prevScore + 500); // Add points for correct answer\r\n    }\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    if (currentQuestion + 1 < questionBank.length) {\r\n      setCurrentQuestion((prevQuestion) => prevQuestion + 1);\r\n      setSelectedOption(\"\"); // Clear the selected option\r\n    } else {\r\n      setQuizEnd(true); // End the quiz when there are no more questions\r\n    }\r\n  };\r\n\r\n  const winMessage = score > 0 ? (\r\n    <div className=\"win-message\">\r\n      ðŸŽ‰ You have won {score} points! ðŸŽ‰\r\n    </div>\r\n  ) : (\r\n    <div className=\"lose-message\">\r\n      Better luck next time! Your score is {score} points.\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      {!quizEnd ? (\r\n        <Question\r\n          question={questionBank[currentQuestion]}\r\n          selectedOption={selectedOption}\r\n          onOptionChange={handleOptionChange}\r\n          checkAnswer={checkAnswer}\r\n          onSubmit={handleNextQuestion}\r\n          timer={timer}\r\n        />\r\n      ) : (\r\n        <div className=\"score-container\">\r\n          <Score score={score} onNextQuestion={handleNextQuestion} className=\"score\" />\r\n          {messageVisible && winMessage} {/* Display the win/lose message */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}