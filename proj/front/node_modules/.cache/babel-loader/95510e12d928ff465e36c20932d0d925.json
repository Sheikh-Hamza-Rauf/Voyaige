{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\Voyaige\\\\proj\\\\front\\\\src\\\\components\\\\ChatbotPage\\\\MiloChatbot.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nconst MiloChatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  // Function to handle user input submission\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n\n    // Add user message to the conversation\n    const userMessage = {\n      sender: 'user',\n      text: input\n    };\n    setMessages([...messages, userMessage]);\n    try {\n      // Send user message to backend for processing\n      const response = await axios.post('/api/chatbot', {\n        message: input\n      });\n      const botMessage = {\n        sender: 'bot',\n        text: response.data.reply\n      };\n\n      // Update the conversation with bot response\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error(\"Error communicating with chatbot backend:\", error);\n      const errorMessage = {\n        sender: 'bot',\n        text: \"Sorry, I couldn't process your request.\"\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n    setInput(''); // Clear input field\n  };\n  fetch(\"http://localhost:5000/generate-itinerary\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      user_input: \"Plan a trip from Islamabad to Murree\",\n      mode_of_transport: \"car\",\n      days: 2,\n      car_name: \"Corolla\"\n    })\n  }).then(response => response.json()).then(data => {\n    if (data.error) {\n      console.error(\"Error:\", data.error);\n    } else {\n      console.log(\"Itinerary:\", data.itinerary);\n      console.log(\"Car Details:\", data.car_details);\n    }\n  }).catch(error => console.error(\"Request failed:\", error));\n\n  // Render the conversation and input field\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbot-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: `message ${message.sender === 'bot' ? 'bot' : 'user'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, message.text))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: input,\n    onChange: e => setInput(e.target.value),\n    placeholder: \"Ask Milo something...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, \"Send\")));\n};\nexport default MiloChatbot;","map":{"version":3,"names":["React","useState","axios","MiloChatbot","messages","setMessages","input","setInput","handleSendMessage","trim","userMessage","sender","text","response","post","message","botMessage","data","reply","prev","error","console","errorMessage","fetch","method","headers","body","JSON","stringify","user_input","mode_of_transport","days","car_name","then","json","log","itinerary","car_details","catch","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","index","key","type","value","onChange","e","target","placeholder","onClick"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/Voyaige/proj/front/src/components/ChatbotPage/MiloChatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst MiloChatbot = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n\r\n    // Function to handle user input submission\r\n    const handleSendMessage = async () => {\r\n        if (!input.trim()) return;\r\n\r\n        // Add user message to the conversation\r\n        const userMessage = { sender: 'user', text: input };\r\n        setMessages([...messages, userMessage]);\r\n\r\n        try {\r\n            // Send user message to backend for processing\r\n            const response = await axios.post('/api/chatbot', { message: input });\r\n            const botMessage = { sender: 'bot', text: response.data.reply };\r\n\r\n            // Update the conversation with bot response\r\n            setMessages(prev => [...prev, botMessage]);\r\n        } catch (error) {\r\n            console.error(\"Error communicating with chatbot backend:\", error);\r\n            const errorMessage = { sender: 'bot', text: \"Sorry, I couldn't process your request.\" };\r\n            setMessages(prev => [...prev, errorMessage]);\r\n        }\r\n\r\n        setInput(''); // Clear input field\r\n    };\r\n\r\n    fetch(\"http://localhost:5000/generate-itinerary\", {\r\n      method: \"POST\",\r\n      headers: {\r\n          \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n          user_input: \"Plan a trip from Islamabad to Murree\",\r\n          mode_of_transport: \"car\",\r\n          days: 2,\r\n          car_name: \"Corolla\"\r\n      })\r\n  })\r\n  .then(response => response.json())\r\n  .then(data => {\r\n      if (data.error) {\r\n          console.error(\"Error:\", data.error);\r\n      } else {\r\n          console.log(\"Itinerary:\", data.itinerary);\r\n          console.log(\"Car Details:\", data.car_details);\r\n      }\r\n  })\r\n  .catch(error => console.error(\"Request failed:\", error));  \r\n\r\n    // Render the conversation and input field\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <div className=\"chatbox\">\r\n                {messages.map((message, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className={`message ${message.sender === 'bot' ? 'bot' : 'user'}`}\r\n                    >\r\n                        {message.text}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"input-area\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Ask Milo something...\"\r\n                />\r\n                <button onClick={handleSendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MiloChatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}