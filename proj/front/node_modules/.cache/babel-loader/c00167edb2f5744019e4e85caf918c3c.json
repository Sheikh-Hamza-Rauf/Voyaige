{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useLocation, useNavigate } from 'react-router-dom';\n// import Navbar from '../../NavBar/Navbar';\n// import './UserCustomization.css';\n\n// const UserCustomization = () => {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { customizationData, bookingData } = location.state || {};\n\n//   const {\n//     startingPoint = '',\n//     destination = '',\n//     startDate = '',\n//     endDate = '',\n//     guests = 1\n//   } = customizationData || {};\n\n//   const [selectedStartingPoint] = useState(startingPoint);\n//   const [selectedDestination] = useState(destination);\n//   const [selectedStartDate] = useState(startDate);\n//   const [selectedEndDate] = useState(endDate);\n//   const [selectedGuests] = useState(guests);\n//   const [numberOfDays, setNumberOfDays] = useState(0);\n\n//   // Single trip-level hotel and transport\n//   const [tripDetails, setTripDetails] = useState({\n//     hotel: null,\n//     transport: null\n//   });\n\n//   // State to store food and attractions details for each day\n//   const [dayDetails, setDayDetails] = useState({});\n\n//   // Define food and attraction options for different cities\n//   const cityOptions = {\n//     \"Islamabad\": {\n//       lunch: [\"Monal Restaurant\", \"Tandoori Restaurant\", \"Chaaye Khana\"],\n//       dinner: [\"Savour Foods\", \"Kabul Restaurant\", \"Dynasty Restaurant\"],\n//       attractions: [\"Faisal Mosque\", \"Daman-e-Koh\", \"Pakistan Monument\"]\n//     },\n//     \"Lahore\": {\n//       lunch: [\"Haveli Restaurant\", \"Andaaz Restaurant\", \"Spice Bazaar\"],\n//       dinner: [\"Cooco's Den\", \"Village Restaurant\", \"Fujiyama Restaurant\"],\n//       attractions: [\"Badshahi Mosque\", \"Lahore Fort\", \"Shalimar Gardens\"]\n//     },\n//     // Other cities (kept for reference but condensed in this example)\n//     \"Karachi\": {\n//       lunch: [\"BBQ Tonight\", \"Kolachi Restaurant\", \"Kababjees\"],\n//       dinner: [\"Port Grand\", \"Okra Restaurant\", \"Cafe Flo\"],\n//       attractions: [\"Clifton Beach\", \"Mazar-e-Quaid\", \"Mohatta Palace\"]\n//     },\n//     // Default options for any city not in the list\n//     \"Default\": {\n//       lunch: [\"Local Restaurant 1\", \"Local Restaurant 2\", \"Local Restaurant 3\"],\n//       dinner: [\"Evening Dining 1\", \"Evening Dining 2\", \"Evening Dining 3\"],\n//       attractions: [\"Local Attraction 1\", \"Local Attraction 2\", \"Local Attraction 3\"]\n//     }\n//   };\n\n//   // Calculate number of days for the trip\n//   useEffect(() => {\n//     if (selectedStartDate && selectedEndDate) {\n//       const start = new Date(selectedStartDate);\n//       const end = new Date(selectedEndDate);\n//       const timeDiff = end - start;\n//       const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24)) + 1;\n//       setNumberOfDays(daysDiff > 0 ? daysDiff : 0);\n//     }\n//   }, [selectedStartDate, selectedEndDate]);\n\n//   // Load trip and day details from localStorage on component mount\n//   useEffect(() => {\n//     const savedTripDetails = localStorage.getItem('tripDetails');\n//     if (savedTripDetails) {\n//       try {\n//         setTripDetails(JSON.parse(savedTripDetails));\n//       } catch (error) {\n//         console.error(\"Error parsing trip details from localStorage:\", error);\n//         localStorage.removeItem('tripDetails');\n//       }\n//     }\n\n//     const savedDayDetails = localStorage.getItem('dayDetails');\n//     if (savedDayDetails) {\n//       try {\n//         setDayDetails(JSON.parse(savedDayDetails));\n//       } catch (error) {\n//         console.error(\"Error parsing day details from localStorage:\", error);\n//         localStorage.removeItem('dayDetails');\n//       }\n//     }\n//   }, []);\n\n//   // Update localStorage whenever tripDetails state changes\n//   useEffect(() => {\n//     if (tripDetails.hotel || tripDetails.transport) {\n//       localStorage.setItem('tripDetails', JSON.stringify(tripDetails));\n//     }\n//   }, [tripDetails]);\n\n//   // Update localStorage whenever dayDetails state changes\n//   useEffect(() => {\n//     if (Object.keys(dayDetails).length > 0) {\n//       localStorage.setItem('dayDetails', JSON.stringify(dayDetails));\n//     }\n//   }, [dayDetails]);\n\n//   // Receive booking data and update state\n//   useEffect(() => {\n//     if (bookingData) {\n//       console.log(\"Received Booking Data:\", bookingData);\n//       const { selectedHotel, selectedTransport } = bookingData;\n\n//       setTripDetails(prevDetails => {\n//         const updatedDetails = {\n//           ...prevDetails,\n//           hotel: selectedHotel || prevDetails.hotel,\n//           transport: selectedTransport || prevDetails.transport\n//         };\n\n//         // Save to localStorage immediately to prevent data loss\n//         localStorage.setItem('tripDetails', JSON.stringify(updatedDetails));\n//         return updatedDetails;\n//       });\n//     }\n//   }, [bookingData]);\n\n//   // Navigate to BookOption page\n//   const handleEditTripDetails = () => {\n//     navigate('/bookoption', { \n//       state: { \n//         customizationData,\n//         currentDetails: tripDetails\n//       } \n//     });\n//   };\n\n//   // Handle change for lunch, dinner, and attractions\n//   const handleDetailChange = (day, type, value) => {\n//     setDayDetails(prevDetails => {\n//       const updatedDetails = {\n//         ...prevDetails,\n//         [day]: {\n//           ...prevDetails[day],\n//           [type]: value\n//         }\n//       };\n\n//       localStorage.setItem('dayDetails', JSON.stringify(updatedDetails));\n//       return updatedDetails;\n//     });\n//   };\n\n//   // Helper function to safely access nested properties\n//   const getPropertyValue = (obj, property, fallback = 'N/A') => {\n//     if (!obj) return fallback;\n\n//     const properties = property.split('.');\n//     let value = obj;\n\n//     for (const prop of properties) {\n//       if (value && typeof value === 'object' && prop in value) {\n//         value = value[prop];\n//       } else {\n//         return fallback;\n//       }\n//     }\n\n//     return value || fallback;\n//   };\n\n//   // Format date to be more readable\n//   const formatDate = (dateString) => {\n//     if (!dateString) return '';\n//     const date = new Date(dateString);\n//     return date.toLocaleDateString('en-US', { \n//       weekday: 'short', \n//       month: 'short', \n//       day: 'numeric', \n//       year: 'numeric' \n//     });\n//   };\n\n//   // Get options for the current destination\n//   const getOptionsForDestination = () => {\n//     return cityOptions[selectedDestination] || cityOptions[\"Default\"];\n//   };\n\n//   // Calculate total cost including food and attractions\n//   const calculateTotalCost = () => {\n//     let totalCost = 0;\n//     let hotelCost = 0;\n//     let transportCost = 0;\n//     let foodCost = 0;\n//     let attractionsCost = 0;\n\n//     // Fixed costs for hotel and transport (per trip)\n//     if (tripDetails.hotel && tripDetails.hotel.price) {\n//       const price = parseFloat(tripDetails.hotel.price);\n//       if (!isNaN(price)) {\n//         hotelCost = price;\n//         totalCost += price;\n//       }\n//     }\n\n//     if (tripDetails.transport && tripDetails.transport.price) {\n//       const price = parseFloat(tripDetails.transport.price);\n//       if (!isNaN(price)) {\n//         transportCost = price;\n//         totalCost += price;\n//       }\n//     }\n\n//     // Assumed costs for food and attractions\n//     const LUNCH_COST = 1000; // PKR\n//     const DINNER_COST = 1500; // PKR\n//     const ATTRACTION_COST = 500; // PKR per person\n\n//     // Calculate daily food and attraction costs\n//     Object.values(dayDetails).forEach(day => {\n//       // Add lunch cost if selected\n//       if (day.lunch) {\n//         const lunchFee = LUNCH_COST;\n//         foodCost += lunchFee;\n//         totalCost += lunchFee;\n//       }\n\n//       // Add dinner cost if selected\n//       if (day.dinner) {\n//         const dinnerFee = DINNER_COST;\n//         foodCost += dinnerFee;\n//         totalCost += dinnerFee;\n//       }\n\n//       // Add attractions cost if selected (per person)\n//       if (day.attraction) {\n//         const attractionFee = ATTRACTION_COST * selectedGuests;\n//         attractionsCost += attractionFee;\n//         totalCost += attractionFee;\n//       }\n//     });\n\n//     return { totalCost, hotelCost, transportCost, foodCost, attractionsCost };\n//   };\n\n//   // Create an array of days\n//   const getDaysArray = () => {\n//     const days = [];\n//     for (let i = 0; i < numberOfDays; i++) {\n//       const dayNumber = i + 1;\n//       const dayDate = new Date(selectedStartDate);\n//       dayDate.setDate(dayDate.getDate() + i);\n//       days.push({ dayNumber, dayDate });\n//     }\n//     return days;\n//   };\n\n//   // Build itinerary day details for checkout\n//   const buildItineraryDays = () => {\n//     return getDaysArray().map(({ dayNumber }) => {\n//       const details = dayDetails[dayNumber] || {};\n//       const dayTitle = `Day ${dayNumber}: ${getPropertyValue(tripDetails.transport, 'type', 'Trip')} + Hotel`;\n\n//       // Calculate day cost\n//       let dayCost = 0;\n\n//       // Add hotel cost (divided by number of days)\n//       if (tripDetails.hotel && tripDetails.hotel.price) {\n//         const hotelPrice = parseFloat(tripDetails.hotel.price);\n//         if (!isNaN(hotelPrice)) {\n//           dayCost += hotelPrice / numberOfDays;\n//         }\n//       }\n\n//       // Add transport cost (divided by number of days)\n//       if (tripDetails.transport && tripDetails.transport.price) {\n//         const transportPrice = parseFloat(tripDetails.transport.price);\n//         if (!isNaN(transportPrice)) {\n//           dayCost += transportPrice / numberOfDays;\n//         }\n//       }\n\n//       // Add food and attraction costs\n//       if (details.lunch) dayCost += 1000; // LUNCH_COST\n//       if (details.dinner) dayCost += 1500; // DINNER_COST\n//       if (details.attraction) dayCost += 500 * selectedGuests; // ATTRACTION_COST * guests\n\n//       return {\n//         dayNumber,\n//         title: dayTitle,\n//         transportMode: getPropertyValue(tripDetails.transport, 'type', 'Transport'),\n//         hotel: getPropertyValue(tripDetails.hotel, 'name', 'Hotel'),\n//         lunch: details.lunch || null,\n//         dinner: details.dinner || null,\n//         attraction: details.attraction || null,\n//         totalCost: Math.round(dayCost) // Round to nearest integer\n//       };\n//     });\n//   };\n\n//   // Handle proceed to checkout\n//   const handleProceedToCheckout = () => {\n//     const { totalCost } = calculateTotalCost();\n\n//     // Create trip data object for checkout\n//     const tripData = {\n//       summary: {\n//         from: selectedStartingPoint,\n//         to: selectedDestination,\n//         startDate: selectedStartDate,\n//         endDate: selectedEndDate,\n//         guests: selectedGuests,\n//         duration: numberOfDays\n//       },\n//       days: buildItineraryDays(),\n//       discountPercentage: 0, // Default no discount, can be calculated based on user points\n//       totalCost\n//     };\n\n//     // Save trip data to localStorage for checkout page\n//     localStorage.setItem('tripCheckoutData', JSON.stringify(tripData));\n\n//     // Navigate to checkout page\n//     navigate('/checkout');\n//   };\n\n//   return (\n//     <div className=\"customization-container\">\n//       <Navbar />\n//       <div className=\"content-wrapper\">\n//         <h2 className=\"customization-title\">Your Trip Details</h2>\n\n//         <div className=\"trip-summary\">\n//           <h3>Trip Summary</h3>\n//           <div className=\"summary-details\">\n//             <div className=\"summary-col\">\n//               <p><span>From:</span> {selectedStartingPoint}</p>\n//               <p><span>To:</span> {selectedDestination}</p>\n//                 <p>\n//                 <span>Budget : </span> \n//                 {selectedGuests === 1 ? \" Economic\" : selectedGuests === 2 ? \" Normal\" : selectedGuests === 3 ? \" Luxury\" : \" N/A\"}\n//                 </p>\n\n//             </div>\n//             <div className=\"summary-col\">\n//               <p><span>Start:</span> {formatDate(selectedStartDate)}</p>\n//               <p><span>End:</span> {formatDate(selectedEndDate)}</p>\n//               <p><span>Duration:</span> {numberOfDays} {numberOfDays === 1 ? 'Day' : 'Days'}</p>\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Trip-level Accommodation & Transport */}\n//         <div className=\"trip-accommodations\">\n//           <div className=\"section-header\">\n//             <h3>Accommodation & Transport</h3>\n//             <button className=\"edit-button\" onClick={handleEditTripDetails}>\n//               <i className=\"fas fa-edit\"></i> Edit\n//             </button>\n//           </div>\n\n//           <div className=\"trip-details-container\">\n//             <div className=\"trip-detail-card\">\n//               <div className=\"detail-icon\">\n//                 <i className=\"fas fa-hotel\"></i>\n//               </div>\n//               <div className=\"detail-content\">\n//                 <h4>Hotel</h4>\n//                 {tripDetails.hotel ? (\n//                   <div className=\"detail-info\">\n//                     <p className=\"detail-name\">{getPropertyValue(tripDetails.hotel, 'name')}</p>\n//                     <p className=\"detail-price\">{getPropertyValue(tripDetails.hotel, 'price')} PKR</p>\n//                     <p className=\"detail-rating\">Rating: {getPropertyValue(tripDetails.hotel, 'rating')}/5</p>\n//                     {tripDetails.hotel.address && (\n//                       <p className=\"detail-address\">{tripDetails.hotel.address}</p>\n//                     )}\n//                   </div>\n//                 ) : (\n//                   <div className=\"no-detail-info\">\n//                     <p>No hotel selected</p>\n//                     <button className=\"small-add-button\" onClick={handleEditTripDetails}>\n//                       Add Hotel\n//                     </button>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n\n//             <div className=\"trip-detail-card\">\n//               <div className=\"detail-icon\">\n//                 <i className=\"fas fa-bus\"></i>\n//               </div>\n//               <div className=\"detail-content\">\n//                 <h4>Transport</h4>\n//                 {tripDetails.transport ? (\n//                   <div className=\"detail-info\">\n//                     <p className=\"detail-type\">{getPropertyValue(tripDetails.transport, 'type', 'Vehicle')}</p>\n//                     <p className=\"detail-name\">{\n//                       getPropertyValue(tripDetails.transport, 'name') || \n//                       getPropertyValue(tripDetails.transport, 'car_name') || \n//                       getPropertyValue(tripDetails.transport, 'bus_name') || \n//                       getPropertyValue(tripDetails.transport, 'train_name')\n//                     }</p>\n//                     <p className=\"detail-price\">{getPropertyValue(tripDetails.transport, 'price')} PKR</p>\n//                     <p className=\"detail-time\">\n//                       {getPropertyValue(tripDetails.transport, 'departure_time')}\n//                       {tripDetails.transport.arrival_time && ` - ${tripDetails.transport.arrival_time}`}\n//                     </p>\n//                   </div>\n//                 ) : (\n//                   <div className=\"no-detail-info\">\n//                     <p>No transport selected</p>\n//                     <button className=\"small-add-button\" onClick={handleEditTripDetails}>\n//                       Add Transport\n//                     </button>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Day-by-Day Itinerary */}\n//         {numberOfDays > 0 && (\n//           <div className=\"days-section\">\n//             <h3>Day-by-Day Itinerary</h3>\n//             <div className=\"days-grid\">\n//               {getDaysArray().map(({ dayNumber, dayDate }, index) => {\n//                 const details = dayDetails[dayNumber] || {};\n//                 const options = getOptionsForDestination();\n\n//                 return (\n//                   <div key={index} className=\"day-card\">\n//                     <div className=\"day-header\">\n//                       <div className=\"day-number\">DAY {dayNumber}</div>\n//                       <div className=\"day-date\">{formatDate(dayDate)}</div>\n//                     </div>\n\n//                     <div className=\"food-attractions-section\">\n//                       <div className=\"select-container\">\n//                         <label htmlFor={`lunch-day-${dayNumber}`}>Lunch:</label>\n//                         <select\n//                           id={`lunch-day-${dayNumber}`}\n//                           value={details.lunch || ''}\n//                           onChange={(e) => handleDetailChange(dayNumber, 'lunch', e.target.value)}\n//                           className=\"custom-select\"\n//                         >\n//                           <option value=\"\">Select Lunch Place</option>\n//                           {options.lunch.map((place, i) => (\n//                             <option key={i} value={place}>{place}</option>\n//                           ))}\n//                         </select>\n//                       </div>\n\n//                       <div className=\"select-container\">\n//                         <label htmlFor={`dinner-day-${dayNumber}`}>Dinner:</label>\n//                         <select\n//                           id={`dinner-day-${dayNumber}`}\n//                           value={details.dinner || ''}\n//                           onChange={(e) => handleDetailChange(dayNumber, 'dinner', e.target.value)}\n//                           className=\"custom-select\"\n//                         >\n//                           <option value=\"\">Select Dinner Place</option>\n//                           {options.dinner.map((place, i) => (\n//                             <option key={i} value={place}>{place}</option>\n//                           ))}\n//                         </select>\n//                       </div>\n\n//                       <div className=\"select-container\">\n//                         <label htmlFor={`attraction-day-${dayNumber}`}>Attraction:</label>\n//                         <select\n//                           id={`attraction-day-${dayNumber}`}\n//                           value={details.attraction || ''}\n//                           onChange={(e) => handleDetailChange(dayNumber, 'attraction', e.target.value)}\n//                           className=\"custom-select\"\n//                         >\n//                           <option value=\"\">Select Attraction</option>\n//                           {options.attractions.map((place, i) => (\n//                             <option key={i} value={place}>{place}</option>\n//                           ))}\n//                         </select>\n//                       </div>\n\n//                       <div className=\"selected-options\">\n//                         {details.lunch && (\n//                           <div className=\"selected-item\">\n//                             <span className=\"icon lunch-icon\"><i className=\"fas fa-utensils\"></i></span>\n//                             <span className=\"item-name\">{details.lunch}</span>\n//                           </div>\n//                         )}\n\n//                         {details.dinner && (\n//                           <div className=\"selected-item\">\n//                             <span className=\"icon dinner-icon\"><i className=\"fas fa-moon\"></i></span>\n//                             <span className=\"item-name\">{details.dinner}</span>\n//                           </div>\n//                         )}\n\n//                         {details.attraction && (\n//                           <div className=\"selected-item\">\n//                             <span className=\"icon attraction-icon\"><i className=\"fas fa-map-marker-alt\"></i></span>\n//                             <span className=\"item-name\">{details.attraction}</span>\n//                           </div>\n//                         )}\n//                       </div>\n//                     </div>\n//                   </div>\n//                 );\n//               })}\n//             </div>\n//           </div>\n//         )}\n\n//         {/* Calculate and display total trip cost */}\n//         {(tripDetails.hotel || tripDetails.transport || Object.keys(dayDetails).length > 0) && (\n//           <div className=\"trip-cost-summary\">\n//             <h3>Total Trip Cost</h3>\n//             {(() => {\n//               const { totalCost, hotelCost, transportCost, foodCost, attractionsCost } = calculateTotalCost();\n\n//               return (\n//                 <div className=\"cost-breakdown\">\n//                   <div className=\"cost-grid\">\n//                     <div className=\"cost-item\">\n//                       <span className=\"cost-label\">Hotel:</span>\n//                       <span className=\"cost-value\">{hotelCost.toLocaleString()} PKR</span>\n//                     </div>\n//                     <div className=\"cost-item\">\n//                       <span className=\"cost-label\">Transport:</span>\n//                       <span className=\"cost-value\">{transportCost.toLocaleString()} PKR</span>\n//                     </div>\n//                     <div className=\"cost-item\">\n//                       <span className=\"cost-label\">Food:</span>\n//                       <span className=\"cost-value\">{foodCost.toLocaleString()} PKR</span>\n//                     </div>\n//                     <div className=\"cost-item\">\n//                       <span className=\"cost-label\">Attractions:</span>\n//                       <span className=\"cost-value\">{attractionsCost.toLocaleString()} PKR</span>\n//                     </div>\n//                   </div>\n//                   <div className=\"total-cost\">\n//                     <span>Total Cost:</span> {totalCost.toLocaleString()} PKR\n//                   </div>\n//                 </div>\n//               );\n//             })()}\n//           </div>\n//         )}\n\n//         <div className=\"action-buttons\">\n//           <button className=\"back-button\" onClick={() => navigate(-1)}>\n//             Back\n//           </button>\n//           <button \n//             className=\"save-button\"\n//             onClick={handleProceedToCheckout}\n//             disabled={!tripDetails.hotel || !tripDetails.transport || numberOfDays === 0}\n//           >\n//             Pay\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// \n\n// ***********************************************************************************************************************\n\n// import React, { useState, useEffect } from 'react';\n// import { useLocation, useNavigate } from 'react-router-dom';\n// import Navbar from '../../NavBar/Navbar';\n// import './UserCustomization.css';\n\n// const UserCustomization = () => {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { customizationData, bookingData } = location.state || {};\n\n//   // Extract trip basic information from customizationData with defaults\n//   const {\n//     startingPoint = '',\n//     destination = '',\n//     startDate = '',\n//     endDate = '',\n//     guests = 1\n//   } = customizationData || {};\n\n//   // Create a unique trip ID based on trip details to use as storage key\n//   // This ensures different trips have separate storage\n//   const getTripStorageKey = () => {\n//     if (!startingPoint || !destination || !startDate || !endDate) return null;\n//     return `trip_${startingPoint}_${destination}_${startDate}_${endDate}_${guests}`;\n//   };\n\n//   const tripStorageKey = getTripStorageKey();\n\n//   // Basic trip information states (non-editable)\n//   const [selectedStartingPoint] = useState(startingPoint);\n//   const [selectedDestination] = useState(destination);\n//   const [selectedStartDate] = useState(startDate);\n//   const [selectedEndDate] = useState(endDate);\n//   const [selectedGuests] = useState(guests);\n//   const [numberOfDays, setNumberOfDays] = useState(0);\n\n//   // Trip-level details for hotel and transport\n//   const [tripDetails, setTripDetails] = useState({\n//     hotel: null,\n//     transport: null\n//   });\n\n//   // State to store food and attractions details for each day\n//   const [dayDetails, setDayDetails] = useState({});\n\n//   // Define food and attraction options for different cities\n//   const cityOptions = {\n//     \"Islamabad\": {\n//       lunch: [\"Monal Restaurant\", \"Tandoori Restaurant\", \"Chaaye Khana\"],\n//       dinner: [\"Savour Foods\", \"Kabul Restaurant\", \"Dynasty Restaurant\"],\n//       attractions: [\"Faisal Mosque\", \"Daman-e-Koh\", \"Pakistan Monument\"]\n//     },\n//     \"Lahore\": {\n//       lunch: [\"Haveli Restaurant\", \"Andaaz Restaurant\", \"Spice Bazaar\"],\n//       dinner: [\"Cooco's Den\", \"Village Restaurant\", \"Fujiyama Restaurant\"],\n//       attractions: [\"Badshahi Mosque\", \"Lahore Fort\", \"Shalimar Gardens\"]\n//     },\n//     \"Karachi\": {\n//       lunch: [\"BBQ Tonight\", \"Kolachi Restaurant\", \"Kababjees\"],\n//       dinner: [\"Port Grand\", \"Okra Restaurant\", \"Cafe Flo\"],\n//       attractions: [\"Clifton Beach\", \"Mazar-e-Quaid\", \"Mohatta Palace\"]\n//     },\n//     // Default options for any city not in the list\n//     \"Default\": {\n//       lunch: [\"Local Restaurant 1\", \"Local Restaurant 2\", \"Local Restaurant 3\"],\n//       dinner: [\"Evening Dining 1\", \"Evening Dining 2\", \"Evening Dining 3\"],\n//       attractions: [\"Local Attraction 1\", \"Local Attraction 2\", \"Local Attraction 3\"]\n//     }\n//   };\n\n//   // Calculate number of days for the trip\n//   useEffect(() => {\n//     if (selectedStartDate && selectedEndDate) {\n//       const start = new Date(selectedStartDate);\n//       const end = new Date(selectedEndDate);\n//       const timeDiff = end - start;\n//       const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24)) + 1;\n//       setNumberOfDays(daysDiff > 0 ? daysDiff : 0);\n//     }\n//   }, [selectedStartDate, selectedEndDate]);\n\n//   // Load trip details from localStorage based on unique trip key\n//   useEffect(() => {\n//     // Only attempt to load if we have a valid storage key\n//     if (tripStorageKey) {\n//       // Load trip-specific details (hotel and transport)\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\n//       if (savedTripDetails) {\n//         try {\n//           setTripDetails(JSON.parse(savedTripDetails));\n//         } catch (error) {\n//           console.error(\"Error parsing trip details from localStorage:\", error);\n//           localStorage.removeItem(`tripDetails_${tripStorageKey}`);\n//         }\n//       }\n\n//       // Load day-specific details (food and attractions)\n//       const savedDayDetails = localStorage.getItem(`dayDetails_${tripStorageKey}`);\n//       if (savedDayDetails) {\n//         try {\n//           setDayDetails(JSON.parse(savedDayDetails));\n//         } catch (error) {\n//           console.error(\"Error parsing day details from localStorage:\", error);\n//           localStorage.removeItem(`dayDetails_${tripStorageKey}`);\n//         }\n//       }\n//     }\n//   }, [tripStorageKey]);\n\n//   // Update localStorage whenever tripDetails state changes\n//   useEffect(() => {\n//     if (tripStorageKey && (tripDetails.hotel || tripDetails.transport)) {\n//       localStorage.setItem(`tripDetails_${tripStorageKey}`, JSON.stringify(tripDetails));\n//     }\n//   }, [tripDetails, tripStorageKey]);\n\n//   // Update localStorage whenever dayDetails state changes\n//   useEffect(() => {\n//     if (tripStorageKey && Object.keys(dayDetails).length > 0) {\n//       localStorage.setItem(`dayDetails_${tripStorageKey}`, JSON.stringify(dayDetails));\n//     }\n//   }, [dayDetails, tripStorageKey]);\n\n//   // Process booking data when coming back from BookOption page\n//   useEffect(() => {\n//     if (bookingData && tripStorageKey) {\n//       console.log(\"Received Booking Data:\", bookingData);\n//       const { selectedHotel, selectedTransport } = bookingData;\n\n//       setTripDetails(prevDetails => {\n//         const updatedDetails = {\n//           ...prevDetails,\n//           hotel: selectedHotel || prevDetails.hotel,\n//           transport: selectedTransport || prevDetails.transport\n//         };\n\n//         // Save to trip-specific localStorage immediately\n//         localStorage.setItem(`tripDetails_${tripStorageKey}`, JSON.stringify(updatedDetails));\n//         return updatedDetails;\n//       });\n//     }\n//   }, [bookingData, tripStorageKey]);\n\n//   // Navigate to BookOption page for editing hotel/transport\n//   const handleEditTripDetails = () => {\n//     navigate('/bookoption', { \n//       state: { \n//         customizationData,\n//         currentDetails: tripDetails\n//       } \n//     });\n//   };\n\n//   // Handle change for lunch, dinner, and attractions\n//   const handleDetailChange = (day, type, value) => {\n//     if (!tripStorageKey) return;\n\n//     setDayDetails(prevDetails => {\n//       const updatedDetails = {\n//         ...prevDetails,\n//         [day]: {\n//           ...prevDetails[day],\n//           [type]: value\n//         }\n//       };\n\n//       // Save to trip-specific localStorage\n//       localStorage.setItem(`dayDetails_${tripStorageKey}`, JSON.stringify(updatedDetails));\n//       return updatedDetails;\n//     });\n//   };\n\n//   // Helper function to safely access nested properties\n//   const getPropertyValue = (obj, property, fallback = 'N/A') => {\n//     if (!obj) return fallback;\n\n//     const properties = property.split('.');\n//     let value = obj;\n\n//     for (const prop of properties) {\n//       if (value && typeof value === 'object' && prop in value) {\n//         value = value[prop];\n//       } else {\n//         return fallback;\n//       }\n//     }\n\n//     return value || fallback;\n//   };\n\n//   // Format date to be more readable\n//   const formatDate = (dateString) => {\n//     if (!dateString) return '';\n//     const date = new Date(dateString);\n//     return date.toLocaleDateString('en-US', { \n//       weekday: 'short', \n//       month: 'short', \n//       day: 'numeric', \n//       year: 'numeric' \n//     });\n//   };\n\n//   // Get options for the current destination\n//   const getOptionsForDestination = () => {\n//     return cityOptions[selectedDestination] || cityOptions[\"Default\"];\n//   };\n\n//   // Calculate total cost including food and attractions\n//   const calculateTotalCost = () => {\n//     let totalCost = 0;\n//     let hotelCost = 0;\n//     let transportCost = 0;\n//     let foodCost = 0;\n//     let attractionsCost = 0;\n\n//     // Fixed costs for hotel and transport (per trip)\n//     if (tripDetails.hotel && tripDetails.hotel.price) {\n//       const price = parseFloat(tripDetails.hotel.price);\n//       if (!isNaN(price)) {\n//         hotelCost = price;\n//         totalCost += price;\n//       }\n//     }\n\n//     if (tripDetails.transport && tripDetails.transport.price) {\n//       const price = parseFloat(tripDetails.transport.price);\n//       if (!isNaN(price)) {\n//         transportCost = price;\n//         totalCost += price;\n//       }\n//     }\n\n//     // Assumed costs for food and attractions\n//     const LUNCH_COST = 1000; // PKR\n//     const DINNER_COST = 1500; // PKR\n//     const ATTRACTION_COST = 500; // PKR per person\n\n//     // Calculate daily food and attraction costs\n//     Object.values(dayDetails).forEach(day => {\n//       // Add lunch cost if selected\n//       if (day.lunch) {\n//         const lunchFee = LUNCH_COST;\n//         foodCost += lunchFee;\n//         totalCost += lunchFee;\n//       }\n\n//       // Add dinner cost if selected\n//       if (day.dinner) {\n//         const dinnerFee = DINNER_COST;\n//         foodCost += dinnerFee;\n//         totalCost += dinnerFee;\n//       }\n\n//       // Add attractions cost if selected (per person)\n//       if (day.attraction) {\n//         const attractionFee = ATTRACTION_COST * selectedGuests;\n//         attractionsCost += attractionFee;\n//         totalCost += attractionFee;\n//       }\n//     });\n\n//     return { totalCost, hotelCost, transportCost, foodCost, attractionsCost };\n//   };\n\n//   // Create an array of days for the trip duration\n//   const getDaysArray = () => {\n//     const days = [];\n//     for (let i = 0; i < numberOfDays; i++) {\n//       const dayNumber = i + 1;\n//       const dayDate = new Date(selectedStartDate);\n//       dayDate.setDate(dayDate.getDate() + i);\n//       days.push({ dayNumber, dayDate });\n//     }\n//     return days;\n//   };\n\n//   // Build itinerary day details for checkout\n//   const buildItineraryDays = () => {\n//     return getDaysArray().map(({ dayNumber }) => {\n//       const details = dayDetails[dayNumber] || {};\n//       const dayTitle = `Day ${dayNumber}: ${getPropertyValue(tripDetails.transport, 'type', 'Trip')} + Hotel`;\n\n//       // Calculate day cost\n//       let dayCost = 0;\n\n//       // Add hotel cost (divided by number of days)\n//       if (tripDetails.hotel && tripDetails.hotel.price) {\n//         const hotelPrice = parseFloat(tripDetails.hotel.price);\n//         if (!isNaN(hotelPrice)) {\n//           dayCost += hotelPrice / numberOfDays;\n//         }\n//       }\n\n//       // Add transport cost (divided by number of days)\n//       if (tripDetails.transport && tripDetails.transport.price) {\n//         const transportPrice = parseFloat(tripDetails.transport.price);\n//         if (!isNaN(transportPrice)) {\n//           dayCost += transportPrice / numberOfDays;\n//         }\n//       }\n\n//       // Add food and attraction costs\n//       if (details.lunch) dayCost += 1000; // LUNCH_COST\n//       if (details.dinner) dayCost += 1500; // DINNER_COST\n//       if (details.attraction) dayCost += 500 * selectedGuests; // ATTRACTION_COST * guests\n\n//       return {\n//         dayNumber,\n//         title: dayTitle,\n//         transportMode: getPropertyValue(tripDetails.transport, 'type', 'Transport'),\n//         hotel: getPropertyValue(tripDetails.hotel, 'name', 'Hotel'),\n//         lunch: details.lunch || null,\n//         dinner: details.dinner || null,\n//         attraction: details.attraction || null,\n//         totalCost: Math.round(dayCost) // Round to nearest integer\n//       };\n//     });\n//   };\n\n//   // Handle proceed to checkout\n//   const handleProceedToCheckout = () => {\n//     if (!tripStorageKey) {\n//       alert(\"Missing trip details. Please fill all required fields.\");\n//       return;\n//     }\n\n//     const { totalCost } = calculateTotalCost();\n\n//     // Create trip data object for checkout\n//     const tripData = {\n//       summary: {\n//         from: selectedStartingPoint,\n//         to: selectedDestination,\n//         startDate: selectedStartDate,\n//         endDate: selectedEndDate,\n//         guests: selectedGuests,\n//         duration: numberOfDays\n//       },\n//       days: buildItineraryDays(),\n//       discountPercentage: 0, // Default no discount, can be calculated based on user points\n//       totalCost\n//     };\n\n//     // Save trip data to localStorage for checkout page\n//     localStorage.setItem('tripCheckoutData', JSON.stringify(tripData));\n\n//     // Store the current trip key so checkout knows which trip this is\n//     localStorage.setItem('currentTripKey', tripStorageKey);\n\n//     // Navigate to checkout page\n//     navigate('/checkout');\n//   };\n\n//   // Determine if user has selected required trip elements\n//   const isTripComplete = tripDetails.hotel && tripDetails.transport && numberOfDays > 0;\n\n//   // Translate guest number to budget type for display\n//   const getBudgetType = (guests) => {\n//     switch(guests) {\n//       case 1: return \"Economic\";\n//       case 2: return \"Normal\";\n//       case 3: return \"Luxury\";\n//       default: return \"N/A\";\n//     }\n//   };\n\n//   return (\n//     <div className=\"customization-container\">\n//       <Navbar />\n//       <div className=\"content-wrapper\">\n//         <h2 className=\"customization-title\">Your Trip Details</h2>\n\n//         {/* Trip Summary Section */}\n//         <div className=\"trip-summary\">\n//           <h3>Trip Summary</h3>\n//           <div className=\"summary-details\">\n//             <div className=\"summary-col\">\n//               <p><span>From:</span> {selectedStartingPoint}</p>\n//               <p><span>To:</span> {selectedDestination}</p>\n//               <p>\n//                 <span>Budget: </span> \n//                 {selectedGuests === 1 ? \"Economic\" : selectedGuests === 2 ? \"Normal\" : selectedGuests === 3 ? \"Luxury\" : \"N/A\"}\n//               </p>\n//             </div>\n//             <div className=\"summary-col\">\n//               <p><span>Start:</span> {formatDate(selectedStartDate)}</p>\n//               <p><span>End:</span> {formatDate(selectedEndDate)}</p>\n//               <p><span>Duration:</span> {numberOfDays} {numberOfDays === 1 ? 'Day' : 'Days'}</p>\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Trip-level Accommodation & Transport */}\n//         <div className=\"trip-accommodations\">\n//           <div className=\"section-header\">\n//             <h3>Accommodation & Transport</h3>\n//             <button className=\"edit-button\" onClick={handleEditTripDetails}>\n//               <i className=\"fas fa-edit\"></i> Edit\n//             </button>\n//           </div>\n\n//           <div className=\"trip-details-container\">\n//             <div className=\"trip-detail-card\">\n//               <div className=\"detail-icon\">\n//                 <i className=\"fas fa-hotel\"></i>\n//               </div>\n//               <div className=\"detail-content\">\n//                 <h4>Hotel</h4>\n//                 {tripDetails.hotel ? (\n//                   <div className=\"detail-info\">\n//                     <p className=\"detail-name\">{getPropertyValue(tripDetails.hotel, 'name')}</p>\n//                     <p className=\"detail-price\">{getPropertyValue(tripDetails.hotel, 'price')} PKR</p>\n//                     <p className=\"detail-rating\">Rating: {getPropertyValue(tripDetails.hotel, 'rating')}/5</p>\n//                     {tripDetails.hotel.address && (\n//                       <p className=\"detail-address\">{tripDetails.hotel.address}</p>\n//                     )}\n//                   </div>\n//                 ) : (\n//                   <div className=\"no-detail-info\">\n//                     <p>No hotel selected</p>\n//                     <button className=\"small-add-button\" onClick={handleEditTripDetails}>\n//                       Add Hotel\n//                     </button>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n\n//             <div className=\"trip-detail-card\">\n//               <div className=\"detail-icon\">\n//                 <i className=\"fas fa-bus\"></i>\n//               </div>\n//               <div className=\"detail-content\">\n//                 <h4>Transport</h4>\n//                 {tripDetails.transport ? (\n//                   <div className=\"detail-info\">\n//                     <p className=\"detail-type\">{getPropertyValue(tripDetails.transport, 'type', 'Vehicle')}</p>\n//                     <p className=\"detail-name\">{\n//                       getPropertyValue(tripDetails.transport, 'name') || \n//                       getPropertyValue(tripDetails.transport, 'car_name') || \n//                       getPropertyValue(tripDetails.transport, 'bus_name') || \n//                       getPropertyValue(tripDetails.transport, 'train_name')\n//                     }</p>\n//                     <p className=\"detail-price\">{getPropertyValue(tripDetails.transport, 'price')} PKR</p>\n//                     <p className=\"detail-time\">\n//                       {getPropertyValue(tripDetails.transport, 'departure_time')}\n//                       {tripDetails.transport.arrival_time && ` - ${tripDetails.transport.arrival_time}`}\n//                     </p>\n//                   </div>\n//                 ) : (\n//                   <div className=\"no-detail-info\">\n//                     <p>No transport selected</p>\n//                     <button className=\"small-add-button\" onClick={handleEditTripDetails}>\n//                       Add Transport\n//                     </button>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Day-by-Day Itinerary */}\n//         {numberOfDays > 0 && (\n//           <div className=\"days-section\">\n//             <h3>Day-by-Day Itinerary</h3>\n//             <div className=\"days-grid\">\n//               {getDaysArray().map(({ dayNumber, dayDate }, index) => {\n//                 const details = dayDetails[dayNumber] || {};\n//                 const options = getOptionsForDestination();\n\n//                 return (\n//                   <div key={index} className=\"day-card\">\n//                     <div className=\"day-header\">\n//                       <div className=\"day-number\">DAY {dayNumber}</div>\n//                       <div className=\"day-date\">{formatDate(dayDate)}</div>\n//                     </div>\n\n//                     <div className=\"food-attractions-section\">\n//                       <div className=\"select-container\">\n//                         <label htmlFor={`lunch-day-${dayNumber}`}>Lunch:</label>\n//                         <select\n//                           id={`lunch-day-${dayNumber}`}\n//                           value={details.lunch || ''}\n//                           onChange={(e) => handleDetailChange(dayNumber, 'lunch', e.target.value)}\n//                           className=\"custom-select\"\n//                         >\n//                           <option value=\"\">Select Lunch Place</option>\n//                           {options.lunch.map((place, i) => (\n//                             <option key={i} value={place}>{place}</option>\n//                           ))}\n//                         </select>\n//                       </div>\n\n//                       <div className=\"select-container\">\n//                         <label htmlFor={`dinner-day-${dayNumber}`}>Dinner:</label>\n//                         <select\n//                           id={`dinner-day-${dayNumber}`}\n//                           value={details.dinner || ''}\n//                           onChange={(e) => handleDetailChange(dayNumber, 'dinner', e.target.value)}\n//                           className=\"custom-select\"\n//                         >\n//                           <option value=\"\">Select Dinner Place</option>\n//                           {options.dinner.map((place, i) => (\n//                             <option key={i} value={place}>{place}</option>\n//                           ))}\n//                         </select>\n//                       </div>\n\n//                       <div className=\"select-container\">\n//                         <label htmlFor={`attraction-day-${dayNumber}`}>Attraction:</label>\n//                         <select\n//                           id={`attraction-day-${dayNumber}`}\n//                           value={details.attraction || ''}\n//                           onChange={(e) => handleDetailChange(dayNumber, 'attraction', e.target.value)}\n//                           className=\"custom-select\"\n//                         >\n//                           <option value=\"\">Select Attraction</option>\n//                           {options.attractions.map((place, i) => (\n//                             <option key={i} value={place}>{place}</option>\n//                           ))}\n//                         </select>\n//                       </div>\n\n//                       <div className=\"selected-options\">\n//                         {details.lunch && (\n//                           <div className=\"selected-item\">\n//                             <span className=\"icon lunch-icon\"><i className=\"fas fa-utensils\"></i></span>\n//                             <span className=\"item-name\">{details.lunch}</span>\n//                           </div>\n//                         )}\n\n//                         {details.dinner && (\n//                           <div className=\"selected-item\">\n//                             <span className=\"icon dinner-icon\"><i className=\"fas fa-moon\"></i></span>\n//                             <span className=\"item-name\">{details.dinner}</span>\n//                           </div>\n//                         )}\n\n//                         {details.attraction && (\n//                           <div className=\"selected-item\">\n//                             <span className=\"icon attraction-icon\"><i className=\"fas fa-map-marker-alt\"></i></span>\n//                             <span className=\"item-name\">{details.attraction}</span>\n//                           </div>\n//                         )}\n//                       </div>\n//                     </div>\n//                   </div>\n//                 );\n//               })}\n//             </div>\n//           </div>\n//         )}\n\n//         {/* Calculate and display total trip cost */}\n//         {(tripDetails.hotel || tripDetails.transport || Object.keys(dayDetails).length > 0) && (\n//           <div className=\"trip-cost-summary\">\n//             <h3>Total Trip Cost</h3>\n//             {(() => {\n//               const { totalCost, hotelCost, transportCost, foodCost, attractionsCost } = calculateTotalCost();\n\n//               return (\n//                 <div className=\"cost-breakdown\">\n//                   <div className=\"cost-grid\">\n//                     <div className=\"cost-item\">\n//                       <span className=\"cost-label\">Hotel:</span>\n//                       <span className=\"cost-value\">{hotelCost.toLocaleString()} PKR</span>\n//                     </div>\n//                     <div className=\"cost-item\">\n//                       <span className=\"cost-label\">Transport:</span>\n//                       <span className=\"cost-value\">{transportCost.toLocaleString()} PKR</span>\n//                     </div>\n//                     <div className=\"cost-item\">\n//                       <span className=\"cost-label\">Food:</span>\n//                       <span className=\"cost-value\">{foodCost.toLocaleString()} PKR</span>\n//                     </div>\n//                     <div className=\"cost-item\">\n//                       <span className=\"cost-label\">Attractions:</span>\n//                       <span className=\"cost-value\">{attractionsCost.toLocaleString()} PKR</span>\n//                     </div>\n//                   </div>\n//                   <div className=\"total-cost\">\n//                     <span>Total Cost:</span> {totalCost.toLocaleString()} PKR\n//                   </div>\n//                 </div>\n//               );\n//             })()}\n//           </div>\n//         )}\n\n//         <div className=\"action-buttons\">\n//           <button className=\"back-button\" onClick={() => navigate(-1)}>\n//             Back\n//           </button>\n//           <button \n//             className=\"save-button\"\n//             onClick={handleProceedToCheckout}\n//             disabled={!tripDetails.hotel || !tripDetails.transport || numberOfDays === 0}\n//           >\n//             Pay\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n\n// };\n\n// export default UserCustomization;","map":{"version":3,"names":[],"sources":["F:/Web/Voyaige/Voyaige/proj/front/src/components/Booking/UserCustomization/UserCustomization.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useLocation, useNavigate } from 'react-router-dom';\r\n// import Navbar from '../../NavBar/Navbar';\r\n// import './UserCustomization.css';\r\n\r\n// const UserCustomization = () => {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { customizationData, bookingData } = location.state || {};\r\n\r\n//   const {\r\n//     startingPoint = '',\r\n//     destination = '',\r\n//     startDate = '',\r\n//     endDate = '',\r\n//     guests = 1\r\n//   } = customizationData || {};\r\n\r\n//   const [selectedStartingPoint] = useState(startingPoint);\r\n//   const [selectedDestination] = useState(destination);\r\n//   const [selectedStartDate] = useState(startDate);\r\n//   const [selectedEndDate] = useState(endDate);\r\n//   const [selectedGuests] = useState(guests);\r\n//   const [numberOfDays, setNumberOfDays] = useState(0);\r\n  \r\n//   // Single trip-level hotel and transport\r\n//   const [tripDetails, setTripDetails] = useState({\r\n//     hotel: null,\r\n//     transport: null\r\n//   });\r\n\r\n//   // State to store food and attractions details for each day\r\n//   const [dayDetails, setDayDetails] = useState({});\r\n\r\n//   // Define food and attraction options for different cities\r\n//   const cityOptions = {\r\n//     \"Islamabad\": {\r\n//       lunch: [\"Monal Restaurant\", \"Tandoori Restaurant\", \"Chaaye Khana\"],\r\n//       dinner: [\"Savour Foods\", \"Kabul Restaurant\", \"Dynasty Restaurant\"],\r\n//       attractions: [\"Faisal Mosque\", \"Daman-e-Koh\", \"Pakistan Monument\"]\r\n//     },\r\n//     \"Lahore\": {\r\n//       lunch: [\"Haveli Restaurant\", \"Andaaz Restaurant\", \"Spice Bazaar\"],\r\n//       dinner: [\"Cooco's Den\", \"Village Restaurant\", \"Fujiyama Restaurant\"],\r\n//       attractions: [\"Badshahi Mosque\", \"Lahore Fort\", \"Shalimar Gardens\"]\r\n//     },\r\n//     // Other cities (kept for reference but condensed in this example)\r\n//     \"Karachi\": {\r\n//       lunch: [\"BBQ Tonight\", \"Kolachi Restaurant\", \"Kababjees\"],\r\n//       dinner: [\"Port Grand\", \"Okra Restaurant\", \"Cafe Flo\"],\r\n//       attractions: [\"Clifton Beach\", \"Mazar-e-Quaid\", \"Mohatta Palace\"]\r\n//     },\r\n//     // Default options for any city not in the list\r\n//     \"Default\": {\r\n//       lunch: [\"Local Restaurant 1\", \"Local Restaurant 2\", \"Local Restaurant 3\"],\r\n//       dinner: [\"Evening Dining 1\", \"Evening Dining 2\", \"Evening Dining 3\"],\r\n//       attractions: [\"Local Attraction 1\", \"Local Attraction 2\", \"Local Attraction 3\"]\r\n//     }\r\n//   };\r\n\r\n//   // Calculate number of days for the trip\r\n//   useEffect(() => {\r\n//     if (selectedStartDate && selectedEndDate) {\r\n//       const start = new Date(selectedStartDate);\r\n//       const end = new Date(selectedEndDate);\r\n//       const timeDiff = end - start;\r\n//       const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24)) + 1;\r\n//       setNumberOfDays(daysDiff > 0 ? daysDiff : 0);\r\n//     }\r\n//   }, [selectedStartDate, selectedEndDate]);\r\n\r\n//   // Load trip and day details from localStorage on component mount\r\n//   useEffect(() => {\r\n//     const savedTripDetails = localStorage.getItem('tripDetails');\r\n//     if (savedTripDetails) {\r\n//       try {\r\n//         setTripDetails(JSON.parse(savedTripDetails));\r\n//       } catch (error) {\r\n//         console.error(\"Error parsing trip details from localStorage:\", error);\r\n//         localStorage.removeItem('tripDetails');\r\n//       }\r\n//     }\r\n\r\n//     const savedDayDetails = localStorage.getItem('dayDetails');\r\n//     if (savedDayDetails) {\r\n//       try {\r\n//         setDayDetails(JSON.parse(savedDayDetails));\r\n//       } catch (error) {\r\n//         console.error(\"Error parsing day details from localStorage:\", error);\r\n//         localStorage.removeItem('dayDetails');\r\n//       }\r\n//     }\r\n//   }, []);\r\n\r\n//   // Update localStorage whenever tripDetails state changes\r\n//   useEffect(() => {\r\n//     if (tripDetails.hotel || tripDetails.transport) {\r\n//       localStorage.setItem('tripDetails', JSON.stringify(tripDetails));\r\n//     }\r\n//   }, [tripDetails]);\r\n\r\n//   // Update localStorage whenever dayDetails state changes\r\n//   useEffect(() => {\r\n//     if (Object.keys(dayDetails).length > 0) {\r\n//       localStorage.setItem('dayDetails', JSON.stringify(dayDetails));\r\n//     }\r\n//   }, [dayDetails]);\r\n\r\n//   // Receive booking data and update state\r\n//   useEffect(() => {\r\n//     if (bookingData) {\r\n//       console.log(\"Received Booking Data:\", bookingData);\r\n//       const { selectedHotel, selectedTransport } = bookingData;\r\n      \r\n//       setTripDetails(prevDetails => {\r\n//         const updatedDetails = {\r\n//           ...prevDetails,\r\n//           hotel: selectedHotel || prevDetails.hotel,\r\n//           transport: selectedTransport || prevDetails.transport\r\n//         };\r\n        \r\n//         // Save to localStorage immediately to prevent data loss\r\n//         localStorage.setItem('tripDetails', JSON.stringify(updatedDetails));\r\n//         return updatedDetails;\r\n//       });\r\n//     }\r\n//   }, [bookingData]);\r\n\r\n//   // Navigate to BookOption page\r\n//   const handleEditTripDetails = () => {\r\n//     navigate('/bookoption', { \r\n//       state: { \r\n//         customizationData,\r\n//         currentDetails: tripDetails\r\n//       } \r\n//     });\r\n//   };\r\n\r\n//   // Handle change for lunch, dinner, and attractions\r\n//   const handleDetailChange = (day, type, value) => {\r\n//     setDayDetails(prevDetails => {\r\n//       const updatedDetails = {\r\n//         ...prevDetails,\r\n//         [day]: {\r\n//           ...prevDetails[day],\r\n//           [type]: value\r\n//         }\r\n//       };\r\n      \r\n//       localStorage.setItem('dayDetails', JSON.stringify(updatedDetails));\r\n//       return updatedDetails;\r\n//     });\r\n//   };\r\n\r\n//   // Helper function to safely access nested properties\r\n//   const getPropertyValue = (obj, property, fallback = 'N/A') => {\r\n//     if (!obj) return fallback;\r\n    \r\n//     const properties = property.split('.');\r\n//     let value = obj;\r\n    \r\n//     for (const prop of properties) {\r\n//       if (value && typeof value === 'object' && prop in value) {\r\n//         value = value[prop];\r\n//       } else {\r\n//         return fallback;\r\n//       }\r\n//     }\r\n    \r\n//     return value || fallback;\r\n//   };\r\n\r\n//   // Format date to be more readable\r\n//   const formatDate = (dateString) => {\r\n//     if (!dateString) return '';\r\n//     const date = new Date(dateString);\r\n//     return date.toLocaleDateString('en-US', { \r\n//       weekday: 'short', \r\n//       month: 'short', \r\n//       day: 'numeric', \r\n//       year: 'numeric' \r\n//     });\r\n//   };\r\n\r\n//   // Get options for the current destination\r\n//   const getOptionsForDestination = () => {\r\n//     return cityOptions[selectedDestination] || cityOptions[\"Default\"];\r\n//   };\r\n\r\n//   // Calculate total cost including food and attractions\r\n//   const calculateTotalCost = () => {\r\n//     let totalCost = 0;\r\n//     let hotelCost = 0;\r\n//     let transportCost = 0;\r\n//     let foodCost = 0;\r\n//     let attractionsCost = 0;\r\n    \r\n//     // Fixed costs for hotel and transport (per trip)\r\n//     if (tripDetails.hotel && tripDetails.hotel.price) {\r\n//       const price = parseFloat(tripDetails.hotel.price);\r\n//       if (!isNaN(price)) {\r\n//         hotelCost = price;\r\n//         totalCost += price;\r\n//       }\r\n//     }\r\n    \r\n//     if (tripDetails.transport && tripDetails.transport.price) {\r\n//       const price = parseFloat(tripDetails.transport.price);\r\n//       if (!isNaN(price)) {\r\n//         transportCost = price;\r\n//         totalCost += price;\r\n//       }\r\n//     }\r\n    \r\n//     // Assumed costs for food and attractions\r\n//     const LUNCH_COST = 1000; // PKR\r\n//     const DINNER_COST = 1500; // PKR\r\n//     const ATTRACTION_COST = 500; // PKR per person\r\n    \r\n//     // Calculate daily food and attraction costs\r\n//     Object.values(dayDetails).forEach(day => {\r\n//       // Add lunch cost if selected\r\n//       if (day.lunch) {\r\n//         const lunchFee = LUNCH_COST;\r\n//         foodCost += lunchFee;\r\n//         totalCost += lunchFee;\r\n//       }\r\n      \r\n//       // Add dinner cost if selected\r\n//       if (day.dinner) {\r\n//         const dinnerFee = DINNER_COST;\r\n//         foodCost += dinnerFee;\r\n//         totalCost += dinnerFee;\r\n//       }\r\n      \r\n//       // Add attractions cost if selected (per person)\r\n//       if (day.attraction) {\r\n//         const attractionFee = ATTRACTION_COST * selectedGuests;\r\n//         attractionsCost += attractionFee;\r\n//         totalCost += attractionFee;\r\n//       }\r\n//     });\r\n    \r\n//     return { totalCost, hotelCost, transportCost, foodCost, attractionsCost };\r\n//   };\r\n\r\n//   // Create an array of days\r\n//   const getDaysArray = () => {\r\n//     const days = [];\r\n//     for (let i = 0; i < numberOfDays; i++) {\r\n//       const dayNumber = i + 1;\r\n//       const dayDate = new Date(selectedStartDate);\r\n//       dayDate.setDate(dayDate.getDate() + i);\r\n//       days.push({ dayNumber, dayDate });\r\n//     }\r\n//     return days;\r\n//   };\r\n\r\n//   // Build itinerary day details for checkout\r\n//   const buildItineraryDays = () => {\r\n//     return getDaysArray().map(({ dayNumber }) => {\r\n//       const details = dayDetails[dayNumber] || {};\r\n//       const dayTitle = `Day ${dayNumber}: ${getPropertyValue(tripDetails.transport, 'type', 'Trip')} + Hotel`;\r\n      \r\n//       // Calculate day cost\r\n//       let dayCost = 0;\r\n      \r\n//       // Add hotel cost (divided by number of days)\r\n//       if (tripDetails.hotel && tripDetails.hotel.price) {\r\n//         const hotelPrice = parseFloat(tripDetails.hotel.price);\r\n//         if (!isNaN(hotelPrice)) {\r\n//           dayCost += hotelPrice / numberOfDays;\r\n//         }\r\n//       }\r\n      \r\n//       // Add transport cost (divided by number of days)\r\n//       if (tripDetails.transport && tripDetails.transport.price) {\r\n//         const transportPrice = parseFloat(tripDetails.transport.price);\r\n//         if (!isNaN(transportPrice)) {\r\n//           dayCost += transportPrice / numberOfDays;\r\n//         }\r\n//       }\r\n      \r\n//       // Add food and attraction costs\r\n//       if (details.lunch) dayCost += 1000; // LUNCH_COST\r\n//       if (details.dinner) dayCost += 1500; // DINNER_COST\r\n//       if (details.attraction) dayCost += 500 * selectedGuests; // ATTRACTION_COST * guests\r\n      \r\n//       return {\r\n//         dayNumber,\r\n//         title: dayTitle,\r\n//         transportMode: getPropertyValue(tripDetails.transport, 'type', 'Transport'),\r\n//         hotel: getPropertyValue(tripDetails.hotel, 'name', 'Hotel'),\r\n//         lunch: details.lunch || null,\r\n//         dinner: details.dinner || null,\r\n//         attraction: details.attraction || null,\r\n//         totalCost: Math.round(dayCost) // Round to nearest integer\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   // Handle proceed to checkout\r\n//   const handleProceedToCheckout = () => {\r\n//     const { totalCost } = calculateTotalCost();\r\n    \r\n//     // Create trip data object for checkout\r\n//     const tripData = {\r\n//       summary: {\r\n//         from: selectedStartingPoint,\r\n//         to: selectedDestination,\r\n//         startDate: selectedStartDate,\r\n//         endDate: selectedEndDate,\r\n//         guests: selectedGuests,\r\n//         duration: numberOfDays\r\n//       },\r\n//       days: buildItineraryDays(),\r\n//       discountPercentage: 0, // Default no discount, can be calculated based on user points\r\n//       totalCost\r\n//     };\r\n    \r\n//     // Save trip data to localStorage for checkout page\r\n//     localStorage.setItem('tripCheckoutData', JSON.stringify(tripData));\r\n    \r\n//     // Navigate to checkout page\r\n//     navigate('/checkout');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"customization-container\">\r\n//       <Navbar />\r\n//       <div className=\"content-wrapper\">\r\n//         <h2 className=\"customization-title\">Your Trip Details</h2>\r\n        \r\n//         <div className=\"trip-summary\">\r\n//           <h3>Trip Summary</h3>\r\n//           <div className=\"summary-details\">\r\n//             <div className=\"summary-col\">\r\n//               <p><span>From:</span> {selectedStartingPoint}</p>\r\n//               <p><span>To:</span> {selectedDestination}</p>\r\n//                 <p>\r\n//                 <span>Budget : </span> \r\n//                 {selectedGuests === 1 ? \" Economic\" : selectedGuests === 2 ? \" Normal\" : selectedGuests === 3 ? \" Luxury\" : \" N/A\"}\r\n//                 </p>\r\n\r\n//             </div>\r\n//             <div className=\"summary-col\">\r\n//               <p><span>Start:</span> {formatDate(selectedStartDate)}</p>\r\n//               <p><span>End:</span> {formatDate(selectedEndDate)}</p>\r\n//               <p><span>Duration:</span> {numberOfDays} {numberOfDays === 1 ? 'Day' : 'Days'}</p>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         {/* Trip-level Accommodation & Transport */}\r\n//         <div className=\"trip-accommodations\">\r\n//           <div className=\"section-header\">\r\n//             <h3>Accommodation & Transport</h3>\r\n//             <button className=\"edit-button\" onClick={handleEditTripDetails}>\r\n//               <i className=\"fas fa-edit\"></i> Edit\r\n//             </button>\r\n//           </div>\r\n          \r\n//           <div className=\"trip-details-container\">\r\n//             <div className=\"trip-detail-card\">\r\n//               <div className=\"detail-icon\">\r\n//                 <i className=\"fas fa-hotel\"></i>\r\n//               </div>\r\n//               <div className=\"detail-content\">\r\n//                 <h4>Hotel</h4>\r\n//                 {tripDetails.hotel ? (\r\n//                   <div className=\"detail-info\">\r\n//                     <p className=\"detail-name\">{getPropertyValue(tripDetails.hotel, 'name')}</p>\r\n//                     <p className=\"detail-price\">{getPropertyValue(tripDetails.hotel, 'price')} PKR</p>\r\n//                     <p className=\"detail-rating\">Rating: {getPropertyValue(tripDetails.hotel, 'rating')}/5</p>\r\n//                     {tripDetails.hotel.address && (\r\n//                       <p className=\"detail-address\">{tripDetails.hotel.address}</p>\r\n//                     )}\r\n//                   </div>\r\n//                 ) : (\r\n//                   <div className=\"no-detail-info\">\r\n//                     <p>No hotel selected</p>\r\n//                     <button className=\"small-add-button\" onClick={handleEditTripDetails}>\r\n//                       Add Hotel\r\n//                     </button>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"trip-detail-card\">\r\n//               <div className=\"detail-icon\">\r\n//                 <i className=\"fas fa-bus\"></i>\r\n//               </div>\r\n//               <div className=\"detail-content\">\r\n//                 <h4>Transport</h4>\r\n//                 {tripDetails.transport ? (\r\n//                   <div className=\"detail-info\">\r\n//                     <p className=\"detail-type\">{getPropertyValue(tripDetails.transport, 'type', 'Vehicle')}</p>\r\n//                     <p className=\"detail-name\">{\r\n//                       getPropertyValue(tripDetails.transport, 'name') || \r\n//                       getPropertyValue(tripDetails.transport, 'car_name') || \r\n//                       getPropertyValue(tripDetails.transport, 'bus_name') || \r\n//                       getPropertyValue(tripDetails.transport, 'train_name')\r\n//                     }</p>\r\n//                     <p className=\"detail-price\">{getPropertyValue(tripDetails.transport, 'price')} PKR</p>\r\n//                     <p className=\"detail-time\">\r\n//                       {getPropertyValue(tripDetails.transport, 'departure_time')}\r\n//                       {tripDetails.transport.arrival_time && ` - ${tripDetails.transport.arrival_time}`}\r\n//                     </p>\r\n//                   </div>\r\n//                 ) : (\r\n//                   <div className=\"no-detail-info\">\r\n//                     <p>No transport selected</p>\r\n//                     <button className=\"small-add-button\" onClick={handleEditTripDetails}>\r\n//                       Add Transport\r\n//                     </button>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         {/* Day-by-Day Itinerary */}\r\n//         {numberOfDays > 0 && (\r\n//           <div className=\"days-section\">\r\n//             <h3>Day-by-Day Itinerary</h3>\r\n//             <div className=\"days-grid\">\r\n//               {getDaysArray().map(({ dayNumber, dayDate }, index) => {\r\n//                 const details = dayDetails[dayNumber] || {};\r\n//                 const options = getOptionsForDestination();\r\n                \r\n//                 return (\r\n//                   <div key={index} className=\"day-card\">\r\n//                     <div className=\"day-header\">\r\n//                       <div className=\"day-number\">DAY {dayNumber}</div>\r\n//                       <div className=\"day-date\">{formatDate(dayDate)}</div>\r\n//                     </div>\r\n                    \r\n//                     <div className=\"food-attractions-section\">\r\n//                       <div className=\"select-container\">\r\n//                         <label htmlFor={`lunch-day-${dayNumber}`}>Lunch:</label>\r\n//                         <select\r\n//                           id={`lunch-day-${dayNumber}`}\r\n//                           value={details.lunch || ''}\r\n//                           onChange={(e) => handleDetailChange(dayNumber, 'lunch', e.target.value)}\r\n//                           className=\"custom-select\"\r\n//                         >\r\n//                           <option value=\"\">Select Lunch Place</option>\r\n//                           {options.lunch.map((place, i) => (\r\n//                             <option key={i} value={place}>{place}</option>\r\n//                           ))}\r\n//                         </select>\r\n//                       </div>\r\n                      \r\n//                       <div className=\"select-container\">\r\n//                         <label htmlFor={`dinner-day-${dayNumber}`}>Dinner:</label>\r\n//                         <select\r\n//                           id={`dinner-day-${dayNumber}`}\r\n//                           value={details.dinner || ''}\r\n//                           onChange={(e) => handleDetailChange(dayNumber, 'dinner', e.target.value)}\r\n//                           className=\"custom-select\"\r\n//                         >\r\n//                           <option value=\"\">Select Dinner Place</option>\r\n//                           {options.dinner.map((place, i) => (\r\n//                             <option key={i} value={place}>{place}</option>\r\n//                           ))}\r\n//                         </select>\r\n//                       </div>\r\n                      \r\n//                       <div className=\"select-container\">\r\n//                         <label htmlFor={`attraction-day-${dayNumber}`}>Attraction:</label>\r\n//                         <select\r\n//                           id={`attraction-day-${dayNumber}`}\r\n//                           value={details.attraction || ''}\r\n//                           onChange={(e) => handleDetailChange(dayNumber, 'attraction', e.target.value)}\r\n//                           className=\"custom-select\"\r\n//                         >\r\n//                           <option value=\"\">Select Attraction</option>\r\n//                           {options.attractions.map((place, i) => (\r\n//                             <option key={i} value={place}>{place}</option>\r\n//                           ))}\r\n//                         </select>\r\n//                       </div>\r\n                      \r\n//                       <div className=\"selected-options\">\r\n//                         {details.lunch && (\r\n//                           <div className=\"selected-item\">\r\n//                             <span className=\"icon lunch-icon\"><i className=\"fas fa-utensils\"></i></span>\r\n//                             <span className=\"item-name\">{details.lunch}</span>\r\n//                           </div>\r\n//                         )}\r\n                        \r\n//                         {details.dinner && (\r\n//                           <div className=\"selected-item\">\r\n//                             <span className=\"icon dinner-icon\"><i className=\"fas fa-moon\"></i></span>\r\n//                             <span className=\"item-name\">{details.dinner}</span>\r\n//                           </div>\r\n//                         )}\r\n                        \r\n//                         {details.attraction && (\r\n//                           <div className=\"selected-item\">\r\n//                             <span className=\"icon attraction-icon\"><i className=\"fas fa-map-marker-alt\"></i></span>\r\n//                             <span className=\"item-name\">{details.attraction}</span>\r\n//                           </div>\r\n//                         )}\r\n//                       </div>\r\n//                     </div>\r\n//                   </div>\r\n//                 );\r\n//               })}\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n        \r\n//         {/* Calculate and display total trip cost */}\r\n//         {(tripDetails.hotel || tripDetails.transport || Object.keys(dayDetails).length > 0) && (\r\n//           <div className=\"trip-cost-summary\">\r\n//             <h3>Total Trip Cost</h3>\r\n//             {(() => {\r\n//               const { totalCost, hotelCost, transportCost, foodCost, attractionsCost } = calculateTotalCost();\r\n              \r\n//               return (\r\n//                 <div className=\"cost-breakdown\">\r\n//                   <div className=\"cost-grid\">\r\n//                     <div className=\"cost-item\">\r\n//                       <span className=\"cost-label\">Hotel:</span>\r\n//                       <span className=\"cost-value\">{hotelCost.toLocaleString()} PKR</span>\r\n//                     </div>\r\n//                     <div className=\"cost-item\">\r\n//                       <span className=\"cost-label\">Transport:</span>\r\n//                       <span className=\"cost-value\">{transportCost.toLocaleString()} PKR</span>\r\n//                     </div>\r\n//                     <div className=\"cost-item\">\r\n//                       <span className=\"cost-label\">Food:</span>\r\n//                       <span className=\"cost-value\">{foodCost.toLocaleString()} PKR</span>\r\n//                     </div>\r\n//                     <div className=\"cost-item\">\r\n//                       <span className=\"cost-label\">Attractions:</span>\r\n//                       <span className=\"cost-value\">{attractionsCost.toLocaleString()} PKR</span>\r\n//                     </div>\r\n//                   </div>\r\n//                   <div className=\"total-cost\">\r\n//                     <span>Total Cost:</span> {totalCost.toLocaleString()} PKR\r\n//                   </div>\r\n//                 </div>\r\n//               );\r\n//             })()}\r\n//           </div>\r\n//         )}\r\n        \r\n//         <div className=\"action-buttons\">\r\n//           <button className=\"back-button\" onClick={() => navigate(-1)}>\r\n//             Back\r\n//           </button>\r\n//           <button \r\n//             className=\"save-button\"\r\n//             onClick={handleProceedToCheckout}\r\n//             disabled={!tripDetails.hotel || !tripDetails.transport || numberOfDays === 0}\r\n//           >\r\n//             Pay\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// \r\n\r\n\r\n// ***********************************************************************************************************************\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useLocation, useNavigate } from 'react-router-dom';\r\n// import Navbar from '../../NavBar/Navbar';\r\n// import './UserCustomization.css';\r\n\r\n// const UserCustomization = () => {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { customizationData, bookingData } = location.state || {};\r\n\r\n//   // Extract trip basic information from customizationData with defaults\r\n//   const {\r\n//     startingPoint = '',\r\n//     destination = '',\r\n//     startDate = '',\r\n//     endDate = '',\r\n//     guests = 1\r\n//   } = customizationData || {};\r\n\r\n//   // Create a unique trip ID based on trip details to use as storage key\r\n//   // This ensures different trips have separate storage\r\n//   const getTripStorageKey = () => {\r\n//     if (!startingPoint || !destination || !startDate || !endDate) return null;\r\n//     return `trip_${startingPoint}_${destination}_${startDate}_${endDate}_${guests}`;\r\n//   };\r\n\r\n//   const tripStorageKey = getTripStorageKey();\r\n\r\n//   // Basic trip information states (non-editable)\r\n//   const [selectedStartingPoint] = useState(startingPoint);\r\n//   const [selectedDestination] = useState(destination);\r\n//   const [selectedStartDate] = useState(startDate);\r\n//   const [selectedEndDate] = useState(endDate);\r\n//   const [selectedGuests] = useState(guests);\r\n//   const [numberOfDays, setNumberOfDays] = useState(0);\r\n  \r\n//   // Trip-level details for hotel and transport\r\n//   const [tripDetails, setTripDetails] = useState({\r\n//     hotel: null,\r\n//     transport: null\r\n//   });\r\n\r\n//   // State to store food and attractions details for each day\r\n//   const [dayDetails, setDayDetails] = useState({});\r\n\r\n//   // Define food and attraction options for different cities\r\n//   const cityOptions = {\r\n//     \"Islamabad\": {\r\n//       lunch: [\"Monal Restaurant\", \"Tandoori Restaurant\", \"Chaaye Khana\"],\r\n//       dinner: [\"Savour Foods\", \"Kabul Restaurant\", \"Dynasty Restaurant\"],\r\n//       attractions: [\"Faisal Mosque\", \"Daman-e-Koh\", \"Pakistan Monument\"]\r\n//     },\r\n//     \"Lahore\": {\r\n//       lunch: [\"Haveli Restaurant\", \"Andaaz Restaurant\", \"Spice Bazaar\"],\r\n//       dinner: [\"Cooco's Den\", \"Village Restaurant\", \"Fujiyama Restaurant\"],\r\n//       attractions: [\"Badshahi Mosque\", \"Lahore Fort\", \"Shalimar Gardens\"]\r\n//     },\r\n//     \"Karachi\": {\r\n//       lunch: [\"BBQ Tonight\", \"Kolachi Restaurant\", \"Kababjees\"],\r\n//       dinner: [\"Port Grand\", \"Okra Restaurant\", \"Cafe Flo\"],\r\n//       attractions: [\"Clifton Beach\", \"Mazar-e-Quaid\", \"Mohatta Palace\"]\r\n//     },\r\n//     // Default options for any city not in the list\r\n//     \"Default\": {\r\n//       lunch: [\"Local Restaurant 1\", \"Local Restaurant 2\", \"Local Restaurant 3\"],\r\n//       dinner: [\"Evening Dining 1\", \"Evening Dining 2\", \"Evening Dining 3\"],\r\n//       attractions: [\"Local Attraction 1\", \"Local Attraction 2\", \"Local Attraction 3\"]\r\n//     }\r\n//   };\r\n\r\n//   // Calculate number of days for the trip\r\n//   useEffect(() => {\r\n//     if (selectedStartDate && selectedEndDate) {\r\n//       const start = new Date(selectedStartDate);\r\n//       const end = new Date(selectedEndDate);\r\n//       const timeDiff = end - start;\r\n//       const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24)) + 1;\r\n//       setNumberOfDays(daysDiff > 0 ? daysDiff : 0);\r\n//     }\r\n//   }, [selectedStartDate, selectedEndDate]);\r\n\r\n//   // Load trip details from localStorage based on unique trip key\r\n//   useEffect(() => {\r\n//     // Only attempt to load if we have a valid storage key\r\n//     if (tripStorageKey) {\r\n//       // Load trip-specific details (hotel and transport)\r\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\r\n//       if (savedTripDetails) {\r\n//         try {\r\n//           setTripDetails(JSON.parse(savedTripDetails));\r\n//         } catch (error) {\r\n//           console.error(\"Error parsing trip details from localStorage:\", error);\r\n//           localStorage.removeItem(`tripDetails_${tripStorageKey}`);\r\n//         }\r\n//       }\r\n\r\n//       // Load day-specific details (food and attractions)\r\n//       const savedDayDetails = localStorage.getItem(`dayDetails_${tripStorageKey}`);\r\n//       if (savedDayDetails) {\r\n//         try {\r\n//           setDayDetails(JSON.parse(savedDayDetails));\r\n//         } catch (error) {\r\n//           console.error(\"Error parsing day details from localStorage:\", error);\r\n//           localStorage.removeItem(`dayDetails_${tripStorageKey}`);\r\n//         }\r\n//       }\r\n//     }\r\n//   }, [tripStorageKey]);\r\n\r\n//   // Update localStorage whenever tripDetails state changes\r\n//   useEffect(() => {\r\n//     if (tripStorageKey && (tripDetails.hotel || tripDetails.transport)) {\r\n//       localStorage.setItem(`tripDetails_${tripStorageKey}`, JSON.stringify(tripDetails));\r\n//     }\r\n//   }, [tripDetails, tripStorageKey]);\r\n\r\n//   // Update localStorage whenever dayDetails state changes\r\n//   useEffect(() => {\r\n//     if (tripStorageKey && Object.keys(dayDetails).length > 0) {\r\n//       localStorage.setItem(`dayDetails_${tripStorageKey}`, JSON.stringify(dayDetails));\r\n//     }\r\n//   }, [dayDetails, tripStorageKey]);\r\n\r\n//   // Process booking data when coming back from BookOption page\r\n//   useEffect(() => {\r\n//     if (bookingData && tripStorageKey) {\r\n//       console.log(\"Received Booking Data:\", bookingData);\r\n//       const { selectedHotel, selectedTransport } = bookingData;\r\n      \r\n//       setTripDetails(prevDetails => {\r\n//         const updatedDetails = {\r\n//           ...prevDetails,\r\n//           hotel: selectedHotel || prevDetails.hotel,\r\n//           transport: selectedTransport || prevDetails.transport\r\n//         };\r\n        \r\n//         // Save to trip-specific localStorage immediately\r\n//         localStorage.setItem(`tripDetails_${tripStorageKey}`, JSON.stringify(updatedDetails));\r\n//         return updatedDetails;\r\n//       });\r\n//     }\r\n//   }, [bookingData, tripStorageKey]);\r\n\r\n//   // Navigate to BookOption page for editing hotel/transport\r\n//   const handleEditTripDetails = () => {\r\n//     navigate('/bookoption', { \r\n//       state: { \r\n//         customizationData,\r\n//         currentDetails: tripDetails\r\n//       } \r\n//     });\r\n//   };\r\n\r\n//   // Handle change for lunch, dinner, and attractions\r\n//   const handleDetailChange = (day, type, value) => {\r\n//     if (!tripStorageKey) return;\r\n    \r\n//     setDayDetails(prevDetails => {\r\n//       const updatedDetails = {\r\n//         ...prevDetails,\r\n//         [day]: {\r\n//           ...prevDetails[day],\r\n//           [type]: value\r\n//         }\r\n//       };\r\n      \r\n//       // Save to trip-specific localStorage\r\n//       localStorage.setItem(`dayDetails_${tripStorageKey}`, JSON.stringify(updatedDetails));\r\n//       return updatedDetails;\r\n//     });\r\n//   };\r\n\r\n//   // Helper function to safely access nested properties\r\n//   const getPropertyValue = (obj, property, fallback = 'N/A') => {\r\n//     if (!obj) return fallback;\r\n    \r\n//     const properties = property.split('.');\r\n//     let value = obj;\r\n    \r\n//     for (const prop of properties) {\r\n//       if (value && typeof value === 'object' && prop in value) {\r\n//         value = value[prop];\r\n//       } else {\r\n//         return fallback;\r\n//       }\r\n//     }\r\n    \r\n//     return value || fallback;\r\n//   };\r\n\r\n//   // Format date to be more readable\r\n//   const formatDate = (dateString) => {\r\n//     if (!dateString) return '';\r\n//     const date = new Date(dateString);\r\n//     return date.toLocaleDateString('en-US', { \r\n//       weekday: 'short', \r\n//       month: 'short', \r\n//       day: 'numeric', \r\n//       year: 'numeric' \r\n//     });\r\n//   };\r\n\r\n//   // Get options for the current destination\r\n//   const getOptionsForDestination = () => {\r\n//     return cityOptions[selectedDestination] || cityOptions[\"Default\"];\r\n//   };\r\n\r\n//   // Calculate total cost including food and attractions\r\n//   const calculateTotalCost = () => {\r\n//     let totalCost = 0;\r\n//     let hotelCost = 0;\r\n//     let transportCost = 0;\r\n//     let foodCost = 0;\r\n//     let attractionsCost = 0;\r\n    \r\n//     // Fixed costs for hotel and transport (per trip)\r\n//     if (tripDetails.hotel && tripDetails.hotel.price) {\r\n//       const price = parseFloat(tripDetails.hotel.price);\r\n//       if (!isNaN(price)) {\r\n//         hotelCost = price;\r\n//         totalCost += price;\r\n//       }\r\n//     }\r\n    \r\n//     if (tripDetails.transport && tripDetails.transport.price) {\r\n//       const price = parseFloat(tripDetails.transport.price);\r\n//       if (!isNaN(price)) {\r\n//         transportCost = price;\r\n//         totalCost += price;\r\n//       }\r\n//     }\r\n    \r\n//     // Assumed costs for food and attractions\r\n//     const LUNCH_COST = 1000; // PKR\r\n//     const DINNER_COST = 1500; // PKR\r\n//     const ATTRACTION_COST = 500; // PKR per person\r\n    \r\n//     // Calculate daily food and attraction costs\r\n//     Object.values(dayDetails).forEach(day => {\r\n//       // Add lunch cost if selected\r\n//       if (day.lunch) {\r\n//         const lunchFee = LUNCH_COST;\r\n//         foodCost += lunchFee;\r\n//         totalCost += lunchFee;\r\n//       }\r\n      \r\n//       // Add dinner cost if selected\r\n//       if (day.dinner) {\r\n//         const dinnerFee = DINNER_COST;\r\n//         foodCost += dinnerFee;\r\n//         totalCost += dinnerFee;\r\n//       }\r\n      \r\n//       // Add attractions cost if selected (per person)\r\n//       if (day.attraction) {\r\n//         const attractionFee = ATTRACTION_COST * selectedGuests;\r\n//         attractionsCost += attractionFee;\r\n//         totalCost += attractionFee;\r\n//       }\r\n//     });\r\n    \r\n//     return { totalCost, hotelCost, transportCost, foodCost, attractionsCost };\r\n//   };\r\n\r\n//   // Create an array of days for the trip duration\r\n//   const getDaysArray = () => {\r\n//     const days = [];\r\n//     for (let i = 0; i < numberOfDays; i++) {\r\n//       const dayNumber = i + 1;\r\n//       const dayDate = new Date(selectedStartDate);\r\n//       dayDate.setDate(dayDate.getDate() + i);\r\n//       days.push({ dayNumber, dayDate });\r\n//     }\r\n//     return days;\r\n//   };\r\n\r\n//   // Build itinerary day details for checkout\r\n//   const buildItineraryDays = () => {\r\n//     return getDaysArray().map(({ dayNumber }) => {\r\n//       const details = dayDetails[dayNumber] || {};\r\n//       const dayTitle = `Day ${dayNumber}: ${getPropertyValue(tripDetails.transport, 'type', 'Trip')} + Hotel`;\r\n      \r\n//       // Calculate day cost\r\n//       let dayCost = 0;\r\n      \r\n//       // Add hotel cost (divided by number of days)\r\n//       if (tripDetails.hotel && tripDetails.hotel.price) {\r\n//         const hotelPrice = parseFloat(tripDetails.hotel.price);\r\n//         if (!isNaN(hotelPrice)) {\r\n//           dayCost += hotelPrice / numberOfDays;\r\n//         }\r\n//       }\r\n      \r\n//       // Add transport cost (divided by number of days)\r\n//       if (tripDetails.transport && tripDetails.transport.price) {\r\n//         const transportPrice = parseFloat(tripDetails.transport.price);\r\n//         if (!isNaN(transportPrice)) {\r\n//           dayCost += transportPrice / numberOfDays;\r\n//         }\r\n//       }\r\n      \r\n//       // Add food and attraction costs\r\n//       if (details.lunch) dayCost += 1000; // LUNCH_COST\r\n//       if (details.dinner) dayCost += 1500; // DINNER_COST\r\n//       if (details.attraction) dayCost += 500 * selectedGuests; // ATTRACTION_COST * guests\r\n      \r\n//       return {\r\n//         dayNumber,\r\n//         title: dayTitle,\r\n//         transportMode: getPropertyValue(tripDetails.transport, 'type', 'Transport'),\r\n//         hotel: getPropertyValue(tripDetails.hotel, 'name', 'Hotel'),\r\n//         lunch: details.lunch || null,\r\n//         dinner: details.dinner || null,\r\n//         attraction: details.attraction || null,\r\n//         totalCost: Math.round(dayCost) // Round to nearest integer\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   // Handle proceed to checkout\r\n//   const handleProceedToCheckout = () => {\r\n//     if (!tripStorageKey) {\r\n//       alert(\"Missing trip details. Please fill all required fields.\");\r\n//       return;\r\n//     }\r\n    \r\n//     const { totalCost } = calculateTotalCost();\r\n    \r\n//     // Create trip data object for checkout\r\n//     const tripData = {\r\n//       summary: {\r\n//         from: selectedStartingPoint,\r\n//         to: selectedDestination,\r\n//         startDate: selectedStartDate,\r\n//         endDate: selectedEndDate,\r\n//         guests: selectedGuests,\r\n//         duration: numberOfDays\r\n//       },\r\n//       days: buildItineraryDays(),\r\n//       discountPercentage: 0, // Default no discount, can be calculated based on user points\r\n//       totalCost\r\n//     };\r\n    \r\n//     // Save trip data to localStorage for checkout page\r\n//     localStorage.setItem('tripCheckoutData', JSON.stringify(tripData));\r\n    \r\n//     // Store the current trip key so checkout knows which trip this is\r\n//     localStorage.setItem('currentTripKey', tripStorageKey);\r\n    \r\n//     // Navigate to checkout page\r\n//     navigate('/checkout');\r\n//   };\r\n\r\n//   // Determine if user has selected required trip elements\r\n//   const isTripComplete = tripDetails.hotel && tripDetails.transport && numberOfDays > 0;\r\n\r\n//   // Translate guest number to budget type for display\r\n//   const getBudgetType = (guests) => {\r\n//     switch(guests) {\r\n//       case 1: return \"Economic\";\r\n//       case 2: return \"Normal\";\r\n//       case 3: return \"Luxury\";\r\n//       default: return \"N/A\";\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"customization-container\">\r\n//       <Navbar />\r\n//       <div className=\"content-wrapper\">\r\n//         <h2 className=\"customization-title\">Your Trip Details</h2>\r\n        \r\n//         {/* Trip Summary Section */}\r\n//         <div className=\"trip-summary\">\r\n//           <h3>Trip Summary</h3>\r\n//           <div className=\"summary-details\">\r\n//             <div className=\"summary-col\">\r\n//               <p><span>From:</span> {selectedStartingPoint}</p>\r\n//               <p><span>To:</span> {selectedDestination}</p>\r\n//               <p>\r\n//                 <span>Budget: </span> \r\n//                 {selectedGuests === 1 ? \"Economic\" : selectedGuests === 2 ? \"Normal\" : selectedGuests === 3 ? \"Luxury\" : \"N/A\"}\r\n//               </p>\r\n//             </div>\r\n//             <div className=\"summary-col\">\r\n//               <p><span>Start:</span> {formatDate(selectedStartDate)}</p>\r\n//               <p><span>End:</span> {formatDate(selectedEndDate)}</p>\r\n//               <p><span>Duration:</span> {numberOfDays} {numberOfDays === 1 ? 'Day' : 'Days'}</p>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         {/* Trip-level Accommodation & Transport */}\r\n//         <div className=\"trip-accommodations\">\r\n//           <div className=\"section-header\">\r\n//             <h3>Accommodation & Transport</h3>\r\n//             <button className=\"edit-button\" onClick={handleEditTripDetails}>\r\n//               <i className=\"fas fa-edit\"></i> Edit\r\n//             </button>\r\n//           </div>\r\n          \r\n//           <div className=\"trip-details-container\">\r\n//             <div className=\"trip-detail-card\">\r\n//               <div className=\"detail-icon\">\r\n//                 <i className=\"fas fa-hotel\"></i>\r\n//               </div>\r\n//               <div className=\"detail-content\">\r\n//                 <h4>Hotel</h4>\r\n//                 {tripDetails.hotel ? (\r\n//                   <div className=\"detail-info\">\r\n//                     <p className=\"detail-name\">{getPropertyValue(tripDetails.hotel, 'name')}</p>\r\n//                     <p className=\"detail-price\">{getPropertyValue(tripDetails.hotel, 'price')} PKR</p>\r\n//                     <p className=\"detail-rating\">Rating: {getPropertyValue(tripDetails.hotel, 'rating')}/5</p>\r\n//                     {tripDetails.hotel.address && (\r\n//                       <p className=\"detail-address\">{tripDetails.hotel.address}</p>\r\n//                     )}\r\n//                   </div>\r\n//                 ) : (\r\n//                   <div className=\"no-detail-info\">\r\n//                     <p>No hotel selected</p>\r\n//                     <button className=\"small-add-button\" onClick={handleEditTripDetails}>\r\n//                       Add Hotel\r\n//                     </button>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"trip-detail-card\">\r\n//               <div className=\"detail-icon\">\r\n//                 <i className=\"fas fa-bus\"></i>\r\n//               </div>\r\n//               <div className=\"detail-content\">\r\n//                 <h4>Transport</h4>\r\n//                 {tripDetails.transport ? (\r\n//                   <div className=\"detail-info\">\r\n//                     <p className=\"detail-type\">{getPropertyValue(tripDetails.transport, 'type', 'Vehicle')}</p>\r\n//                     <p className=\"detail-name\">{\r\n//                       getPropertyValue(tripDetails.transport, 'name') || \r\n//                       getPropertyValue(tripDetails.transport, 'car_name') || \r\n//                       getPropertyValue(tripDetails.transport, 'bus_name') || \r\n//                       getPropertyValue(tripDetails.transport, 'train_name')\r\n//                     }</p>\r\n//                     <p className=\"detail-price\">{getPropertyValue(tripDetails.transport, 'price')} PKR</p>\r\n//                     <p className=\"detail-time\">\r\n//                       {getPropertyValue(tripDetails.transport, 'departure_time')}\r\n//                       {tripDetails.transport.arrival_time && ` - ${tripDetails.transport.arrival_time}`}\r\n//                     </p>\r\n//                   </div>\r\n//                 ) : (\r\n//                   <div className=\"no-detail-info\">\r\n//                     <p>No transport selected</p>\r\n//                     <button className=\"small-add-button\" onClick={handleEditTripDetails}>\r\n//                       Add Transport\r\n//                     </button>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         {/* Day-by-Day Itinerary */}\r\n//         {numberOfDays > 0 && (\r\n//           <div className=\"days-section\">\r\n//             <h3>Day-by-Day Itinerary</h3>\r\n//             <div className=\"days-grid\">\r\n//               {getDaysArray().map(({ dayNumber, dayDate }, index) => {\r\n//                 const details = dayDetails[dayNumber] || {};\r\n//                 const options = getOptionsForDestination();\r\n                \r\n//                 return (\r\n//                   <div key={index} className=\"day-card\">\r\n//                     <div className=\"day-header\">\r\n//                       <div className=\"day-number\">DAY {dayNumber}</div>\r\n//                       <div className=\"day-date\">{formatDate(dayDate)}</div>\r\n//                     </div>\r\n                    \r\n//                     <div className=\"food-attractions-section\">\r\n//                       <div className=\"select-container\">\r\n//                         <label htmlFor={`lunch-day-${dayNumber}`}>Lunch:</label>\r\n//                         <select\r\n//                           id={`lunch-day-${dayNumber}`}\r\n//                           value={details.lunch || ''}\r\n//                           onChange={(e) => handleDetailChange(dayNumber, 'lunch', e.target.value)}\r\n//                           className=\"custom-select\"\r\n//                         >\r\n//                           <option value=\"\">Select Lunch Place</option>\r\n//                           {options.lunch.map((place, i) => (\r\n//                             <option key={i} value={place}>{place}</option>\r\n//                           ))}\r\n//                         </select>\r\n//                       </div>\r\n                      \r\n//                       <div className=\"select-container\">\r\n//                         <label htmlFor={`dinner-day-${dayNumber}`}>Dinner:</label>\r\n//                         <select\r\n//                           id={`dinner-day-${dayNumber}`}\r\n//                           value={details.dinner || ''}\r\n//                           onChange={(e) => handleDetailChange(dayNumber, 'dinner', e.target.value)}\r\n//                           className=\"custom-select\"\r\n//                         >\r\n//                           <option value=\"\">Select Dinner Place</option>\r\n//                           {options.dinner.map((place, i) => (\r\n//                             <option key={i} value={place}>{place}</option>\r\n//                           ))}\r\n//                         </select>\r\n//                       </div>\r\n                      \r\n//                       <div className=\"select-container\">\r\n//                         <label htmlFor={`attraction-day-${dayNumber}`}>Attraction:</label>\r\n//                         <select\r\n//                           id={`attraction-day-${dayNumber}`}\r\n//                           value={details.attraction || ''}\r\n//                           onChange={(e) => handleDetailChange(dayNumber, 'attraction', e.target.value)}\r\n//                           className=\"custom-select\"\r\n//                         >\r\n//                           <option value=\"\">Select Attraction</option>\r\n//                           {options.attractions.map((place, i) => (\r\n//                             <option key={i} value={place}>{place}</option>\r\n//                           ))}\r\n//                         </select>\r\n//                       </div>\r\n                      \r\n//                       <div className=\"selected-options\">\r\n//                         {details.lunch && (\r\n//                           <div className=\"selected-item\">\r\n//                             <span className=\"icon lunch-icon\"><i className=\"fas fa-utensils\"></i></span>\r\n//                             <span className=\"item-name\">{details.lunch}</span>\r\n//                           </div>\r\n//                         )}\r\n                        \r\n//                         {details.dinner && (\r\n//                           <div className=\"selected-item\">\r\n//                             <span className=\"icon dinner-icon\"><i className=\"fas fa-moon\"></i></span>\r\n//                             <span className=\"item-name\">{details.dinner}</span>\r\n//                           </div>\r\n//                         )}\r\n                        \r\n//                         {details.attraction && (\r\n//                           <div className=\"selected-item\">\r\n//                             <span className=\"icon attraction-icon\"><i className=\"fas fa-map-marker-alt\"></i></span>\r\n//                             <span className=\"item-name\">{details.attraction}</span>\r\n//                           </div>\r\n//                         )}\r\n//                       </div>\r\n//                     </div>\r\n//                   </div>\r\n//                 );\r\n//               })}\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n        \r\n//         {/* Calculate and display total trip cost */}\r\n//         {(tripDetails.hotel || tripDetails.transport || Object.keys(dayDetails).length > 0) && (\r\n//           <div className=\"trip-cost-summary\">\r\n//             <h3>Total Trip Cost</h3>\r\n//             {(() => {\r\n//               const { totalCost, hotelCost, transportCost, foodCost, attractionsCost } = calculateTotalCost();\r\n              \r\n//               return (\r\n//                 <div className=\"cost-breakdown\">\r\n//                   <div className=\"cost-grid\">\r\n//                     <div className=\"cost-item\">\r\n//                       <span className=\"cost-label\">Hotel:</span>\r\n//                       <span className=\"cost-value\">{hotelCost.toLocaleString()} PKR</span>\r\n//                     </div>\r\n//                     <div className=\"cost-item\">\r\n//                       <span className=\"cost-label\">Transport:</span>\r\n//                       <span className=\"cost-value\">{transportCost.toLocaleString()} PKR</span>\r\n//                     </div>\r\n//                     <div className=\"cost-item\">\r\n//                       <span className=\"cost-label\">Food:</span>\r\n//                       <span className=\"cost-value\">{foodCost.toLocaleString()} PKR</span>\r\n//                     </div>\r\n//                     <div className=\"cost-item\">\r\n//                       <span className=\"cost-label\">Attractions:</span>\r\n//                       <span className=\"cost-value\">{attractionsCost.toLocaleString()} PKR</span>\r\n//                     </div>\r\n//                   </div>\r\n//                   <div className=\"total-cost\">\r\n//                     <span>Total Cost:</span> {totalCost.toLocaleString()} PKR\r\n//                   </div>\r\n//                 </div>\r\n//               );\r\n//             })()}\r\n//           </div>\r\n//         )}\r\n        \r\n//         <div className=\"action-buttons\">\r\n//           <button className=\"back-button\" onClick={() => navigate(-1)}>\r\n//             Back\r\n//           </button>\r\n//           <button \r\n//             className=\"save-button\"\r\n//             onClick={handleProceedToCheckout}\r\n//             disabled={!tripDetails.hotel || !tripDetails.transport || numberOfDays === 0}\r\n//           >\r\n//             Pay\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n\r\n// };\r\n\r\n// export default UserCustomization;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}