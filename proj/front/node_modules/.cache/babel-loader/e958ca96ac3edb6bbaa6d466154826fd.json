{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { Link, useNavigate, useLocation } from \"react-router-dom\";\n// import Navbar from \"../NavBar/Navbar\";\n// import transportImg from \"./images/transport.png\";\n// import hotelImg from \"./images/hotel.jpg\";\n// import airbnbImg from \"./images/airbnb.jpg\";\n// import \"./BookingOptions.css\";\n// import { FaEdit } from \"react-icons/fa\";\n\n// const BookingOptions = () => {\n//   // State for selected hotel and transport (load from localStorage)\n//   const [selectedHotel, setSelectedHotel] = useState(\n//     JSON.parse(localStorage.getItem(\"selectedHotel\")) || null\n//   );\n//   const [selectedTransport, setSelectedTransport] = useState(\n//     JSON.parse(localStorage.getItem(\"selectedTransport\")) || null\n//   );\n\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   const { tripDetails, dayIndex, dayData } = location.state || {};\n\n//   // Handle editing the hotel selection\n//   const handleEditHotel = () => {\n//     navigate(\"/BookHotel\");\n//   };\n\n//   // Confirm Booking and Send Data Back to UserCustomization\n//   const handleConfirmBooking = () => {\n//     const updatedDayData = {\n//       ...dayData,\n//       transport: selectedTransport,\n//       accommodation: selectedHotel,\n//       cost: calculateTotalPrice(),\n//     };\n\n//     const bookingData = {\n//       selectedHotel,\n//       selectedTransport,\n//       totalPrice: calculateTotalPrice(),\n//       tripDetails,\n//       dayIndex,\n//       updatedDayData,\n//     };\n\n//     // Navigate back to UserCustomization with all booking data\n//     navigate(\"/UserCustomization\", { state: { bookingData } });\n//   };\n\n//   // Update localStorage whenever hotel or transport is selected\n//   useEffect(() => {\n//     if (selectedHotel) {\n//       localStorage.setItem(\"selectedHotel\", JSON.stringify(selectedHotel));\n//     }\n//     if (selectedTransport) {\n//       localStorage.setItem(\"selectedTransport\", JSON.stringify(selectedTransport));\n//     }\n//   }, [selectedHotel, selectedTransport]);\n\n//   // Calculate total price\n//   const calculateTotalPrice = () => {\n//     let totalPrice = 0;\n//     if (selectedHotel?.price) totalPrice += parseFloat(selectedHotel.price) || 0;\n//     if (selectedTransport?.price) totalPrice += parseFloat(selectedTransport.price) || 0;\n//     return totalPrice;\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <Navbar />\n\n//       {/* Back Arrow Icon */}\n//       <div className=\"back-arrow\" onClick={() => navigate(\"/UserCustomization\")}>\n//         ←\n//       </div>\n\n//       {/* Centered Heading */}\n//       <div className=\"center-heading\">\n//       </div>\n\n//       {/* Booking Options */}\n//       <div className=\"booking-options\">\n//         <div className=\"option-card\">\n//           <h3>1. Customize Transport</h3>\n//           <img src={transportImg} alt=\"Transport\" />\n//           {selectedTransport ? (\n//             <div className=\"booked-transport\">\n//               <p><strong>Transport Selected:</strong> {selectedTransport.name || selectedTransport.car_name || selectedTransport.bus_name || selectedTransport.train_name}</p>\n//               <p>Departure: {selectedTransport.departure_time || \"N/A\"}</p>\n//               <p>Price: {selectedTransport.price ? `${selectedTransport.price} PKR` : \"Price Not Available\"}</p>\n//               <button className=\"edit-btn\" onClick={() => navigate(\"/BookTransport\")}>\n//                 <FaEdit /> Edit\n//               </button>\n//             </div>\n//           ) : (\n//             <Link to=\"/BookTransport\" className=\"explore-btn\">\n//               Explore\n//             </Link>\n//           )}\n//         </div>\n\n//         <div className=\"option-card\">\n//           <h3>2. Book a Hotel</h3>\n//           <img src={hotelImg} alt=\"Hotel\" />\n//           {selectedHotel ? (\n//             <div className=\"booked-hotel\">\n//               <p><strong>Hotel Booked:</strong> {selectedHotel.name}</p>\n//               <p>Rating: {selectedHotel.rating} / 5</p>\n//               <p>Price: {selectedHotel.price} Rs per night</p>\n//               <p>Status: <span style={{ color: \"green\" }}>✔</span> Booked</p>\n//               <button className=\"edit-btn\" onClick={handleEditHotel}>\n//                 <FaEdit /> Edit\n//               </button>\n//             </div>\n//           ) : (\n//             <Link to=\"/BookHotel\" className=\"explore-btn\">\n//               Explore\n//             </Link>\n//           )}\n//         </div>\n\n//         <div className=\"option-card\">\n//           <h3>3. Book an Airbnb</h3>\n//           <img src={airbnbImg} alt=\"Airbnb\" />\n//           <Link to=\"/BookAirbnb\" className=\"explore-btn\">\n//             Explore\n//           </Link>\n//         </div>\n//       </div>\n\n//       {/* Confirm Button */}\n//       <div className=\"confirm-btn-container\">\n//         <button className=\"confirm-btn\" onClick={handleConfirmBooking}>\n//           Confirm: {calculateTotalPrice()} PKR ➔\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default BookingOptions;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useNavigate, useLocation } from \"react-router-dom\";\n// import Navbar from \"../NavBar/Navbar\";\n// import transportImg from \"./images/transport.png\";\n// import hotelImg from \"./images/hotel.jpg\";\n// import airbnbImg from \"./images/airbnb.jpg\";\n// import \"./BookingOptions.css\";\n// import { FaEdit } from \"react-icons/fa\";\n\n// const BookingOptions = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   const { customizationData, currentDetails } = location.state || {};\n\n//   // Create a unique trip ID based on trip details to use as storage key\n//   // This ensures different trips have separate storage\n//   const getTripStorageKey = () => {\n//     if (!customizationData) return null;\n\n//     const { startingPoint, destination, startDate, endDate, guests } = customizationData;\n//     if (!startingPoint || !destination || !startDate || !endDate) return null;\n\n//     return `trip_${startingPoint}_${destination}_${startDate}_${endDate}_${guests}`;\n//   };\n\n//   const tripStorageKey = getTripStorageKey();\n\n//   // Initialize state with data from location state or trip-specific localStorage\n//   const [selectedHotel, setSelectedHotel] = useState(() => {\n//     // First try to get from currentDetails passed in navigation\n//     if (currentDetails && currentDetails.hotel) {\n//       return currentDetails.hotel;\n//     }\n\n//     // If not found and we have a valid tripStorageKey, try to get from localStorage\n//     if (tripStorageKey) {\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\n//       if (savedTripDetails) {\n//         try {\n//           const parsedDetails = JSON.parse(savedTripDetails);\n//           return parsedDetails.hotel || null;\n//         } catch (error) {\n//           console.error(\"Error parsing trip details from localStorage:\", error);\n//           return null;\n//         }\n//       }\n//     }\n\n//     return null;\n//   });\n\n//   const [selectedTransport, setSelectedTransport] = useState(() => {\n//     // First try to get from currentDetails passed in navigation\n//     if (currentDetails && currentDetails.transport) {\n//       return currentDetails.transport;\n//     }\n\n//     // If not found and we have a valid tripStorageKey, try to get from localStorage\n//     if (tripStorageKey) {\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\n//       if (savedTripDetails) {\n//         try {\n//           const parsedDetails = JSON.parse(savedTripDetails);\n//           return parsedDetails.transport || null;\n//         } catch (error) {\n//           console.error(\"Error parsing trip details from localStorage:\", error);\n//           return null;\n//         }\n//       }\n//     }\n\n//     return null;\n//   });\n\n//   // Calculate total price\n//   const calculateTotalPrice = () => {\n//     let totalPrice = 0;\n//     if (selectedHotel?.price) totalPrice += parseFloat(selectedHotel.price) || 0;\n//     if (selectedTransport?.price) totalPrice += parseFloat(selectedTransport.price) || 0;\n//     return totalPrice;\n//   };\n\n//   // Handle editing the hotel selection\n//   const handleEditHotel = () => {\n//     // Save current trip key to localStorage so hotel booking page knows which trip we're working with\n//     if (tripStorageKey) {\n//       localStorage.setItem('currentTripKey', tripStorageKey);\n//     }\n//     navigate(\"/BookHotel\", { \n//       state: { \n//         customizationData,\n//         returnToOptions: true\n//       } \n//     });\n//   };\n\n//   // Handle editing the transport selection\n//   const handleEditTransport = () => {\n//     // Save current trip key to localStorage so transport booking page knows which trip we're working with\n//     if (tripStorageKey) {\n//       localStorage.setItem('currentTripKey', tripStorageKey);\n//     }\n//     navigate(\"/BookTransport\", { \n//       state: { \n//         customizationData,\n//         returnToOptions: true\n//       } \n//     });\n//   };\n\n//   // When a user returns from BookHotel or BookTransport pages, update local state\n//   useEffect(() => {\n//     if (tripStorageKey) {\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\n//       if (savedTripDetails) {\n//         try {\n//           const parsedDetails = JSON.parse(savedTripDetails);\n//           // Only update if the data exists to avoid overwriting with null\n//           if (parsedDetails.hotel) setSelectedHotel(parsedDetails.hotel);\n//           if (parsedDetails.transport) setSelectedTransport(parsedDetails.transport);\n//         } catch (error) {\n//           console.error(\"Error parsing trip details from localStorage:\", error);\n//         }\n//       }\n//     }\n//   }, [tripStorageKey]);\n\n//   // Save selections to trip-specific localStorage\n//   useEffect(() => {\n//     if (tripStorageKey) {\n//       // Get existing trip details first\n//       let tripDetails = { hotel: null, transport: null };\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\n//       if (savedTripDetails) {\n//         try {\n//           tripDetails = JSON.parse(savedTripDetails);\n//         } catch (error) {\n//           console.error(\"Error parsing trip details:\", error);\n//         }\n//       }\n\n//       // Update with new selections\n//       const updatedDetails = {\n//         ...tripDetails,\n//         hotel: selectedHotel,\n//         transport: selectedTransport\n//       };\n\n//       // Save back to localStorage\n//       localStorage.setItem(`tripDetails_${tripStorageKey}`, JSON.stringify(updatedDetails));\n//     }\n//   }, [selectedHotel, selectedTransport, tripStorageKey]);\n\n//   // Confirm Booking and Send Data Back to UserCustomization\n//   const handleConfirmBooking = () => {\n//     // Create booking data to pass back to UserCustomization\n//     const bookingData = {\n//       selectedHotel,\n//       selectedTransport,\n//       totalPrice: calculateTotalPrice()\n//     };\n\n//     // Navigate back to UserCustomization with all booking data\n//     navigate(\"/UserCustomization\", { \n//       state: { \n//         customizationData, \n//         bookingData \n//       } \n//     });\n//   };\n\n//   // If we don't have customization data, redirect to the home page\n//   useEffect(() => {\n//     if (!customizationData && !tripStorageKey) {\n//       navigate(\"/\");\n//     }\n//   }, [customizationData, tripStorageKey, navigate]);\n\n//   return (\n//     <div className=\"container\">\n//       <Navbar />\n\n//       {/* Back Arrow Icon */}\n//       <div className=\"back-arrow\" onClick={() => navigate(\"/UserCustomization\", { state: { customizationData } })}>\n//         ←\n//       </div>\n\n//       {/* Centered Heading */}\n//       <div className=\"center-heading\">\n//         <h2>Booking Options</h2>\n//         {tripStorageKey && (\n//           <p className=\"trip-id-info\">\n//             Trip from {customizationData?.startingPoint || \"\"} to {customizationData?.destination || \"\"}\n//           </p>\n//         )}\n//       </div>\n\n//       {/* Booking Options */}\n//       <div className=\"booking-options\">\n//         <div className=\"option-card\">\n//           <h3>1. Customize Transport</h3>\n//           <img src={transportImg} alt=\"Transport\" />\n//           {selectedTransport ? (\n//             <div className=\"booked-transport\">\n//               <p><strong>Transport Selected:</strong> {selectedTransport.name || selectedTransport.car_name || selectedTransport.bus_name || selectedTransport.train_name}</p>\n//               <p>Type: {selectedTransport.type || \"N/A\"}</p>\n//               <p>Departure: {selectedTransport.departure_time || \"N/A\"}</p>\n//               <p>Price: {selectedTransport.price ? `${selectedTransport.price} PKR` : \"Price Not Available\"}</p>\n//               <button className=\"edit-btn\" onClick={handleEditTransport}>\n//                 <FaEdit /> Edit\n//               </button>\n//             </div>\n//           ) : (\n//             <Link \n//               to=\"/BookTransport\" \n//               state={{ customizationData, returnToOptions: true }}\n//               className=\"explore-btn\"\n//               onClick={() => {\n//                 if (tripStorageKey) localStorage.setItem('currentTripKey', tripStorageKey);\n//               }}\n//             >\n//               Explore\n//             </Link>\n//           )}\n//         </div>\n\n//         <div className=\"option-card\">\n//           <h3>2. Book a Hotel</h3>\n//           <img src={hotelImg} alt=\"Hotel\" />\n//           {selectedHotel ? (\n//             <div className=\"booked-hotel\">\n//               <p><strong>Hotel Booked:</strong> {selectedHotel.name}</p>\n//               <p>Rating: {selectedHotel.rating} / 5</p>\n//               <p>Price: {selectedHotel.price} PKR per night</p>\n//               <p>Status: <span style={{ color: \"green\" }}>✔</span> Selected</p>\n//               <button className=\"edit-btn\" onClick={handleEditHotel}>\n//                 <FaEdit /> Edit\n//               </button>\n//             </div>\n//           ) : (\n//             <Link \n//               to=\"/BookHotel\" \n//               state={{ customizationData, returnToOptions: true }}\n//               className=\"explore-btn\"\n//               onClick={() => {\n//                 if (tripStorageKey) localStorage.setItem('currentTripKey', tripStorageKey);\n//               }}\n//             >\n//               Explore\n//             </Link>\n//           )}\n//         </div>\n\n//         <div className=\"option-card\">\n//           <h3>3. Book an Airbnb</h3>\n//           <img src={airbnbImg} alt=\"Airbnb\" />\n//           <Link \n//             to=\"/BookAirbnb\" \n//             state={{ customizationData, returnToOptions: true }}\n//             className=\"explore-btn\" \n//             onClick={() => {\n//               if (tripStorageKey) localStorage.setItem('currentTripKey', tripStorageKey);\n//             }}\n//           >\n//             Explore\n//           </Link>\n//         </div>\n//       </div>\n\n//       {/* Confirm Button */}\n//       <div className=\"confirm-btn-container\">\n//         <button \n//           className=\"confirm-btn\" \n//           onClick={handleConfirmBooking}\n//           disabled={!selectedHotel && !selectedTransport}\n//         >\n//           Confirm: {calculateTotalPrice().toLocaleString()} PKR ➔\n//         </button>\n//       </div>\n\n//       {(!selectedHotel && !selectedTransport) && (\n//         <p className=\"selection-note\">Please select at least one option before confirming.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default BookingOptions;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useNavigate, useLocation } from \"react-router-dom\";\n// import Navbar from \"../NavBar/Navbar\";\n// import transportImg from \"./images/transport.png\";\n// import hotelImg from \"./images/hotel.jpg\";\n// import airbnbImg from \"./images/airbnb.jpg\";\n// import \"./BookingOptions.css\";\n// import { FaEdit, FaArrowLeft, FaCheck, FaLongArrowAltRight } from \"react-icons/fa\";\n// import { IoMdPricetag } from \"react-icons/io\";\n// import { BiSolidHotel, BiSolidCar, BiSolidHome } from \"react-icons/bi\";\n\n// const BookingOptions = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   const { customizationData, currentDetails } = location.state || {};\n\n//   // Loading state for better UX\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   // Create a unique trip ID based on trip details to use as storage key\n//   const getTripStorageKey = () => {\n//     if (!customizationData) return null;\n\n//     const { startingPoint, destination, startDate, endDate, guests } = customizationData;\n//     if (!startingPoint || !destination || !startDate || !endDate) return null;\n\n//     return `trip_${startingPoint}_${destination}_${startDate}_${endDate}_${guests}`;\n//   };\n\n//   const tripStorageKey = getTripStorageKey();\n\n//   // Initialize state with data from location state or trip-specific localStorage\n//   const [selectedHotel, setSelectedHotel] = useState(null);\n//   const [selectedTransport, setSelectedTransport] = useState(null);\n\n//   // Calculate total price\n//   const calculateTotalPrice = () => {\n//     let totalPrice = 0;\n//     if (selectedHotel?.price) totalPrice += parseFloat(selectedHotel.price) || 0;\n//     if (selectedTransport?.price) totalPrice += parseFloat(selectedTransport.price) || 0;\n//     return totalPrice;\n//   };\n\n//   // Format price with commas for thousands\n//   const formatPrice = (price) => {\n//     return parseFloat(price).toLocaleString();\n//   };\n\n//   // Handle editing the hotel selection\n//   const handleEditHotel = () => {\n//     if (tripStorageKey) {\n//       localStorage.setItem('currentTripKey', tripStorageKey);\n//     }\n//     navigate(\"/BookHotel\", { \n//       state: { \n//         customizationData,\n//         returnToOptions: true\n//       } \n//     });\n//   };\n\n//   // Handle editing the transport selection\n//   const handleEditTransport = () => {\n//     if (tripStorageKey) {\n//       localStorage.setItem('currentTripKey', tripStorageKey);\n//     }\n//     navigate(\"/BookTransport\", { \n//       state: { \n//         customizationData,\n//         returnToOptions: true\n//       } \n//     });\n//   };\n\n//   // Initialize data\n//   useEffect(() => {\n//     setIsLoading(true);\n\n//     // Function to load data\n//     const loadData = async () => {\n//       let hotelData = null;\n//       let transportData = null;\n\n//       // First try to get from currentDetails passed in navigation\n//       if (currentDetails) {\n//         hotelData = currentDetails.hotel || null;\n//         transportData = currentDetails.transport || null;\n//       }\n\n//       // If not found and we have a valid tripStorageKey, try to get from localStorage\n//       if (!hotelData || !transportData) {\n//         if (tripStorageKey) {\n//           const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\n//           if (savedTripDetails) {\n//             try {\n//               const parsedDetails = JSON.parse(savedTripDetails);\n//               if (!hotelData) hotelData = parsedDetails.hotel || null;\n//               if (!transportData) transportData = parsedDetails.transport || null;\n//             } catch (error) {\n//               console.error(\"Error parsing trip details from localStorage:\", error);\n//             }\n//           }\n//         }\n//       }\n\n//       // Update state with loaded data\n//       setSelectedHotel(hotelData);\n//       setSelectedTransport(transportData);\n\n//       // Simulate a slight delay for better UX\n//       setTimeout(() => {\n//         setIsLoading(false);\n//       }, 500);\n//     };\n\n//     loadData();\n//   }, [currentDetails, tripStorageKey]);\n\n//   // When a user returns from BookHotel or BookTransport pages, update local state\n//   useEffect(() => {\n//     if (tripStorageKey) {\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\n//       if (savedTripDetails) {\n//         try {\n//           const parsedDetails = JSON.parse(savedTripDetails);\n//           // Only update if the data exists to avoid overwriting with null\n//           if (parsedDetails.hotel) setSelectedHotel(parsedDetails.hotel);\n//           if (parsedDetails.transport) setSelectedTransport(parsedDetails.transport);\n//         } catch (error) {\n//           console.error(\"Error parsing trip details from localStorage:\", error);\n//         }\n//       }\n//     }\n//   }, [tripStorageKey]);\n\n//   // Save selections to trip-specific localStorage\n//   useEffect(() => {\n//     if (tripStorageKey && (!isLoading)) {\n//       // Get existing trip details first\n//       let tripDetails = { hotel: null, transport: null };\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\n//       if (savedTripDetails) {\n//         try {\n//           tripDetails = JSON.parse(savedTripDetails);\n//         } catch (error) {\n//           console.error(\"Error parsing trip details:\", error);\n//         }\n//       }\n\n//       // Update with new selections\n//       const updatedDetails = {\n//         ...tripDetails,\n//         hotel: selectedHotel,\n//         transport: selectedTransport\n//       };\n\n//       // Save back to localStorage\n//       localStorage.setItem(`tripDetails_${tripStorageKey}`, JSON.stringify(updatedDetails));\n//     }\n//   }, [selectedHotel, selectedTransport, tripStorageKey, isLoading]);\n\n// // Confirm Booking and Send Data Back to UserCustomization\n// const handleConfirmBooking = () => {\n//   // Create booking data to pass back to UserCustomization\n//   const bookingData = {\n//     selectedHotel,\n//     selectedTransport,\n//     totalPrice: calculateTotalPrice()\n//   };\n\n//   // Show confirmation animation\n//   setIsConfirming(true);\n\n//   // Add slight delay for better UX before navigating\n//   setTimeout(() => {\n//     // Navigate back to UserCustomization with all booking data\n//     navigate(\"/UserCustomization\", { \n//       state: { \n//         customizationData, \n//         bookingData \n//       } \n//     });\n//   }, 800);\n// };\n\n// // State for confirmation animation\n// const [isConfirming, setIsConfirming] = useState(false);\n\n// // If we don't have customization data, redirect to the home page\n// // useEffect(() => {\n// //   if (!customizationData && !tripStorageKey) {\n// //     navigate(\"/\");\n// //   }\n// // }, [customizationData, tripStorageKey, navigate]);\n\n// // Get transport name from selected transport object\n// const getTransportName = (transport) => {\n//   if (!transport) return '';\n//   return transport.name || \n//          transport.car_name || \n//          transport.bus_name || \n//          transport.train_name || \n//          'Transport';\n// };\n\n// // Get transport type or default text\n// const getTransportType = (transport) => {\n//   if (!transport) return 'N/A';\n//   return transport.type || 'Standard';\n// };\n\n// // Check if at least one option is selected\n// const hasSelection = selectedHotel || selectedTransport;\n\n// return (\n//   <div className=\"container\">\n//     <Navbar />\n\n//     {/* Header Section */}\n//     <div className=\"header-section\">\n//       {/* Back Arrow Icon */}\n//       <div \n//         className=\"back-arrow\" \n//         onClick={() => navigate(\"/UserCustomization\", { state: { customizationData } })}\n//         aria-label=\"Go back\"\n//       >\n//         <FaArrowLeft />\n//       </div>\n\n//       {/* Centered Heading */}\n//       <div className=\"center-heading\">\n//         <h2>Booking Options</h2>\n//         {customizationData && (\n//           <p className=\"trip-id-info\">\n//             {customizationData.startingPoint} → {customizationData.destination}\n//             {customizationData.startDate && ` • ${customizationData.startDate}`}\n//           </p>\n//         )}\n//       </div>\n//     </div>\n\n//     {/* Booking Options */}\n//     <div className=\"booking-options\">\n//       <div className=\"option-card\">\n//         <div className=\"option-card-header\">\n//           <h3><span>1</span> Customize Transport</h3>\n//         </div>\n//         <img src={transportImg} alt=\"Transport\" className=\"option-card-image\" />\n//         <div className=\"option-card-content\">\n//           {selectedTransport ? (\n//             <div className=\"booking-details\">\n//               <p><strong>Transport:</strong> {getTransportName(selectedTransport)}</p>\n//               <p><strong>Type:</strong> {getTransportType(selectedTransport)}</p>\n//               <p><strong>Departure:</strong> {selectedTransport.departure_time || \"Flexible\"}</p>\n//               <p>\n//                 <strong>Price:</strong> \n//                 <span className=\"price-tag\">\n//                   <IoMdPricetag /> {selectedTransport.price ? formatPrice(selectedTransport.price) : \"N/A\"} PKR\n//                 </span>\n//               </p>\n//               <p>\n//                 <strong>Status:</strong>\n//                 <span className=\"status\">\n//                   <FaCheck className=\"status-icon\" /> Selected\n//                 </span>\n//               </p>\n//               <div className=\"card-actions\">\n//                 <button className=\"edit-btn\" onClick={handleEditTransport}>\n//                   <FaEdit /> Edit Selection\n//                 </button>\n//               </div>\n//             </div>\n//           ) : (\n//             <>\n//               <p>Choose your preferred mode of transportation for your journey.</p>\n//               <div className=\"card-actions\">\n//                 <Link \n//                   to=\"/BookTransport\" \n//                   state={{ customizationData, returnToOptions: true }}\n//                   className=\"explore-btn\"\n//                   onClick={() => {\n//                     if (tripStorageKey) localStorage.setItem('currentTripKey', tripStorageKey);\n//                   }}\n//                 >\n//                   <BiSolidCar /> Explore Options\n//                 </Link>\n//               </div>\n//             </>\n//           )}\n//         </div>\n//       </div>\n\n//       <div className=\"option-card\">\n//         <div className=\"option-card-header\">\n//           <h3><span>2</span> Book a Hotel</h3>\n//         </div>\n//         <img src={hotelImg} alt=\"Hotel\" className=\"option-card-image\" />\n//         <div className=\"option-card-content\">\n//           {selectedHotel ? (\n//             <div className=\"booking-details\">\n//               <p><strong>Hotel:</strong> {selectedHotel.name}</p>\n//               <p><strong>Rating:</strong> {selectedHotel.rating} / 5</p>\n//               <p>\n//                 <strong>Price:</strong>\n//                 <span className=\"price-tag\">\n//                   <IoMdPricetag /> {formatPrice(selectedHotel.price)} PKR/night\n//                 </span>\n//               </p>\n//               <p>\n//                 <strong>Status:</strong>\n//                 <span className=\"status\">\n//                   <FaCheck className=\"status-icon\" /> Selected\n//                 </span>\n//               </p>\n//               <div className=\"card-actions\">\n//                 <button className=\"edit-btn\" onClick={handleEditHotel}>\n//                   <FaEdit /> Edit Selection\n//                 </button>\n//               </div>\n//             </div>\n//           ) : (\n//             <>\n//               <p>Find comfortable accommodations for your stay.</p>\n//               <div className=\"card-actions\">\n//                 <Link \n//                   to=\"/BookHotel\" \n//                   state={{ customizationData, returnToOptions: true }}\n//                   className=\"explore-btn\"\n//                   onClick={() => {\n//                     if (tripStorageKey) localStorage.setItem('currentTripKey', tripStorageKey);\n//                   }}\n//                 >\n//                   <BiSolidHotel /> Explore Options\n//                 </Link>\n//               </div>\n//             </>\n//           )}\n//         </div>\n//       </div>\n\n//       <div className=\"option-card\">\n//         <div className=\"option-card-header\">\n//           <h3><span>3</span> Book an Airbnb</h3>\n//         </div>\n//         <img src={airbnbImg} alt=\"Airbnb\" className=\"option-card-image\" />\n//         <div className=\"option-card-content\">\n//           <p>Discover unique stays and experiences with local hosts.</p>\n//           <div className=\"card-actions\">\n//             <Link \n//               to=\"/BookAirbnb\" \n//               state={{ customizationData, returnToOptions: true }}\n//               className=\"explore-btn\" \n//               onClick={() => {\n//                 if (tripStorageKey) localStorage.setItem('currentTripKey', tripStorageKey);\n//               }}\n//             >\n//               <BiSolidHome /> Explore Options\n//             </Link>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n\n//     {/* Confirmation Section */}\n//     <div className=\"confirm-btn-container\">\n//       {hasSelection && (\n//         <div className=\"confirmation-summary\">\n//           <h3>Summary</h3>\n//           <div className=\"summary-item\">\n//             <span>Transport:</span>\n//             <span>{selectedTransport ? `${getTransportName(selectedTransport)} (${formatPrice(selectedTransport.price)} PKR)` : 'Not selected'}</span>\n//           </div>\n//           <div className=\"summary-item\">\n//             <span>Accommodation:</span>\n//             <span>{selectedHotel ? `${selectedHotel.name} (${formatPrice(selectedHotel.price)} PKR/night)` : 'Not selected'}</span>\n//           </div>\n//           <div className=\"summary-item summary-total\">\n//             <span>Total:</span>\n//             <span>{formatPrice(calculateTotalPrice())} PKR</span>\n//           </div>\n//         </div>\n//       )}\n\n//       <button \n//         className={`confirm-btn ${isConfirming ? 'confirming' : ''}`}\n//         onClick={handleConfirmBooking}\n//         disabled={!hasSelection}\n//       >\n//         {isConfirming ? 'Processing...' : (\n//           <>\n//             Confirm Booking {formatPrice(calculateTotalPrice())} PKR <FaLongArrowAltRight />\n//           </>\n//         )}\n//       </button>\n\n//       {!hasSelection && (\n//         <p className=\"selection-note\">Please select at least one option before confirming.</p>\n//       )}\n//     </div>\n//   </div>\n// );\n// };\n\n// export default BookingOptions;","map":{"version":3,"names":[],"sources":["F:/Web/Voyaige/Voyaige/proj/front/src/components/Booking/BookingOptions.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { Link, useNavigate, useLocation } from \"react-router-dom\";\r\n// import Navbar from \"../NavBar/Navbar\";\r\n// import transportImg from \"./images/transport.png\";\r\n// import hotelImg from \"./images/hotel.jpg\";\r\n// import airbnbImg from \"./images/airbnb.jpg\";\r\n// import \"./BookingOptions.css\";\r\n// import { FaEdit } from \"react-icons/fa\";\r\n\r\n// const BookingOptions = () => {\r\n//   // State for selected hotel and transport (load from localStorage)\r\n//   const [selectedHotel, setSelectedHotel] = useState(\r\n//     JSON.parse(localStorage.getItem(\"selectedHotel\")) || null\r\n//   );\r\n//   const [selectedTransport, setSelectedTransport] = useState(\r\n//     JSON.parse(localStorage.getItem(\"selectedTransport\")) || null\r\n//   );\r\n\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n//   const { tripDetails, dayIndex, dayData } = location.state || {};\r\n\r\n//   // Handle editing the hotel selection\r\n//   const handleEditHotel = () => {\r\n//     navigate(\"/BookHotel\");\r\n//   };\r\n\r\n//   // Confirm Booking and Send Data Back to UserCustomization\r\n//   const handleConfirmBooking = () => {\r\n//     const updatedDayData = {\r\n//       ...dayData,\r\n//       transport: selectedTransport,\r\n//       accommodation: selectedHotel,\r\n//       cost: calculateTotalPrice(),\r\n//     };\r\n\r\n//     const bookingData = {\r\n//       selectedHotel,\r\n//       selectedTransport,\r\n//       totalPrice: calculateTotalPrice(),\r\n//       tripDetails,\r\n//       dayIndex,\r\n//       updatedDayData,\r\n//     };\r\n\r\n//     // Navigate back to UserCustomization with all booking data\r\n//     navigate(\"/UserCustomization\", { state: { bookingData } });\r\n//   };\r\n\r\n//   // Update localStorage whenever hotel or transport is selected\r\n//   useEffect(() => {\r\n//     if (selectedHotel) {\r\n//       localStorage.setItem(\"selectedHotel\", JSON.stringify(selectedHotel));\r\n//     }\r\n//     if (selectedTransport) {\r\n//       localStorage.setItem(\"selectedTransport\", JSON.stringify(selectedTransport));\r\n//     }\r\n//   }, [selectedHotel, selectedTransport]);\r\n\r\n//   // Calculate total price\r\n//   const calculateTotalPrice = () => {\r\n//     let totalPrice = 0;\r\n//     if (selectedHotel?.price) totalPrice += parseFloat(selectedHotel.price) || 0;\r\n//     if (selectedTransport?.price) totalPrice += parseFloat(selectedTransport.price) || 0;\r\n//     return totalPrice;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <Navbar />\r\n\r\n//       {/* Back Arrow Icon */}\r\n//       <div className=\"back-arrow\" onClick={() => navigate(\"/UserCustomization\")}>\r\n//         ←\r\n//       </div>\r\n\r\n//       {/* Centered Heading */}\r\n//       <div className=\"center-heading\">\r\n//       </div>\r\n\r\n//       {/* Booking Options */}\r\n//       <div className=\"booking-options\">\r\n//         <div className=\"option-card\">\r\n//           <h3>1. Customize Transport</h3>\r\n//           <img src={transportImg} alt=\"Transport\" />\r\n//           {selectedTransport ? (\r\n//             <div className=\"booked-transport\">\r\n//               <p><strong>Transport Selected:</strong> {selectedTransport.name || selectedTransport.car_name || selectedTransport.bus_name || selectedTransport.train_name}</p>\r\n//               <p>Departure: {selectedTransport.departure_time || \"N/A\"}</p>\r\n//               <p>Price: {selectedTransport.price ? `${selectedTransport.price} PKR` : \"Price Not Available\"}</p>\r\n//               <button className=\"edit-btn\" onClick={() => navigate(\"/BookTransport\")}>\r\n//                 <FaEdit /> Edit\r\n//               </button>\r\n//             </div>\r\n//           ) : (\r\n//             <Link to=\"/BookTransport\" className=\"explore-btn\">\r\n//               Explore\r\n//             </Link>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"option-card\">\r\n//           <h3>2. Book a Hotel</h3>\r\n//           <img src={hotelImg} alt=\"Hotel\" />\r\n//           {selectedHotel ? (\r\n//             <div className=\"booked-hotel\">\r\n//               <p><strong>Hotel Booked:</strong> {selectedHotel.name}</p>\r\n//               <p>Rating: {selectedHotel.rating} / 5</p>\r\n//               <p>Price: {selectedHotel.price} Rs per night</p>\r\n//               <p>Status: <span style={{ color: \"green\" }}>✔</span> Booked</p>\r\n//               <button className=\"edit-btn\" onClick={handleEditHotel}>\r\n//                 <FaEdit /> Edit\r\n//               </button>\r\n//             </div>\r\n//           ) : (\r\n//             <Link to=\"/BookHotel\" className=\"explore-btn\">\r\n//               Explore\r\n//             </Link>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"option-card\">\r\n//           <h3>3. Book an Airbnb</h3>\r\n//           <img src={airbnbImg} alt=\"Airbnb\" />\r\n//           <Link to=\"/BookAirbnb\" className=\"explore-btn\">\r\n//             Explore\r\n//           </Link>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Confirm Button */}\r\n//       <div className=\"confirm-btn-container\">\r\n//         <button className=\"confirm-btn\" onClick={handleConfirmBooking}>\r\n//           Confirm: {calculateTotalPrice()} PKR ➔\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default BookingOptions;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Link, useNavigate, useLocation } from \"react-router-dom\";\r\n// import Navbar from \"../NavBar/Navbar\";\r\n// import transportImg from \"./images/transport.png\";\r\n// import hotelImg from \"./images/hotel.jpg\";\r\n// import airbnbImg from \"./images/airbnb.jpg\";\r\n// import \"./BookingOptions.css\";\r\n// import { FaEdit } from \"react-icons/fa\";\r\n\r\n// const BookingOptions = () => {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n//   const { customizationData, currentDetails } = location.state || {};\r\n\r\n//   // Create a unique trip ID based on trip details to use as storage key\r\n//   // This ensures different trips have separate storage\r\n//   const getTripStorageKey = () => {\r\n//     if (!customizationData) return null;\r\n    \r\n//     const { startingPoint, destination, startDate, endDate, guests } = customizationData;\r\n//     if (!startingPoint || !destination || !startDate || !endDate) return null;\r\n    \r\n//     return `trip_${startingPoint}_${destination}_${startDate}_${endDate}_${guests}`;\r\n//   };\r\n\r\n//   const tripStorageKey = getTripStorageKey();\r\n  \r\n//   // Initialize state with data from location state or trip-specific localStorage\r\n//   const [selectedHotel, setSelectedHotel] = useState(() => {\r\n//     // First try to get from currentDetails passed in navigation\r\n//     if (currentDetails && currentDetails.hotel) {\r\n//       return currentDetails.hotel;\r\n//     }\r\n    \r\n//     // If not found and we have a valid tripStorageKey, try to get from localStorage\r\n//     if (tripStorageKey) {\r\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\r\n//       if (savedTripDetails) {\r\n//         try {\r\n//           const parsedDetails = JSON.parse(savedTripDetails);\r\n//           return parsedDetails.hotel || null;\r\n//         } catch (error) {\r\n//           console.error(\"Error parsing trip details from localStorage:\", error);\r\n//           return null;\r\n//         }\r\n//       }\r\n//     }\r\n    \r\n//     return null;\r\n//   });\r\n  \r\n//   const [selectedTransport, setSelectedTransport] = useState(() => {\r\n//     // First try to get from currentDetails passed in navigation\r\n//     if (currentDetails && currentDetails.transport) {\r\n//       return currentDetails.transport;\r\n//     }\r\n    \r\n//     // If not found and we have a valid tripStorageKey, try to get from localStorage\r\n//     if (tripStorageKey) {\r\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\r\n//       if (savedTripDetails) {\r\n//         try {\r\n//           const parsedDetails = JSON.parse(savedTripDetails);\r\n//           return parsedDetails.transport || null;\r\n//         } catch (error) {\r\n//           console.error(\"Error parsing trip details from localStorage:\", error);\r\n//           return null;\r\n//         }\r\n//       }\r\n//     }\r\n    \r\n//     return null;\r\n//   });\r\n\r\n//   // Calculate total price\r\n//   const calculateTotalPrice = () => {\r\n//     let totalPrice = 0;\r\n//     if (selectedHotel?.price) totalPrice += parseFloat(selectedHotel.price) || 0;\r\n//     if (selectedTransport?.price) totalPrice += parseFloat(selectedTransport.price) || 0;\r\n//     return totalPrice;\r\n//   };\r\n\r\n//   // Handle editing the hotel selection\r\n//   const handleEditHotel = () => {\r\n//     // Save current trip key to localStorage so hotel booking page knows which trip we're working with\r\n//     if (tripStorageKey) {\r\n//       localStorage.setItem('currentTripKey', tripStorageKey);\r\n//     }\r\n//     navigate(\"/BookHotel\", { \r\n//       state: { \r\n//         customizationData,\r\n//         returnToOptions: true\r\n//       } \r\n//     });\r\n//   };\r\n\r\n//   // Handle editing the transport selection\r\n//   const handleEditTransport = () => {\r\n//     // Save current trip key to localStorage so transport booking page knows which trip we're working with\r\n//     if (tripStorageKey) {\r\n//       localStorage.setItem('currentTripKey', tripStorageKey);\r\n//     }\r\n//     navigate(\"/BookTransport\", { \r\n//       state: { \r\n//         customizationData,\r\n//         returnToOptions: true\r\n//       } \r\n//     });\r\n//   };\r\n\r\n//   // When a user returns from BookHotel or BookTransport pages, update local state\r\n//   useEffect(() => {\r\n//     if (tripStorageKey) {\r\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\r\n//       if (savedTripDetails) {\r\n//         try {\r\n//           const parsedDetails = JSON.parse(savedTripDetails);\r\n//           // Only update if the data exists to avoid overwriting with null\r\n//           if (parsedDetails.hotel) setSelectedHotel(parsedDetails.hotel);\r\n//           if (parsedDetails.transport) setSelectedTransport(parsedDetails.transport);\r\n//         } catch (error) {\r\n//           console.error(\"Error parsing trip details from localStorage:\", error);\r\n//         }\r\n//       }\r\n//     }\r\n//   }, [tripStorageKey]);\r\n\r\n//   // Save selections to trip-specific localStorage\r\n//   useEffect(() => {\r\n//     if (tripStorageKey) {\r\n//       // Get existing trip details first\r\n//       let tripDetails = { hotel: null, transport: null };\r\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\r\n//       if (savedTripDetails) {\r\n//         try {\r\n//           tripDetails = JSON.parse(savedTripDetails);\r\n//         } catch (error) {\r\n//           console.error(\"Error parsing trip details:\", error);\r\n//         }\r\n//       }\r\n      \r\n//       // Update with new selections\r\n//       const updatedDetails = {\r\n//         ...tripDetails,\r\n//         hotel: selectedHotel,\r\n//         transport: selectedTransport\r\n//       };\r\n      \r\n//       // Save back to localStorage\r\n//       localStorage.setItem(`tripDetails_${tripStorageKey}`, JSON.stringify(updatedDetails));\r\n//     }\r\n//   }, [selectedHotel, selectedTransport, tripStorageKey]);\r\n\r\n//   // Confirm Booking and Send Data Back to UserCustomization\r\n//   const handleConfirmBooking = () => {\r\n//     // Create booking data to pass back to UserCustomization\r\n//     const bookingData = {\r\n//       selectedHotel,\r\n//       selectedTransport,\r\n//       totalPrice: calculateTotalPrice()\r\n//     };\r\n\r\n//     // Navigate back to UserCustomization with all booking data\r\n//     navigate(\"/UserCustomization\", { \r\n//       state: { \r\n//         customizationData, \r\n//         bookingData \r\n//       } \r\n//     });\r\n//   };\r\n  \r\n//   // If we don't have customization data, redirect to the home page\r\n//   useEffect(() => {\r\n//     if (!customizationData && !tripStorageKey) {\r\n//       navigate(\"/\");\r\n//     }\r\n//   }, [customizationData, tripStorageKey, navigate]);\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <Navbar />\r\n\r\n//       {/* Back Arrow Icon */}\r\n//       <div className=\"back-arrow\" onClick={() => navigate(\"/UserCustomization\", { state: { customizationData } })}>\r\n//         ←\r\n//       </div>\r\n\r\n//       {/* Centered Heading */}\r\n//       <div className=\"center-heading\">\r\n//         <h2>Booking Options</h2>\r\n//         {tripStorageKey && (\r\n//           <p className=\"trip-id-info\">\r\n//             Trip from {customizationData?.startingPoint || \"\"} to {customizationData?.destination || \"\"}\r\n//           </p>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Booking Options */}\r\n//       <div className=\"booking-options\">\r\n//         <div className=\"option-card\">\r\n//           <h3>1. Customize Transport</h3>\r\n//           <img src={transportImg} alt=\"Transport\" />\r\n//           {selectedTransport ? (\r\n//             <div className=\"booked-transport\">\r\n//               <p><strong>Transport Selected:</strong> {selectedTransport.name || selectedTransport.car_name || selectedTransport.bus_name || selectedTransport.train_name}</p>\r\n//               <p>Type: {selectedTransport.type || \"N/A\"}</p>\r\n//               <p>Departure: {selectedTransport.departure_time || \"N/A\"}</p>\r\n//               <p>Price: {selectedTransport.price ? `${selectedTransport.price} PKR` : \"Price Not Available\"}</p>\r\n//               <button className=\"edit-btn\" onClick={handleEditTransport}>\r\n//                 <FaEdit /> Edit\r\n//               </button>\r\n//             </div>\r\n//           ) : (\r\n//             <Link \r\n//               to=\"/BookTransport\" \r\n//               state={{ customizationData, returnToOptions: true }}\r\n//               className=\"explore-btn\"\r\n//               onClick={() => {\r\n//                 if (tripStorageKey) localStorage.setItem('currentTripKey', tripStorageKey);\r\n//               }}\r\n//             >\r\n//               Explore\r\n//             </Link>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"option-card\">\r\n//           <h3>2. Book a Hotel</h3>\r\n//           <img src={hotelImg} alt=\"Hotel\" />\r\n//           {selectedHotel ? (\r\n//             <div className=\"booked-hotel\">\r\n//               <p><strong>Hotel Booked:</strong> {selectedHotel.name}</p>\r\n//               <p>Rating: {selectedHotel.rating} / 5</p>\r\n//               <p>Price: {selectedHotel.price} PKR per night</p>\r\n//               <p>Status: <span style={{ color: \"green\" }}>✔</span> Selected</p>\r\n//               <button className=\"edit-btn\" onClick={handleEditHotel}>\r\n//                 <FaEdit /> Edit\r\n//               </button>\r\n//             </div>\r\n//           ) : (\r\n//             <Link \r\n//               to=\"/BookHotel\" \r\n//               state={{ customizationData, returnToOptions: true }}\r\n//               className=\"explore-btn\"\r\n//               onClick={() => {\r\n//                 if (tripStorageKey) localStorage.setItem('currentTripKey', tripStorageKey);\r\n//               }}\r\n//             >\r\n//               Explore\r\n//             </Link>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"option-card\">\r\n//           <h3>3. Book an Airbnb</h3>\r\n//           <img src={airbnbImg} alt=\"Airbnb\" />\r\n//           <Link \r\n//             to=\"/BookAirbnb\" \r\n//             state={{ customizationData, returnToOptions: true }}\r\n//             className=\"explore-btn\" \r\n//             onClick={() => {\r\n//               if (tripStorageKey) localStorage.setItem('currentTripKey', tripStorageKey);\r\n//             }}\r\n//           >\r\n//             Explore\r\n//           </Link>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Confirm Button */}\r\n//       <div className=\"confirm-btn-container\">\r\n//         <button \r\n//           className=\"confirm-btn\" \r\n//           onClick={handleConfirmBooking}\r\n//           disabled={!selectedHotel && !selectedTransport}\r\n//         >\r\n//           Confirm: {calculateTotalPrice().toLocaleString()} PKR ➔\r\n//         </button>\r\n//       </div>\r\n      \r\n//       {(!selectedHotel && !selectedTransport) && (\r\n//         <p className=\"selection-note\">Please select at least one option before confirming.</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default BookingOptions;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Link, useNavigate, useLocation } from \"react-router-dom\";\r\n// import Navbar from \"../NavBar/Navbar\";\r\n// import transportImg from \"./images/transport.png\";\r\n// import hotelImg from \"./images/hotel.jpg\";\r\n// import airbnbImg from \"./images/airbnb.jpg\";\r\n// import \"./BookingOptions.css\";\r\n// import { FaEdit, FaArrowLeft, FaCheck, FaLongArrowAltRight } from \"react-icons/fa\";\r\n// import { IoMdPricetag } from \"react-icons/io\";\r\n// import { BiSolidHotel, BiSolidCar, BiSolidHome } from \"react-icons/bi\";\r\n\r\n// const BookingOptions = () => {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n//   const { customizationData, currentDetails } = location.state || {};\r\n\r\n//   // Loading state for better UX\r\n//   const [isLoading, setIsLoading] = useState(true);\r\n  \r\n//   // Create a unique trip ID based on trip details to use as storage key\r\n//   const getTripStorageKey = () => {\r\n//     if (!customizationData) return null;\r\n    \r\n//     const { startingPoint, destination, startDate, endDate, guests } = customizationData;\r\n//     if (!startingPoint || !destination || !startDate || !endDate) return null;\r\n    \r\n//     return `trip_${startingPoint}_${destination}_${startDate}_${endDate}_${guests}`;\r\n//   };\r\n\r\n//   const tripStorageKey = getTripStorageKey();\r\n  \r\n//   // Initialize state with data from location state or trip-specific localStorage\r\n//   const [selectedHotel, setSelectedHotel] = useState(null);\r\n//   const [selectedTransport, setSelectedTransport] = useState(null);\r\n  \r\n//   // Calculate total price\r\n//   const calculateTotalPrice = () => {\r\n//     let totalPrice = 0;\r\n//     if (selectedHotel?.price) totalPrice += parseFloat(selectedHotel.price) || 0;\r\n//     if (selectedTransport?.price) totalPrice += parseFloat(selectedTransport.price) || 0;\r\n//     return totalPrice;\r\n//   };\r\n\r\n//   // Format price with commas for thousands\r\n//   const formatPrice = (price) => {\r\n//     return parseFloat(price).toLocaleString();\r\n//   };\r\n\r\n//   // Handle editing the hotel selection\r\n//   const handleEditHotel = () => {\r\n//     if (tripStorageKey) {\r\n//       localStorage.setItem('currentTripKey', tripStorageKey);\r\n//     }\r\n//     navigate(\"/BookHotel\", { \r\n//       state: { \r\n//         customizationData,\r\n//         returnToOptions: true\r\n//       } \r\n//     });\r\n//   };\r\n\r\n//   // Handle editing the transport selection\r\n//   const handleEditTransport = () => {\r\n//     if (tripStorageKey) {\r\n//       localStorage.setItem('currentTripKey', tripStorageKey);\r\n//     }\r\n//     navigate(\"/BookTransport\", { \r\n//       state: { \r\n//         customizationData,\r\n//         returnToOptions: true\r\n//       } \r\n//     });\r\n//   };\r\n\r\n//   // Initialize data\r\n//   useEffect(() => {\r\n//     setIsLoading(true);\r\n    \r\n//     // Function to load data\r\n//     const loadData = async () => {\r\n//       let hotelData = null;\r\n//       let transportData = null;\r\n      \r\n//       // First try to get from currentDetails passed in navigation\r\n//       if (currentDetails) {\r\n//         hotelData = currentDetails.hotel || null;\r\n//         transportData = currentDetails.transport || null;\r\n//       }\r\n      \r\n//       // If not found and we have a valid tripStorageKey, try to get from localStorage\r\n//       if (!hotelData || !transportData) {\r\n//         if (tripStorageKey) {\r\n//           const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\r\n//           if (savedTripDetails) {\r\n//             try {\r\n//               const parsedDetails = JSON.parse(savedTripDetails);\r\n//               if (!hotelData) hotelData = parsedDetails.hotel || null;\r\n//               if (!transportData) transportData = parsedDetails.transport || null;\r\n//             } catch (error) {\r\n//               console.error(\"Error parsing trip details from localStorage:\", error);\r\n//             }\r\n//           }\r\n//         }\r\n//       }\r\n      \r\n//       // Update state with loaded data\r\n//       setSelectedHotel(hotelData);\r\n//       setSelectedTransport(transportData);\r\n      \r\n//       // Simulate a slight delay for better UX\r\n//       setTimeout(() => {\r\n//         setIsLoading(false);\r\n//       }, 500);\r\n//     };\r\n    \r\n//     loadData();\r\n//   }, [currentDetails, tripStorageKey]);\r\n\r\n//   // When a user returns from BookHotel or BookTransport pages, update local state\r\n//   useEffect(() => {\r\n//     if (tripStorageKey) {\r\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\r\n//       if (savedTripDetails) {\r\n//         try {\r\n//           const parsedDetails = JSON.parse(savedTripDetails);\r\n//           // Only update if the data exists to avoid overwriting with null\r\n//           if (parsedDetails.hotel) setSelectedHotel(parsedDetails.hotel);\r\n//           if (parsedDetails.transport) setSelectedTransport(parsedDetails.transport);\r\n//         } catch (error) {\r\n//           console.error(\"Error parsing trip details from localStorage:\", error);\r\n//         }\r\n//       }\r\n//     }\r\n//   }, [tripStorageKey]);\r\n\r\n//   // Save selections to trip-specific localStorage\r\n//   useEffect(() => {\r\n//     if (tripStorageKey && (!isLoading)) {\r\n//       // Get existing trip details first\r\n//       let tripDetails = { hotel: null, transport: null };\r\n//       const savedTripDetails = localStorage.getItem(`tripDetails_${tripStorageKey}`);\r\n//       if (savedTripDetails) {\r\n//         try {\r\n//           tripDetails = JSON.parse(savedTripDetails);\r\n//         } catch (error) {\r\n//           console.error(\"Error parsing trip details:\", error);\r\n//         }\r\n//       }\r\n      \r\n//       // Update with new selections\r\n//       const updatedDetails = {\r\n//         ...tripDetails,\r\n//         hotel: selectedHotel,\r\n//         transport: selectedTransport\r\n//       };\r\n      \r\n//       // Save back to localStorage\r\n//       localStorage.setItem(`tripDetails_${tripStorageKey}`, JSON.stringify(updatedDetails));\r\n//     }\r\n//   }, [selectedHotel, selectedTransport, tripStorageKey, isLoading]);\r\n\r\n// // Confirm Booking and Send Data Back to UserCustomization\r\n// const handleConfirmBooking = () => {\r\n//   // Create booking data to pass back to UserCustomization\r\n//   const bookingData = {\r\n//     selectedHotel,\r\n//     selectedTransport,\r\n//     totalPrice: calculateTotalPrice()\r\n//   };\r\n\r\n//   // Show confirmation animation\r\n//   setIsConfirming(true);\r\n  \r\n//   // Add slight delay for better UX before navigating\r\n//   setTimeout(() => {\r\n//     // Navigate back to UserCustomization with all booking data\r\n//     navigate(\"/UserCustomization\", { \r\n//       state: { \r\n//         customizationData, \r\n//         bookingData \r\n//       } \r\n//     });\r\n//   }, 800);\r\n// };\r\n\r\n// // State for confirmation animation\r\n// const [isConfirming, setIsConfirming] = useState(false);\r\n\r\n// // If we don't have customization data, redirect to the home page\r\n// // useEffect(() => {\r\n// //   if (!customizationData && !tripStorageKey) {\r\n// //     navigate(\"/\");\r\n// //   }\r\n// // }, [customizationData, tripStorageKey, navigate]);\r\n\r\n// // Get transport name from selected transport object\r\n// const getTransportName = (transport) => {\r\n//   if (!transport) return '';\r\n//   return transport.name || \r\n//          transport.car_name || \r\n//          transport.bus_name || \r\n//          transport.train_name || \r\n//          'Transport';\r\n// };\r\n\r\n// // Get transport type or default text\r\n// const getTransportType = (transport) => {\r\n//   if (!transport) return 'N/A';\r\n//   return transport.type || 'Standard';\r\n// };\r\n\r\n// // Check if at least one option is selected\r\n// const hasSelection = selectedHotel || selectedTransport;\r\n\r\n// return (\r\n//   <div className=\"container\">\r\n//     <Navbar />\r\n\r\n//     {/* Header Section */}\r\n//     <div className=\"header-section\">\r\n//       {/* Back Arrow Icon */}\r\n//       <div \r\n//         className=\"back-arrow\" \r\n//         onClick={() => navigate(\"/UserCustomization\", { state: { customizationData } })}\r\n//         aria-label=\"Go back\"\r\n//       >\r\n//         <FaArrowLeft />\r\n//       </div>\r\n\r\n//       {/* Centered Heading */}\r\n//       <div className=\"center-heading\">\r\n//         <h2>Booking Options</h2>\r\n//         {customizationData && (\r\n//           <p className=\"trip-id-info\">\r\n//             {customizationData.startingPoint} → {customizationData.destination}\r\n//             {customizationData.startDate && ` • ${customizationData.startDate}`}\r\n//           </p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n\r\n//     {/* Booking Options */}\r\n//     <div className=\"booking-options\">\r\n//       <div className=\"option-card\">\r\n//         <div className=\"option-card-header\">\r\n//           <h3><span>1</span> Customize Transport</h3>\r\n//         </div>\r\n//         <img src={transportImg} alt=\"Transport\" className=\"option-card-image\" />\r\n//         <div className=\"option-card-content\">\r\n//           {selectedTransport ? (\r\n//             <div className=\"booking-details\">\r\n//               <p><strong>Transport:</strong> {getTransportName(selectedTransport)}</p>\r\n//               <p><strong>Type:</strong> {getTransportType(selectedTransport)}</p>\r\n//               <p><strong>Departure:</strong> {selectedTransport.departure_time || \"Flexible\"}</p>\r\n//               <p>\r\n//                 <strong>Price:</strong> \r\n//                 <span className=\"price-tag\">\r\n//                   <IoMdPricetag /> {selectedTransport.price ? formatPrice(selectedTransport.price) : \"N/A\"} PKR\r\n//                 </span>\r\n//               </p>\r\n//               <p>\r\n//                 <strong>Status:</strong>\r\n//                 <span className=\"status\">\r\n//                   <FaCheck className=\"status-icon\" /> Selected\r\n//                 </span>\r\n//               </p>\r\n//               <div className=\"card-actions\">\r\n//                 <button className=\"edit-btn\" onClick={handleEditTransport}>\r\n//                   <FaEdit /> Edit Selection\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           ) : (\r\n//             <>\r\n//               <p>Choose your preferred mode of transportation for your journey.</p>\r\n//               <div className=\"card-actions\">\r\n//                 <Link \r\n//                   to=\"/BookTransport\" \r\n//                   state={{ customizationData, returnToOptions: true }}\r\n//                   className=\"explore-btn\"\r\n//                   onClick={() => {\r\n//                     if (tripStorageKey) localStorage.setItem('currentTripKey', tripStorageKey);\r\n//                   }}\r\n//                 >\r\n//                   <BiSolidCar /> Explore Options\r\n//                 </Link>\r\n//               </div>\r\n//             </>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       <div className=\"option-card\">\r\n//         <div className=\"option-card-header\">\r\n//           <h3><span>2</span> Book a Hotel</h3>\r\n//         </div>\r\n//         <img src={hotelImg} alt=\"Hotel\" className=\"option-card-image\" />\r\n//         <div className=\"option-card-content\">\r\n//           {selectedHotel ? (\r\n//             <div className=\"booking-details\">\r\n//               <p><strong>Hotel:</strong> {selectedHotel.name}</p>\r\n//               <p><strong>Rating:</strong> {selectedHotel.rating} / 5</p>\r\n//               <p>\r\n//                 <strong>Price:</strong>\r\n//                 <span className=\"price-tag\">\r\n//                   <IoMdPricetag /> {formatPrice(selectedHotel.price)} PKR/night\r\n//                 </span>\r\n//               </p>\r\n//               <p>\r\n//                 <strong>Status:</strong>\r\n//                 <span className=\"status\">\r\n//                   <FaCheck className=\"status-icon\" /> Selected\r\n//                 </span>\r\n//               </p>\r\n//               <div className=\"card-actions\">\r\n//                 <button className=\"edit-btn\" onClick={handleEditHotel}>\r\n//                   <FaEdit /> Edit Selection\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           ) : (\r\n//             <>\r\n//               <p>Find comfortable accommodations for your stay.</p>\r\n//               <div className=\"card-actions\">\r\n//                 <Link \r\n//                   to=\"/BookHotel\" \r\n//                   state={{ customizationData, returnToOptions: true }}\r\n//                   className=\"explore-btn\"\r\n//                   onClick={() => {\r\n//                     if (tripStorageKey) localStorage.setItem('currentTripKey', tripStorageKey);\r\n//                   }}\r\n//                 >\r\n//                   <BiSolidHotel /> Explore Options\r\n//                 </Link>\r\n//               </div>\r\n//             </>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       <div className=\"option-card\">\r\n//         <div className=\"option-card-header\">\r\n//           <h3><span>3</span> Book an Airbnb</h3>\r\n//         </div>\r\n//         <img src={airbnbImg} alt=\"Airbnb\" className=\"option-card-image\" />\r\n//         <div className=\"option-card-content\">\r\n//           <p>Discover unique stays and experiences with local hosts.</p>\r\n//           <div className=\"card-actions\">\r\n//             <Link \r\n//               to=\"/BookAirbnb\" \r\n//               state={{ customizationData, returnToOptions: true }}\r\n//               className=\"explore-btn\" \r\n//               onClick={() => {\r\n//                 if (tripStorageKey) localStorage.setItem('currentTripKey', tripStorageKey);\r\n//               }}\r\n//             >\r\n//               <BiSolidHome /> Explore Options\r\n//             </Link>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n\r\n//     {/* Confirmation Section */}\r\n//     <div className=\"confirm-btn-container\">\r\n//       {hasSelection && (\r\n//         <div className=\"confirmation-summary\">\r\n//           <h3>Summary</h3>\r\n//           <div className=\"summary-item\">\r\n//             <span>Transport:</span>\r\n//             <span>{selectedTransport ? `${getTransportName(selectedTransport)} (${formatPrice(selectedTransport.price)} PKR)` : 'Not selected'}</span>\r\n//           </div>\r\n//           <div className=\"summary-item\">\r\n//             <span>Accommodation:</span>\r\n//             <span>{selectedHotel ? `${selectedHotel.name} (${formatPrice(selectedHotel.price)} PKR/night)` : 'Not selected'}</span>\r\n//           </div>\r\n//           <div className=\"summary-item summary-total\">\r\n//             <span>Total:</span>\r\n//             <span>{formatPrice(calculateTotalPrice())} PKR</span>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n      \r\n//       <button \r\n//         className={`confirm-btn ${isConfirming ? 'confirming' : ''}`}\r\n//         onClick={handleConfirmBooking}\r\n//         disabled={!hasSelection}\r\n//       >\r\n//         {isConfirming ? 'Processing...' : (\r\n//           <>\r\n//             Confirm Booking {formatPrice(calculateTotalPrice())} PKR <FaLongArrowAltRight />\r\n//           </>\r\n//         )}\r\n//       </button>\r\n      \r\n//       {!hasSelection && (\r\n//         <p className=\"selection-note\">Please select at least one option before confirming.</p>\r\n//       )}\r\n//     </div>\r\n//   </div>\r\n// );\r\n// };\r\n\r\n// export default BookingOptions;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}