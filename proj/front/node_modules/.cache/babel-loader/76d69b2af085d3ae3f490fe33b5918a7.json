{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\Voyaige\\\\proj\\\\front\\\\src\\\\components\\\\HomePage\\\\PreplannedTrip\\\\ToursSection.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './ToursSection.css';\nimport Navbar from '../../NavBar/Navbar';\nimport trips from './packagedata';\nimport Papa from 'papaparse';\nimport { cosineSimilarity } from './similarity';\nconst ToursSection = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [attractions, setAttractions] = useState([]);\n  const [restaurants, setRestaurants] = useState([]);\n  const [hotels, setHotels] = useState([]);\n  const [userPastTrips, setUserPastTrips] = useState([]);\n  const [userEmail, setUserEmail] = useState(null);\n  const [recommendedTrips, setRecommendedTrips] = useState([]);\n  const [restaurantReviews, setRestaurantReviews] = useState([]);\n\n  // Fetch user email from local storage\n  useEffect(() => {\n    const storedUser = JSON.parse(localStorage.getItem('user'));\n    if (storedUser && storedUser.email) {\n      setUserEmail(storedUser.email);\n    }\n  }, []);\n\n  // Fetch attractions data\n  useEffect(() => {\n    const fetchAttractions = async () => {\n      try {\n        const response = await fetch('/Cleaned_attr.csv');\n        if (!response.ok) throw new Error(`Failed to fetch CSV: ${response.statusText}`);\n        const text = await response.text();\n        const result = Papa.parse(text, {\n          header: true,\n          skipEmptyLines: true\n        });\n        const cleanedData = result.data.map(item => ({\n          name: item.name || '',\n          description: item.description || '',\n          category: item.category || '',\n          address: item.address || '',\n          city: item.city || '',\n          availability: item.availability || '',\n          rating: parseFloat(item.rating) || 0,\n          images: [item.image1 ? item.image1.trim() : null, item.image2 ? item.image2.trim() : null, item.image3 ? item.image3.trim() : null].filter(Boolean)\n        }));\n        setAttractions(cleanedData);\n      } catch (error) {\n        console.error('Error fetching or parsing attractions:', error);\n      }\n    };\n    fetchAttractions();\n  }, []);\n  useEffect(() => {\n    const fetchRestaurants = async () => {\n      try {\n        const response = await fetch('/restaurants_data.json');\n        const data = await response.json();\n        const cleanedRestaurants = data.map(restaurant => {\n          var _restaurant$_id;\n          return {\n            id: restaurant.restaurant_id || '',\n            _id: ((_restaurant$_id = restaurant._id) === null || _restaurant$_id === void 0 ? void 0 : _restaurant$_id.$oid) || restaurant._id || '',\n            // Handle $oid format\n            name: restaurant.name || '',\n            address: restaurant.address || '',\n            phoneNumber: restaurant.phone_number || '',\n            service: restaurant.service || '',\n            openHour: restaurant.Open_hour || '',\n            city: restaurant.city || '',\n            rating: parseFloat(restaurant.rating) || 0,\n            images: Array.isArray(restaurant.image) ? restaurant.image : []\n          };\n        });\n        setRestaurants(cleanedRestaurants);\n      } catch (error) {\n        console.error('Error fetching or parsing restaurants:', error);\n      }\n    };\n    fetchRestaurants();\n  }, []);\n  useEffect(() => {\n    // If the user is not logged in, show the first 4 packages\n    if (!userEmail) {\n      console.log(\"User not logged in. Displaying default trips.\");\n      setRecommendedTrips(trips.slice(0, 4));\n      return;\n    }\n\n    // If attractions data is not loaded yet, return\n    if (attractions.length === 0) return;\n    const fetchPastTrips = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/users/past-trips?email=${userEmail}`);\n        const data = await response.json();\n        if (!response.ok) {\n          throw new Error(data.message || 'Failed to fetch past trips');\n        }\n        if (data.length === 0) {\n          console.log(\"No past trips found. Displaying default trips.\");\n          // If no past trips, set recommendedTrips to the first 4 packages from trips\n          setRecommendedTrips(trips.slice(0, 4));\n          return;\n        }\n\n        // Step 1: Sort past trips by start date (latest first)\n        const sortedTrips = data.sort((a, b) => new Date(b.startDate) - new Date(a.startDate));\n\n        // Step 2: Select the latest two trips\n        const latestTrips = sortedTrips.slice(0, 2);\n        console.log(\"Latest Two Past Trips:\", latestTrips);\n\n        // Step 3: Create City Vectors\n        const cityVectors = {};\n        attractions.forEach(attr => {\n          if (!cityVectors[attr.city]) {\n            cityVectors[attr.city] = {};\n          }\n          cityVectors[attr.city][attr.category] = (cityVectors[attr.city][attr.category] || 0) + 1;\n        });\n        let mostSimilarCities = new Set();\n        latestTrips.forEach(trip => {\n          console.log(`Processing Destination: ${trip.destination}`);\n          const destinationVector = cityVectors[trip.destination] || {};\n\n          // Step 4: Compute Cosine Similarity for All Cities (Excluding the destination itself)\n          const similarityScores = Object.keys(cityVectors).filter(city => city !== trip.destination).map(city => ({\n            city,\n            similarity: cosineSimilarity(destinationVector, cityVectors[city])\n          })).sort((a, b) => b.similarity - a.similarity).slice(0, 4); // Get top 4 most similar cities\n\n          console.log(`Top 4 Most Similar Cities to ${trip.destination}:`, similarityScores);\n\n          // Add the top similar cities to the set\n          similarityScores.forEach(sim => mostSimilarCities.add(sim.city));\n        });\n\n        // Step 5: Find Trip Packages Containing the Most Similar Cities\n        const tripMatches = trips.map(trip => {\n          const matchedCities = trip.cities.filter(city => mostSimilarCities.has(city.name));\n          return {\n            trip,\n            matchCount: matchedCities.length,\n            matchedCities\n          };\n        });\n\n        // Step 6: Sort trips based on the number of matching similar cities and select the top 4\n        const topTrips = tripMatches.sort((a, b) => b.matchCount - a.matchCount).slice(0, 4);\n        console.log('Top Matching Trip Packages:', topTrips);\n        setRecommendedTrips(topTrips.map(item => item.trip));\n      } catch (error) {\n        console.error('Error fetching past trips:', error);\n      }\n    };\n    fetchPastTrips();\n  }, [userEmail, attractions]);\n\n  // Fetch hotels data\n  useEffect(() => {\n    const fetchHotels = async () => {\n      try {\n        const response = await fetch('/clean_hotel_data.json');\n        const data = await response.json();\n        setHotels(data);\n      } catch (error) {\n        console.error('Error fetching or parsing hotels:', error);\n      }\n    };\n    fetchHotels();\n  }, []);\n\n  // Handle view details for a trip\n  const handleViewDetails = trip => {\n    setLoading(true);\n    try {\n      const cityData = trip.cities.map(city => {\n        const cityAttractions = attractions.filter(attr => attr.city === city.name).slice(0, 7); // Fetch only first 7 attractions\n\n        const cityRestaurants = restaurants.filter(restaurant => restaurant.city === city.name).slice(-8); // Fetch last 8 restaurants\n\n        // Fetch only one hotel for the city\n        const cityHotels = hotels.filter(hotel => hotel.city === city.name).slice(-13, -12); // Fetch only the first hotel\n\n        return {\n          cityName: city.name,\n          days: city.days,\n          hotels: cityHotels,\n          // Only one hotel is sent\n          restaurants: cityRestaurants,\n          attractions: cityAttractions\n        };\n      });\n      navigate('/trip-details', {\n        state: {\n          cityData,\n          tripTitle: trip.title,\n          tripImage: trip.image,\n          allAttractions: attractions,\n          // Pass all fetched attractions\n          allRestaurants: restaurants,\n          // Pass all fetched restaurants\n          allHotels: hotels // Pass all fetched hotels (for future use if needed)\n        }\n      });\n    } catch (error) {\n      console.error('Error handling trip details:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle view all trips\n  const handleViewAll = () => {\n    const enrichedTrips = trips.map(trip => ({\n      ...trip,\n      cityData: trip.cities.map(city => {\n        const cityAttractions = attractions.filter(attr => attr.city === city.name).slice(0, 7); // Fetch only first 7 attractions\n\n        const cityRestaurants = restaurants.filter(restaurant => restaurant.city === city.name).slice(-8); // Fetch last 8 restaurants\n\n        // Fetch only one hotel for the city\n        const cityHotels = hotels.filter(hotel => hotel.city === city.name).slice(-13, -12); // Fetch only the first hotel\n\n        return {\n          cityName: city.name,\n          days: city.days,\n          hotels: cityHotels,\n          // Only one hotel is sent\n          restaurants: cityRestaurants,\n          attractions: cityAttractions\n        };\n      })\n    }));\n    navigate('/all-trips', {\n      state: {\n        trips: enrichedTrips,\n        allAttractions: attractions,\n        // Pass all attractions to all-trips\n        allRestaurants: restaurants,\n        // Pass all restaurants to all-trips\n        allHotels: hotels // Pass all hotels to all-trips (for future use if needed)\n      }\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"preplanned_trips-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-preplanned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }\n  }, \"Pre-Planned Trips\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }\n  }, \"Choose from our exciting pre-planned trips for an unforgettable adventure.\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"view-more-preplanned\",\n    onClick: handleViewAll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }\n  }, \"View More\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trips_list-preplanned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }\n  }, recommendedTrips.map(trip => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trip_card-preplanned\",\n    key: trip.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: trip.image,\n    alt: trip.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trip_info-preplanned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 15\n    }\n  }, trip.title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 15\n    }\n  }, trip.description), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleViewDetails(trip),\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 15\n    }\n  }, loading ? 'Loading...' : 'View Details')))))));\n};\nexport default ToursSection;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Navbar","trips","Papa","cosineSimilarity","ToursSection","navigate","loading","setLoading","attractions","setAttractions","restaurants","setRestaurants","hotels","setHotels","userPastTrips","setUserPastTrips","userEmail","setUserEmail","recommendedTrips","setRecommendedTrips","restaurantReviews","setRestaurantReviews","storedUser","JSON","parse","localStorage","getItem","email","fetchAttractions","response","fetch","ok","Error","statusText","text","result","header","skipEmptyLines","cleanedData","data","map","item","name","description","category","address","city","availability","rating","parseFloat","images","image1","trim","image2","image3","filter","Boolean","error","console","fetchRestaurants","json","cleanedRestaurants","restaurant","_restaurant$_id","id","restaurant_id","_id","$oid","phoneNumber","phone_number","service","openHour","Open_hour","Array","isArray","image","log","slice","length","fetchPastTrips","message","sortedTrips","sort","a","b","Date","startDate","latestTrips","cityVectors","forEach","attr","mostSimilarCities","Set","trip","destination","destinationVector","similarityScores","Object","keys","similarity","sim","add","tripMatches","matchedCities","cities","has","matchCount","topTrips","fetchHotels","handleViewDetails","cityData","cityAttractions","cityRestaurants","cityHotels","hotel","cityName","days","state","tripTitle","title","tripImage","allAttractions","allRestaurants","allHotels","handleViewAll","enrichedTrips","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","key","src","alt","disabled"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/Voyaige/proj/front/src/components/HomePage/PreplannedTrip/ToursSection.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './ToursSection.css';\r\nimport Navbar from '../../NavBar/Navbar';\r\nimport trips from './packagedata';\r\nimport Papa from 'papaparse';\r\nimport { cosineSimilarity } from './similarity'; \r\n\r\n\r\nconst ToursSection = () => {\r\n  \r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [attractions, setAttractions] = useState([]);\r\n  const [restaurants, setRestaurants] = useState([]);\r\n  const [hotels, setHotels] = useState([]);\r\n  const [userPastTrips, setUserPastTrips] = useState([]);\r\n  const [userEmail, setUserEmail] = useState(null);\r\n  const [recommendedTrips, setRecommendedTrips] = useState([]);\r\n  const [restaurantReviews, setRestaurantReviews] = useState([]);\r\n\r\n    // Fetch user email from local storage\r\n    useEffect(() => {\r\n      const storedUser = JSON.parse(localStorage.getItem('user'));\r\n      if (storedUser && storedUser.email) {\r\n        setUserEmail(storedUser.email);\r\n      }\r\n    }, []);\r\n  \r\n    // Fetch attractions data\r\n    useEffect(() => {\r\n      const fetchAttractions = async () => {\r\n        try {\r\n          const response = await fetch('/Cleaned_attr.csv');\r\n          if (!response.ok) throw new Error(`Failed to fetch CSV: ${response.statusText}`);\r\n          const text = await response.text();\r\n          const result = Papa.parse(text, { header: true, skipEmptyLines: true });\r\n  \r\n          const cleanedData = result.data.map((item) => ({\r\n            name: item.name || '',\r\n            description: item.description || '',\r\n            category: item.category || '',\r\n            address: item.address || '',\r\n            city: item.city || '',\r\n            availability: item.availability || '',\r\n            rating: parseFloat(item.rating) || 0,\r\n            images: [\r\n              item.image1 ? item.image1.trim() : null,\r\n              item.image2 ? item.image2.trim() : null,\r\n              item.image3 ? item.image3.trim() : null,\r\n            ].filter(Boolean),\r\n          }));\r\n  \r\n          setAttractions(cleanedData);\r\n        } catch (error) {\r\n          console.error('Error fetching or parsing attractions:', error);\r\n        }\r\n      };\r\n  \r\n      fetchAttractions();\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      const fetchRestaurants = async () => {\r\n        try {\r\n          const response = await fetch('/restaurants_data.json');\r\n          const data = await response.json();\r\n  \r\n          const cleanedRestaurants = data.map((restaurant) => ({\r\n            id: restaurant.restaurant_id || '',\r\n            _id: restaurant._id?.$oid || restaurant._id || '', // Handle $oid format\r\n            name: restaurant.name || '',\r\n            address: restaurant.address || '',\r\n            phoneNumber: restaurant.phone_number || '',\r\n            service: restaurant.service || '',\r\n            openHour: restaurant.Open_hour || '',\r\n            city: restaurant.city || '',\r\n            rating: parseFloat(restaurant.rating) || 0,\r\n            images: Array.isArray(restaurant.image) ? restaurant.image : [],\r\n          }));\r\n  \r\n          setRestaurants(cleanedRestaurants);\r\n        } catch (error) {\r\n          console.error('Error fetching or parsing restaurants:', error);\r\n        }\r\n      };\r\n  \r\n      fetchRestaurants();\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n      // If the user is not logged in, show the first 4 packages\r\n      if (!userEmail) {\r\n        console.log(\"User not logged in. Displaying default trips.\");\r\n        setRecommendedTrips(trips.slice(0, 4));\r\n        return;\r\n      }\r\n    \r\n      // If attractions data is not loaded yet, return\r\n      if (attractions.length === 0) return;\r\n    \r\n      const fetchPastTrips = async () => {\r\n        try {\r\n          const response = await fetch(`http://localhost:5000/api/users/past-trips?email=${userEmail}`);\r\n          const data = await response.json();\r\n    \r\n          if (!response.ok) {\r\n            throw new Error(data.message || 'Failed to fetch past trips');\r\n          }\r\n    \r\n          if (data.length === 0) {\r\n            console.log(\"No past trips found. Displaying default trips.\");\r\n            // If no past trips, set recommendedTrips to the first 4 packages from trips\r\n            setRecommendedTrips(trips.slice(0, 4));\r\n            return;\r\n          }\r\n    \r\n          // Step 1: Sort past trips by start date (latest first)\r\n          const sortedTrips = data.sort((a, b) => new Date(b.startDate) - new Date(a.startDate));\r\n    \r\n          // Step 2: Select the latest two trips\r\n          const latestTrips = sortedTrips.slice(0, 2);\r\n          console.log(\"Latest Two Past Trips:\", latestTrips);\r\n    \r\n          // Step 3: Create City Vectors\r\n          const cityVectors = {};\r\n          attractions.forEach(attr => {\r\n            if (!cityVectors[attr.city]) {\r\n              cityVectors[attr.city] = {};\r\n            }\r\n            cityVectors[attr.city][attr.category] = (cityVectors[attr.city][attr.category] || 0) + 1;\r\n          });\r\n    \r\n          let mostSimilarCities = new Set();\r\n    \r\n          latestTrips.forEach(trip => {\r\n            console.log(`Processing Destination: ${trip.destination}`);\r\n            const destinationVector = cityVectors[trip.destination] || {};\r\n    \r\n            // Step 4: Compute Cosine Similarity for All Cities (Excluding the destination itself)\r\n            const similarityScores = Object.keys(cityVectors)\r\n              .filter(city => city !== trip.destination)\r\n              .map(city => ({\r\n                city,\r\n                similarity: cosineSimilarity(destinationVector, cityVectors[city])\r\n              }))\r\n              .sort((a, b) => b.similarity - a.similarity)\r\n              .slice(0, 4); // Get top 4 most similar cities\r\n    \r\n            console.log(`Top 4 Most Similar Cities to ${trip.destination}:`, similarityScores);\r\n    \r\n            // Add the top similar cities to the set\r\n            similarityScores.forEach(sim => mostSimilarCities.add(sim.city));\r\n          });\r\n    \r\n          // Step 5: Find Trip Packages Containing the Most Similar Cities\r\n          const tripMatches = trips.map(trip => {\r\n            const matchedCities = trip.cities.filter(city => mostSimilarCities.has(city.name));\r\n            return { trip, matchCount: matchedCities.length, matchedCities };\r\n          });\r\n    \r\n          // Step 6: Sort trips based on the number of matching similar cities and select the top 4\r\n          const topTrips = tripMatches\r\n            .sort((a, b) => b.matchCount - a.matchCount)\r\n            .slice(0, 4);\r\n    \r\n          console.log('Top Matching Trip Packages:', topTrips);\r\n          setRecommendedTrips(topTrips.map(item => item.trip));\r\n    \r\n        } catch (error) {\r\n          console.error('Error fetching past trips:', error);\r\n        }\r\n      };\r\n    \r\n      fetchPastTrips();\r\n    }, [userEmail, attractions]);\r\n\r\n  // Fetch hotels data\r\n  useEffect(() => {\r\n    const fetchHotels = async () => {\r\n      try {\r\n        const response = await fetch('/clean_hotel_data.json');\r\n        const data = await response.json();\r\n        setHotels(data);\r\n      } catch (error) {\r\n        console.error('Error fetching or parsing hotels:', error);\r\n      }\r\n    };\r\n    fetchHotels();\r\n  }, []);\r\n\r\n // Handle view details for a trip\r\n const handleViewDetails = (trip) => {\r\n  setLoading(true);\r\n  try {\r\n    const cityData = trip.cities.map((city) => {\r\n      const cityAttractions = attractions\r\n        .filter(attr => attr.city === city.name)\r\n        .slice(0, 7); // Fetch only first 7 attractions\r\n\r\n      const cityRestaurants = restaurants\r\n        .filter(restaurant => restaurant.city === city.name)\r\n        .slice(-8); // Fetch last 8 restaurants\r\n\r\n      // Fetch only one hotel for the city\r\n      const cityHotels = hotels\r\n        .filter(hotel => hotel.city === city.name)\r\n        .slice(-13, -12); // Fetch only the first hotel\r\n\r\n      return {\r\n        cityName: city.name,\r\n        days: city.days,\r\n        hotels: cityHotels, // Only one hotel is sent\r\n        restaurants: cityRestaurants,\r\n        attractions: cityAttractions,\r\n      };\r\n    });\r\n\r\n    navigate('/trip-details', {\r\n      state: {\r\n        cityData,\r\n        tripTitle: trip.title,\r\n        tripImage: trip.image,\r\n        allAttractions: attractions, // Pass all fetched attractions\r\n        allRestaurants: restaurants, // Pass all fetched restaurants\r\n        allHotels: hotels, // Pass all fetched hotels (for future use if needed)\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error handling trip details:', error);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n// Handle view all trips\r\nconst handleViewAll = () => {\r\n  const enrichedTrips = trips.map((trip) => ({\r\n    ...trip,\r\n    cityData: trip.cities.map((city) => {\r\n      const cityAttractions = attractions\r\n        .filter(attr => attr.city === city.name)\r\n        .slice(0, 7); // Fetch only first 7 attractions\r\n\r\n      const cityRestaurants = restaurants\r\n        .filter(restaurant => restaurant.city === city.name)\r\n        .slice(-8); // Fetch last 8 restaurants\r\n\r\n      // Fetch only one hotel for the city\r\n      const cityHotels = hotels\r\n        .filter(hotel => hotel.city === city.name)\r\n        .slice(-13,-12); // Fetch only the first hotel\r\n\r\n      return {\r\n        cityName: city.name,\r\n        days: city.days,\r\n        hotels: cityHotels, // Only one hotel is sent\r\n        restaurants: cityRestaurants,\r\n        attractions: cityAttractions,\r\n      };\r\n    }),\r\n  }));\r\n\r\n  navigate('/all-trips', {\r\n    state: { \r\n      trips: enrichedTrips,\r\n      allAttractions: attractions, // Pass all attractions to all-trips\r\n      allRestaurants: restaurants, // Pass all restaurants to all-trips\r\n      allHotels: hotels, // Pass all hotels to all-trips (for future use if needed)\r\n    },\r\n  });\r\n};\r\n\r\nreturn (\r\n  \r\n  <section className=\"preplanned_trips-section\">\r\n    <Navbar />\r\n    <div className=\"container-preplanned\">\r\n      <h2>Pre-Planned Trips</h2>\r\n      <p>Choose from our exciting pre-planned trips for an unforgettable adventure.</p>\r\n      <p className=\"view-more-preplanned\" onClick={handleViewAll}>\r\n        View More\r\n      </p>\r\n\r\n      <div className=\"trips_list-preplanned\">\r\n        {recommendedTrips.map((trip) => (\r\n          <div className=\"trip_card-preplanned\" key={trip.id}>\r\n            <img src={trip.image} alt={trip.title} />\r\n            <div className=\"trip_info-preplanned\">\r\n              <h3>{trip.title}</h3>\r\n              <p>{trip.description}</p>\r\n              <button onClick={() => handleViewDetails(trip)} disabled={loading}>\r\n                {loading ? 'Loading...' : 'View Details'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  </section>\r\n);\r\n};\r\n\r\nexport default ToursSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}