{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\Voyaige\\\\proj\\\\front\\\\src\\\\components\\\\ChatbotPage\\\\MiloChatbot.js\";\nimport React, { useState } from 'react';\nimport NavBar from \"../NavBar/Navbar\";\nfunction MiloChatbot() {\n  const [userInput, setUserInput] = useState('');\n  const [botResponse, setBotResponse] = useState('');\n  const [tripDetails, setTripDetails] = useState({\n    startingCity: '',\n    destinationCity: '',\n    modeOfTransport: '',\n    days: 0,\n    budget: 0\n  });\n  const handleChat = async e => {\n    e.preventDefault(); // Prevent form refresh\n    try {\n      let response;\n      if (userInput.includes(\"generate itinerary\")) {\n        // Sending input to the `/generate-itinerary` endpoint\n        response = await fetch('http://127.0.0.1:5000/generate-itinerary', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_input: userInput,\n            starting_city: tripDetails.startingCity,\n            destination_city: tripDetails.destinationCity,\n            mode_of_transport: tripDetails.modeOfTransport,\n            days: tripDetails.days,\n            budget: tripDetails.budget\n          })\n        });\n      } else if (userInput.includes(\"details\")) {\n        // Sending input to the `/retrieve-details` endpoint\n        response = await fetch('http://127.0.0.1:5000/retrieve-details', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_input: userInput\n          })\n        });\n      } else if (userInput.includes(\"top\")) {\n        // Sending input to the `/retrieve-top-items` endpoint\n        const numRecommendations = 5; // You can make this dynamic if needed\n        response = await fetch('http://127.0.0.1:5000/retrieve-top-items', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_input: userInput,\n            num_recommendations: numRecommendations\n          })\n        });\n      } else if (userInput.includes(\"compare\")) {\n        // Sending input to the `/compare-two-options` endpoint\n        response = await fetch('http://127.0.0.1:5000/compare-two-options', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_input: userInput\n          })\n        });\n      } else {\n        // Default endpoint `/MiloChatbot`\n        response = await fetch('http://127.0.0.1:5000/MiloChatbot', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_input: userInput\n          })\n        });\n      }\n      const data = await response.json();\n      setBotResponse(data.response || data.result);\n    } catch (error) {\n      console.error('Error communicating with the chatbot:', error);\n      setBotResponse('Sorry, there was an error. Please try again.');\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, \"Milo Chatbot\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Type your message here...\",\n    value: userInput,\n    onChange: e => setUserInput(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, \"Send\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, \"Chatbot Response:\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, botResponse)));\n}\nexport default MiloChatbot;","map":{"version":3,"names":["React","useState","NavBar","MiloChatbot","userInput","setUserInput","botResponse","setBotResponse","tripDetails","setTripDetails","startingCity","destinationCity","modeOfTransport","days","budget","handleChat","e","preventDefault","response","includes","fetch","method","headers","body","JSON","stringify","user_input","starting_city","destination_city","mode_of_transport","numRecommendations","num_recommendations","data","json","result","error","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","style","marginTop"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/Voyaige/proj/front/src/components/ChatbotPage/MiloChatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport NavBar from \"../NavBar/Navbar\";\r\n\r\nfunction MiloChatbot() {\r\n    const [userInput, setUserInput] = useState('');\r\n    const [botResponse, setBotResponse] = useState('');\r\n    const [tripDetails, setTripDetails] = useState({\r\n        startingCity: '',\r\n        destinationCity: '',\r\n        modeOfTransport: '',\r\n        days: 0,\r\n        budget: 0,\r\n    });\r\n\r\n    const handleChat = async (e) => {\r\n        e.preventDefault(); // Prevent form refresh\r\n        try {\r\n            let response;\r\n            if (userInput.includes(\"generate itinerary\")) {\r\n                // Sending input to the `/generate-itinerary` endpoint\r\n                response = await fetch('http://127.0.0.1:5000/generate-itinerary', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        user_input: userInput,\r\n                        starting_city: tripDetails.startingCity,\r\n                        destination_city: tripDetails.destinationCity,\r\n                        mode_of_transport: tripDetails.modeOfTransport,\r\n                        days: tripDetails.days,\r\n                        budget: tripDetails.budget,\r\n                    }),\r\n                });\r\n            } else if (userInput.includes(\"details\")) {\r\n                // Sending input to the `/retrieve-details` endpoint\r\n                response = await fetch('http://127.0.0.1:5000/retrieve-details', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ user_input: userInput }),\r\n                });\r\n            } else if (userInput.includes(\"top\")) {\r\n                // Sending input to the `/retrieve-top-items` endpoint\r\n                const numRecommendations = 5; // You can make this dynamic if needed\r\n                response = await fetch('http://127.0.0.1:5000/retrieve-top-items', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ user_input: userInput, num_recommendations: numRecommendations }),\r\n                });\r\n            } else if (userInput.includes(\"compare\")) {\r\n                // Sending input to the `/compare-two-options` endpoint\r\n                response = await fetch('http://127.0.0.1:5000/compare-two-options', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ user_input: userInput }),\r\n                });\r\n            } else {\r\n                // Default endpoint `/MiloChatbot`\r\n                response = await fetch('http://127.0.0.1:5000/MiloChatbot', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ user_input: userInput }),\r\n                });\r\n            }\r\n\r\n            const data = await response.json();\r\n            setBotResponse(data.response || data.result);\r\n        } catch (error) {\r\n            console.error('Error communicating with the chatbot:', error);\r\n            setBotResponse('Sorry, there was an error. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <NavBar />\r\n            <h1>Milo Chatbot</h1>\r\n            <form onSubmit={handleChat}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Type your message here...\"\r\n                    value={userInput}\r\n                    onChange={(e) => setUserInput(e.target.value)}\r\n                />\r\n                <button type=\"submit\">Send</button>\r\n            </form>\r\n            <div style={{ marginTop: '20px' }}>\r\n                <h2>Chatbot Response:</h2>\r\n                <p>{botResponse}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MiloChatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}