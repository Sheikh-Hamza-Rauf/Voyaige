{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\Voyaige\\\\proj\\\\front\\\\src\\\\components\\\\ChatbotPage\\\\MiloChatbot.js\";\nimport React, { useState } from 'react';\nimport NavBar from \"../NavBar/Navbar\";\nimport \"../\";\nfunction MiloChatbot() {\n  const [userInput, setUserInput] = useState('');\n  const [botResponse, setBotResponse] = useState('');\n  const [conversationState, setConversationState] = useState({\n    awaitingInput: null,\n    // Tracks what input is being waited on\n    tripDetails: {\n      startingCity: '',\n      destinationCity: '',\n      modeOfTransport: '',\n      days: 0,\n      budget: 0\n    }\n  });\n  const handleChat = async e => {\n    e.preventDefault(); // Prevent form refresh\n    try {\n      let response;\n      const {\n        awaitingInput,\n        tripDetails\n      } = conversationState;\n      if (awaitingInput) {\n        // Process expected input\n        const updatedTripDetails = {\n          ...tripDetails,\n          [awaitingInput]: userInput\n        };\n        setConversationState({\n          ...conversationState,\n          tripDetails: updatedTripDetails,\n          awaitingInput: null\n        });\n        setUserInput('');\n\n        // Ask for the next piece of information or call the API\n        const nextInput = getNextDetail(updatedTripDetails);\n        if (nextInput) {\n          setBotResponse(`Please provide your ${nextInput}.`);\n        } else {\n          // All details collected; send API request for itinerary generation\n          response = await fetch('http://127.0.0.1:5000/generate-itinerary', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updatedTripDetails)\n          });\n          const data = await response.json();\n          setBotResponse(data.response || 'Your itinerary has been generated!');\n        }\n        return;\n      }\n\n      // Initial user input processing\n      if (userInput.includes(\"generate itinerary\")) {\n        const nextInput = getNextDetail(tripDetails);\n        if (nextInput) {\n          setConversationState({\n            ...conversationState,\n            awaitingInput: nextInput\n          });\n          setBotResponse(`Please provide your ${nextInput}.`);\n        }\n      } else {\n        // Default endpoint `/MiloChatbot`\n        response = await fetch('http://127.0.0.1:5000/MiloChatbot', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_input: userInput\n          })\n        });\n        const data = await response.json();\n        setBotResponse(data.response || 'I am here to assist you!');\n      }\n      setUserInput('');\n    } catch (error) {\n      console.error('Error communicating with the chatbot:', error);\n      setBotResponse('Sorry, there was an error. Please try again.');\n    }\n  };\n  const getNextDetail = details => {\n    if (!details.startingCity) return 'starting city';\n    if (!details.destinationCity) return 'destination city';\n    if (!details.modeOfTransport) return 'mode of transport';\n    if (!details.days) return 'number of days';\n    if (!details.budget) return 'budget';\n    return null;\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"Milo Chatbot\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Type your message here...\",\n    value: userInput,\n    onChange: e => setUserInput(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"Send\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, \"Chatbot Response:\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, botResponse)));\n}\nexport default MiloChatbot;","map":{"version":3,"names":["React","useState","NavBar","MiloChatbot","userInput","setUserInput","botResponse","setBotResponse","conversationState","setConversationState","awaitingInput","tripDetails","startingCity","destinationCity","modeOfTransport","days","budget","handleChat","e","preventDefault","response","updatedTripDetails","nextInput","getNextDetail","fetch","method","headers","body","JSON","stringify","data","json","includes","user_input","error","console","details","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","style","marginTop"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/Voyaige/proj/front/src/components/ChatbotPage/MiloChatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport NavBar from \"../NavBar/Navbar\";\r\nimport \"../\"\r\n\r\nfunction MiloChatbot() {\r\n    const [userInput, setUserInput] = useState('');\r\n    const [botResponse, setBotResponse] = useState('');\r\n    const [conversationState, setConversationState] = useState({\r\n        awaitingInput: null, // Tracks what input is being waited on\r\n        tripDetails: {\r\n            startingCity: '',\r\n            destinationCity: '',\r\n            modeOfTransport: '',\r\n            days: 0,\r\n            budget: 0,\r\n        },\r\n    });\r\n\r\n    const handleChat = async (e) => {\r\n        e.preventDefault(); // Prevent form refresh\r\n        try {\r\n            let response;\r\n            const { awaitingInput, tripDetails } = conversationState;\r\n\r\n            if (awaitingInput) {\r\n                // Process expected input\r\n                const updatedTripDetails = { ...tripDetails, [awaitingInput]: userInput };\r\n                setConversationState({ ...conversationState, tripDetails: updatedTripDetails, awaitingInput: null });\r\n                setUserInput('');\r\n\r\n                // Ask for the next piece of information or call the API\r\n                const nextInput = getNextDetail(updatedTripDetails);\r\n                if (nextInput) {\r\n                    setBotResponse(`Please provide your ${nextInput}.`);\r\n                } else {\r\n                    // All details collected; send API request for itinerary generation\r\n                    response = await fetch('http://127.0.0.1:5000/generate-itinerary', {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify(updatedTripDetails),\r\n                    });\r\n                    const data = await response.json();\r\n                    setBotResponse(data.response || 'Your itinerary has been generated!');\r\n                }\r\n                return;\r\n            }\r\n\r\n            // Initial user input processing\r\n            if (userInput.includes(\"generate itinerary\")) {\r\n                const nextInput = getNextDetail(tripDetails);\r\n                if (nextInput) {\r\n                    setConversationState({ ...conversationState, awaitingInput: nextInput });\r\n                    setBotResponse(`Please provide your ${nextInput}.`);\r\n                }\r\n            } else {\r\n                // Default endpoint `/MiloChatbot`\r\n                response = await fetch('http://127.0.0.1:5000/MiloChatbot', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ user_input: userInput }),\r\n                });\r\n                const data = await response.json();\r\n                setBotResponse(data.response || 'I am here to assist you!');\r\n            }\r\n            setUserInput('');\r\n        } catch (error) {\r\n            console.error('Error communicating with the chatbot:', error);\r\n            setBotResponse('Sorry, there was an error. Please try again.');\r\n        }\r\n    };\r\n\r\n    const getNextDetail = (details) => {\r\n        if (!details.startingCity) return 'starting city';\r\n        if (!details.destinationCity) return 'destination city';\r\n        if (!details.modeOfTransport) return 'mode of transport';\r\n        if (!details.days) return 'number of days';\r\n        if (!details.budget) return 'budget';\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <NavBar />\r\n            <h1>Milo Chatbot</h1>\r\n            <form onSubmit={handleChat}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Type your message here...\"\r\n                    value={userInput}\r\n                    onChange={(e) => setUserInput(e.target.value)}\r\n                />\r\n                <button type=\"submit\">Send</button>\r\n            </form>\r\n\r\n            <div style={{ marginTop: '20px' }}>\r\n                <h2>Chatbot Response:</h2>\r\n                <p>{botResponse}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MiloChatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}